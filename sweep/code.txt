ProgramStartPoint
000000	00 08 18 ed 04 00	Write   [0:0x3010] = 9da
000001	04 d3 03 00 20 00	Branch  0x3d30, [CALL]
000002	05 00 00 00 00 00	Stop    
000003	05 00 00 00 00 00	Stop    
000004	05 00 00 00 00 00	Stop    
000005	05 00 00 00 00 00	Stop    
000006	01 09 18 80 60 00	Copy    [0:3012] = [0:3040]
000007	91 07 80 01 00 01	Copy    [1:000f] = [SF+0], SrcBase: AI
000008	43 00 00 00 20 00	Wait    4, Tc
000009	11 08 80 01 00 01	Copy    [1:0010] = [SF+1], SrcBase: AI
00000a	51 00 00 20 60 00	Copy    [1:0000] = [0:3010], DestBase: A
00000b	43 00 00 00 20 00	Wait    4, Tc
00000c	00 09 18 00 00 00	Write   [0:0x3012] = 0
00000d	43 00 00 00 20 00	Wait    4, Tc
00000e	01 08 98 20 00 00	Copy    [0:3010] = [1:0010]
00000f	54 01 00 00 20 00	Branch  0x15, [CALL]
000010	01 08 18 80 60 00	Copy    [0:3010] = [0:3040]
000011	43 00 00 00 20 00	Wait    4, Tc
000012	01 08 98 01 00 00	Copy    [0:3010] = [1:0000], SrcBase: A
000013	43 00 00 00 20 00	Wait    4, Tc
000014	04 00 00 00 40 00	Branch  0x0, [RET]

000015	81 01 98 1e 00 00	Copy    [0:3003] = [1:000f]
000016	06 00 00 00 00 00	Nop     
000017	06 00 00 00 00 00	Nop     
000018	06 00 00 00 00 00	Nop     
000019	06 00 00 00 00 00	Nop     
00001a	06 00 00 00 00 00	Nop     
00001b	06 00 00 00 00 00	Nop     
00001c	06 00 00 00 00 00	Nop     
00001d	06 00 00 00 00 00	Nop     
00001e	06 00 00 00 00 00	Nop     
00001f	81 01 98 01 00 01	Copy    [0:3003] = [SF+0], SrcBase: AI
000020	06 00 00 00 00 00	Nop     
000021	06 00 00 00 00 00	Nop     
000022	06 00 00 00 00 00	Nop     
000023	06 00 00 00 00 00	Nop     
000024	06 00 00 00 00 00	Nop     
000025	06 00 00 00 00 00	Nop     
000026	06 00 00 00 00 00	Nop     
000027	06 00 00 00 00 00	Nop     
000028	06 00 00 00 00 00	Nop     

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::LogenPowerUpHelper(class std::array<enum Vayyar::Centipede::PLL_POWER,2>,bool)
000029	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00002a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00002b	43 00 00 00 20 00	Wait    4, Tc
00002c	c0 11 80 05 05 00	Write   [0:0x0023] = a0b, DestBase: A
00002d	b3 00 00 00 20 00	Wait    11, Tc
00002e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00002f	80 09 18 00 00 00	Write   [0:0x3013] = 0
000030	53 14 00 00 20 00	Wait    325, Tc
000031	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000032	80 09 18 00 00 00	Write   [0:0x3013] = 0
000033	43 00 00 00 20 00	Wait    4, Tc
000034	40 20 00 40 30 00	Write   [0:0x0040] = 6080, DestBase: A
000035	b3 00 00 00 20 00	Wait    11, Tc
000036	00 09 18 00 00 00	Write   [0:0x3012] = 0
000037	80 09 18 00 00 00	Write   [0:0x3013] = 0
000038	53 a0 86 01 20 00	Wait    1600005, Tc
000039	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00003a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00003b	43 00 00 00 20 00	Wait    4, Tc
00003c	40 20 00 c4 38 00	Write   [0:0x0040] = 7188, DestBase: A
00003d	b3 00 00 00 20 00	Wait    11, Tc
00003e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00003f	80 09 18 00 00 00	Write   [0:0x3013] = 0
000040	53 d0 07 00 20 00	Wait    32005, Tc
000041	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000042	80 09 18 00 00 00	Write   [0:0x3013] = 0
000043	43 00 00 00 20 00	Wait    4, Tc
000044	40 48 00 40 30 00	Write   [0:0x0090] = 6080, DestBase: A
000045	b3 00 00 00 20 00	Wait    11, Tc
000046	00 09 18 00 00 00	Write   [0:0x3012] = 0
000047	80 09 18 00 00 00	Write   [0:0x3013] = 0
000048	53 a0 86 01 20 00	Wait    1600005, Tc
000049	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00004a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00004b	43 00 00 00 20 00	Wait    4, Tc
00004c	40 48 00 c4 38 00	Write   [0:0x0090] = 7188, DestBase: A
00004d	b3 00 00 00 20 00	Wait    11, Tc
00004e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00004f	80 09 18 00 00 00	Write   [0:0x3013] = 0
000050	53 d0 07 00 20 00	Wait    32005, Tc
000051	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxRecorderModule::RxAbortProcedure(void)
000052	00 09 08 00 00 00	Write   [0:0x1012] = 0
000053	00 02 08 00 00 00	Write   [0:0x1004] = 0
000054	80 02 08 00 00 00	Write   [0:0x1005] = 0
000055	00 09 88 00 00 00	Write   [0:0x1012] = 1
000056	63 00 00 00 20 00	Wait    6, Tc
000057	00 09 08 00 00 00	Write   [0:0x1012] = 0
000058	33 00 00 00 20 00	Wait    3, Tc
000059	00 00 88 df 7f 00	Write   [0:0x1000] = ffbf
00005a	00 00 08 00 00 00	Write   [0:0x1000] = 0
00005b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxRecorderModule::Initialize(enum Vayyar::Centipede::CENTIPEDE_RECORDING_MODE,int,enum Vayyar::Centipede::INPUT_SELECT_MODE,int)
00005c	43 00 00 00 20 00	Wait    4, Tc
00005d	24 05 00 00 20 00	Branch  0x52, [CALL] < Vayyar::Centipede::CentipedeRxRecorderModule::RxAbortProcedure(void) >
00005e	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
00005f	43 00 00 00 20 00	Wait    4, Tc
000060	01 00 88 01 00 01	Copy    [0:1000] = [SF+0], SrcBase: AI
000061	01 00 88 01 00 01	Copy    [0:1000] = [SF+1], SrcBase: AI
000062	33 00 00 00 20 00	Wait    3, Tc
000063	01 34 88 01 00 01	Copy    [0:1068] = [SF+2], SrcBase: AI
000064	81 34 88 01 00 01	Copy    [0:1069] = [SF+3], SrcBase: AI
000065	33 00 00 00 20 00	Wait    3, Tc
000066	04 00 00 00 40 00	Branch  0x0, [RET]


CentipedeRxLineupCommand::Initialize()_calibrationFlowInitCode
000067	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
000068	c4 05 00 00 20 00	Branch  0x5c, [CALL] < Vayyar::Centipede::CentipedeRxRecorderModule::Initialize(enum Vayyar::Centipede::CENTIPEDE_RECORDING_MODE,int,enum Vayyar::Centipede::INPUT_SELECT_MODE,int) >
000069	00 30 08 00 00 00	Write   [0:0x1060] = 0
00006a	80 30 08 00 00 00	Write   [0:0x1061] = 0
00006b	00 60 88 00 00 00	Write   [0:0x10c0] = 1
00006c	80 b7 80 00 00 00	Write   [0:0x016f] = 1
00006d	80 bf 00 18 00 00	Write   [0:0x017f] = 30
00006e	80 bf 00 80 7f 00	Write   [0:0x017f] = ff00
00006f	00 d5 00 20 20 00	Write   [0:0x01aa] = 4040
000070	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplTrModule::Initialize(void)
000071	00 00 28 00 00 00	Write   [0:0x5000] = 0
000072	b3 00 00 00 20 00	Wait    11, Tc
000073	00 08 28 00 00 00	Write   [0:0x5010] = 0
000074	b3 00 00 00 20 00	Wait    11, Tc
000075	00 10 28 00 00 00	Write   [0:0x5020] = 0
000076	b3 00 00 00 20 00	Wait    11, Tc
000077	00 18 28 00 00 00	Write   [0:0x5030] = 0
000078	b3 00 00 00 20 00	Wait    11, Tc
000079	00 20 28 00 00 00	Write   [0:0x5040] = 0
00007a	b3 00 00 00 20 00	Wait    11, Tc
00007b	00 28 28 00 00 00	Write   [0:0x5050] = 0
00007c	b3 00 00 00 20 00	Wait    11, Tc
00007d	00 30 28 00 00 00	Write   [0:0x5060] = 0
00007e	b3 00 00 00 20 00	Wait    11, Tc
00007f	00 38 28 00 00 00	Write   [0:0x5070] = 0
000080	b3 00 00 00 20 00	Wait    11, Tc
000081	00 40 28 00 00 00	Write   [0:0x5080] = 0
000082	b3 00 00 00 20 00	Wait    11, Tc
000083	00 48 28 00 00 00	Write   [0:0x5090] = 0
000084	b3 00 00 00 20 00	Wait    11, Tc
000085	00 50 28 00 00 00	Write   [0:0x50a0] = 0
000086	b3 00 00 00 20 00	Wait    11, Tc
000087	00 58 28 00 00 00	Write   [0:0x50b0] = 0
000088	b3 00 00 00 20 00	Wait    11, Tc
000089	00 d8 28 00 00 00	Write   [0:0x51b0] = 0
00008a	b3 00 00 00 20 00	Wait    11, Tc
00008b	00 d0 28 00 00 00	Write   [0:0x51a0] = 0
00008c	b3 00 00 00 20 00	Wait    11, Tc
00008d	00 c8 28 00 00 00	Write   [0:0x5190] = 0
00008e	b3 00 00 00 20 00	Wait    11, Tc
00008f	00 c0 28 00 00 00	Write   [0:0x5180] = 0
000090	b3 00 00 00 20 00	Wait    11, Tc
000091	00 b8 28 00 00 00	Write   [0:0x5170] = 0
000092	b3 00 00 00 20 00	Wait    11, Tc
000093	00 b0 28 00 00 00	Write   [0:0x5160] = 0
000094	b3 00 00 00 20 00	Wait    11, Tc
000095	00 a8 28 00 00 00	Write   [0:0x5150] = 0
000096	b3 00 00 00 20 00	Wait    11, Tc
000097	00 a0 28 00 00 00	Write   [0:0x5140] = 0
000098	b3 00 00 00 20 00	Wait    11, Tc
000099	00 98 28 00 00 00	Write   [0:0x5130] = 0
00009a	b3 00 00 00 20 00	Wait    11, Tc
00009b	00 90 28 00 00 00	Write   [0:0x5120] = 0
00009c	b3 00 00 00 20 00	Wait    11, Tc
00009d	00 88 28 00 00 00	Write   [0:0x5110] = 0
00009e	b3 00 00 00 20 00	Wait    11, Tc
00009f	00 80 28 00 00 00	Write   [0:0x5100] = 0
0000a0	b3 00 00 00 20 00	Wait    11, Tc
0000a1	00 00 38 00 00 00	Write   [0:0x7000] = 0
0000a2	b3 00 00 00 20 00	Wait    11, Tc
0000a3	00 08 38 00 00 00	Write   [0:0x7010] = 0
0000a4	b3 00 00 00 20 00	Wait    11, Tc
0000a5	00 10 38 00 00 00	Write   [0:0x7020] = 0
0000a6	b3 00 00 00 20 00	Wait    11, Tc
0000a7	00 18 38 00 00 00	Write   [0:0x7030] = 0
0000a8	b3 00 00 00 20 00	Wait    11, Tc
0000a9	00 20 38 00 00 00	Write   [0:0x7040] = 0
0000aa	b3 00 00 00 20 00	Wait    11, Tc
0000ab	00 28 38 00 00 00	Write   [0:0x7050] = 0
0000ac	b3 00 00 00 20 00	Wait    11, Tc
0000ad	00 30 38 00 00 00	Write   [0:0x7060] = 0
0000ae	b3 00 00 00 20 00	Wait    11, Tc
0000af	00 38 38 00 00 00	Write   [0:0x7070] = 0
0000b0	b3 00 00 00 20 00	Wait    11, Tc
0000b1	00 40 38 00 00 00	Write   [0:0x7080] = 0
0000b2	b3 00 00 00 20 00	Wait    11, Tc
0000b3	00 48 38 00 00 00	Write   [0:0x7090] = 0
0000b4	b3 00 00 00 20 00	Wait    11, Tc
0000b5	00 50 38 00 00 00	Write   [0:0x70a0] = 0
0000b6	b3 00 00 00 20 00	Wait    11, Tc
0000b7	00 58 38 00 00 00	Write   [0:0x70b0] = 0
0000b8	b3 00 00 00 20 00	Wait    11, Tc
0000b9	00 d8 38 00 00 00	Write   [0:0x71b0] = 0
0000ba	b3 00 00 00 20 00	Wait    11, Tc
0000bb	00 d0 38 00 00 00	Write   [0:0x71a0] = 0
0000bc	b3 00 00 00 20 00	Wait    11, Tc
0000bd	00 c8 38 00 00 00	Write   [0:0x7190] = 0
0000be	b3 00 00 00 20 00	Wait    11, Tc
0000bf	00 c0 38 00 00 00	Write   [0:0x7180] = 0
0000c0	b3 00 00 00 20 00	Wait    11, Tc
0000c1	00 b8 38 00 00 00	Write   [0:0x7170] = 0
0000c2	b3 00 00 00 20 00	Wait    11, Tc
0000c3	00 b0 38 00 00 00	Write   [0:0x7160] = 0
0000c4	b3 00 00 00 20 00	Wait    11, Tc
0000c5	00 a8 38 00 00 00	Write   [0:0x7150] = 0
0000c6	b3 00 00 00 20 00	Wait    11, Tc
0000c7	00 a0 38 00 00 00	Write   [0:0x7140] = 0
0000c8	b3 00 00 00 20 00	Wait    11, Tc
0000c9	00 98 38 00 00 00	Write   [0:0x7130] = 0
0000ca	b3 00 00 00 20 00	Wait    11, Tc
0000cb	00 90 38 00 00 00	Write   [0:0x7120] = 0
0000cc	b3 00 00 00 20 00	Wait    11, Tc
0000cd	00 88 38 00 00 00	Write   [0:0x7110] = 0
0000ce	b3 00 00 00 20 00	Wait    11, Tc
0000cf	00 80 38 00 00 00	Write   [0:0x7100] = 0
0000d0	b3 00 00 00 20 00	Wait    11, Tc
0000d1	00 00 20 00 00 00	Write   [0:0x4000] = 0
0000d2	b3 00 00 00 20 00	Wait    11, Tc
0000d3	00 08 20 00 00 00	Write   [0:0x4010] = 0
0000d4	b3 00 00 00 20 00	Wait    11, Tc
0000d5	00 10 20 00 00 00	Write   [0:0x4020] = 0
0000d6	b3 00 00 00 20 00	Wait    11, Tc
0000d7	00 18 20 00 00 00	Write   [0:0x4030] = 0
0000d8	b3 00 00 00 20 00	Wait    11, Tc
0000d9	00 20 20 00 00 00	Write   [0:0x4040] = 0
0000da	b3 00 00 00 20 00	Wait    11, Tc
0000db	00 28 20 00 00 00	Write   [0:0x4050] = 0
0000dc	b3 00 00 00 20 00	Wait    11, Tc
0000dd	00 30 20 00 00 00	Write   [0:0x4060] = 0
0000de	b3 00 00 00 20 00	Wait    11, Tc
0000df	00 38 20 00 00 00	Write   [0:0x4070] = 0
0000e0	b3 00 00 00 20 00	Wait    11, Tc
0000e1	00 40 20 00 00 00	Write   [0:0x4080] = 0
0000e2	b3 00 00 00 20 00	Wait    11, Tc
0000e3	00 48 20 00 00 00	Write   [0:0x4090] = 0
0000e4	b3 00 00 00 20 00	Wait    11, Tc
0000e5	00 50 20 00 00 00	Write   [0:0x40a0] = 0
0000e6	b3 00 00 00 20 00	Wait    11, Tc
0000e7	00 58 20 00 00 00	Write   [0:0x40b0] = 0
0000e8	b3 00 00 00 20 00	Wait    11, Tc
0000e9	00 80 20 00 00 00	Write   [0:0x4100] = 0
0000ea	b3 00 00 00 20 00	Wait    11, Tc
0000eb	00 88 20 00 00 00	Write   [0:0x4110] = 0
0000ec	b3 00 00 00 20 00	Wait    11, Tc
0000ed	00 90 20 00 00 00	Write   [0:0x4120] = 0
0000ee	b3 00 00 00 20 00	Wait    11, Tc
0000ef	00 98 20 00 00 00	Write   [0:0x4130] = 0
0000f0	b3 00 00 00 20 00	Wait    11, Tc
0000f1	00 a0 20 00 00 00	Write   [0:0x4140] = 0
0000f2	b3 00 00 00 20 00	Wait    11, Tc
0000f3	00 a8 20 00 00 00	Write   [0:0x4150] = 0
0000f4	b3 00 00 00 20 00	Wait    11, Tc
0000f5	00 b0 20 00 00 00	Write   [0:0x4160] = 0
0000f6	b3 00 00 00 20 00	Wait    11, Tc
0000f7	00 b8 20 00 00 00	Write   [0:0x4170] = 0
0000f8	b3 00 00 00 20 00	Wait    11, Tc
0000f9	00 c0 20 00 00 00	Write   [0:0x4180] = 0
0000fa	b3 00 00 00 20 00	Wait    11, Tc
0000fb	00 c8 20 00 00 00	Write   [0:0x4190] = 0
0000fc	b3 00 00 00 20 00	Wait    11, Tc
0000fd	00 d0 20 00 00 00	Write   [0:0x41a0] = 0
0000fe	b3 00 00 00 20 00	Wait    11, Tc
0000ff	00 d8 20 00 00 00	Write   [0:0x41b0] = 0
000100	b3 00 00 00 20 00	Wait    11, Tc
000101	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedePortStateCommand::Initialize(void)
000102	14 07 00 00 20 00	Branch  0x71, [CALL] < Vayyar::Centipede::CentipedeImplTrModule::Initialize(void) >
000103	80 e9 20 0a 00 00	Write   [0:0x41d3] = 14
000104	b3 00 00 00 20 00	Wait    11, Tc
000105	00 e9 28 80 07 00	Write   [0:0x51d2] = f00
000106	b3 00 00 00 20 00	Wait    11, Tc
000107	00 e9 38 80 07 00	Write   [0:0x71d2] = f00
000108	b3 00 00 00 20 00	Wait    11, Tc
000109	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0
00010a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
00010b	01 71 98 01 00 01	Copy    [0:30e2] = [SF+1], SrcBase: AI
00010c	33 00 00 00 20 00	Wait    3, Tc
00010d	81 71 98 01 00 01	Copy    [0:30e3] = [SF+2], SrcBase: AI
00010e	33 00 00 00 20 00	Wait    3, Tc
00010f	01 70 18 d2 61 00	Copy    [0:30e0] = [0:30e9]
000110	01 71 98 01 00 01	Copy    [0:30e2] = [SF+3], SrcBase: AI
000111	73 00 00 00 20 00	Wait    7, Tc
000112	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0
000113	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000114	01 71 98 44 00 00	Copy    [0:30e2] = [1:0022]
000115	33 00 00 00 20 00	Wait    3, Tc
000116	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000117	33 00 00 00 20 00	Wait    3, Tc
000118	11 11 00 c8 61 00	Copy    [1:0022] = [0:30e4]
000119	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00011a	33 00 00 00 20 00	Wait    3, Tc
00011b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00011c	43 00 00 00 20 00	Wait    4, Tc
00011d	01 70 98 46 00 00	Copy    [0:30e0] = [1:0023]
00011e	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00011f	01 70 98 46 00 00	Copy    [0:30e0] = [1:0023]
000120	34 11 00 00 20 00	Branch  0x113, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000121	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000122	43 00 00 00 20 00	Wait    4, Tc
000123	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000124	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000125	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000126	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000127	43 00 00 00 20 00	Wait    4, Tc
000128	01 00 a8 44 00 00	Copy    [0:5000] = [1:0022]
000129	b3 00 00 00 20 00	Wait    11, Tc
00012a	81 00 a8 01 00 01	Copy    [0:5001] = [SF+1], SrcBase: AI
00012b	b3 00 00 00 20 00	Wait    11, Tc
00012c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00012d	43 00 00 00 20 00	Wait    4, Tc
00012e	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00012f	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000130	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000131	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000132	43 00 00 00 20 00	Wait    4, Tc
000133	01 08 a8 44 00 00	Copy    [0:5010] = [1:0022]
000134	b3 00 00 00 20 00	Wait    11, Tc
000135	81 08 a8 01 00 01	Copy    [0:5011] = [SF+1], SrcBase: AI
000136	b3 00 00 00 20 00	Wait    11, Tc
000137	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000138	43 00 00 00 20 00	Wait    4, Tc
000139	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00013a	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00013b	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00013c	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00013d	43 00 00 00 20 00	Wait    4, Tc
00013e	01 10 a8 44 00 00	Copy    [0:5020] = [1:0022]
00013f	b3 00 00 00 20 00	Wait    11, Tc
000140	81 10 a8 01 00 01	Copy    [0:5021] = [SF+1], SrcBase: AI
000141	b3 00 00 00 20 00	Wait    11, Tc
000142	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000143	43 00 00 00 20 00	Wait    4, Tc
000144	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000145	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000146	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000147	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000148	43 00 00 00 20 00	Wait    4, Tc
000149	01 18 a8 44 00 00	Copy    [0:5030] = [1:0022]
00014a	b3 00 00 00 20 00	Wait    11, Tc
00014b	81 18 a8 01 00 01	Copy    [0:5031] = [SF+1], SrcBase: AI
00014c	b3 00 00 00 20 00	Wait    11, Tc
00014d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00014e	43 00 00 00 20 00	Wait    4, Tc
00014f	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000150	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000151	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000152	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000153	43 00 00 00 20 00	Wait    4, Tc
000154	01 20 a8 44 00 00	Copy    [0:5040] = [1:0022]
000155	b3 00 00 00 20 00	Wait    11, Tc
000156	81 20 a8 01 00 01	Copy    [0:5041] = [SF+1], SrcBase: AI
000157	b3 00 00 00 20 00	Wait    11, Tc
000158	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000159	43 00 00 00 20 00	Wait    4, Tc
00015a	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00015b	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00015c	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00015d	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00015e	43 00 00 00 20 00	Wait    4, Tc
00015f	01 28 a8 44 00 00	Copy    [0:5050] = [1:0022]
000160	b3 00 00 00 20 00	Wait    11, Tc
000161	81 28 a8 01 00 01	Copy    [0:5051] = [SF+1], SrcBase: AI
000162	b3 00 00 00 20 00	Wait    11, Tc
000163	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000164	43 00 00 00 20 00	Wait    4, Tc
000165	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000166	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000167	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000168	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000169	43 00 00 00 20 00	Wait    4, Tc
00016a	01 30 a8 44 00 00	Copy    [0:5060] = [1:0022]
00016b	b3 00 00 00 20 00	Wait    11, Tc
00016c	81 30 a8 01 00 01	Copy    [0:5061] = [SF+1], SrcBase: AI
00016d	b3 00 00 00 20 00	Wait    11, Tc
00016e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00016f	43 00 00 00 20 00	Wait    4, Tc
000170	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000171	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000172	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000173	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000174	43 00 00 00 20 00	Wait    4, Tc
000175	01 38 a8 44 00 00	Copy    [0:5070] = [1:0022]
000176	b3 00 00 00 20 00	Wait    11, Tc
000177	81 38 a8 01 00 01	Copy    [0:5071] = [SF+1], SrcBase: AI
000178	b3 00 00 00 20 00	Wait    11, Tc
000179	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00017a	43 00 00 00 20 00	Wait    4, Tc
00017b	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00017c	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00017d	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00017e	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00017f	43 00 00 00 20 00	Wait    4, Tc
000180	01 40 a8 44 00 00	Copy    [0:5080] = [1:0022]
000181	b3 00 00 00 20 00	Wait    11, Tc
000182	81 40 a8 01 00 01	Copy    [0:5081] = [SF+1], SrcBase: AI
000183	b3 00 00 00 20 00	Wait    11, Tc
000184	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000185	43 00 00 00 20 00	Wait    4, Tc
000186	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000187	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000188	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000189	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00018a	43 00 00 00 20 00	Wait    4, Tc
00018b	01 48 a8 44 00 00	Copy    [0:5090] = [1:0022]
00018c	b3 00 00 00 20 00	Wait    11, Tc
00018d	81 48 a8 01 00 01	Copy    [0:5091] = [SF+1], SrcBase: AI
00018e	b3 00 00 00 20 00	Wait    11, Tc
00018f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000190	43 00 00 00 20 00	Wait    4, Tc
000191	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000192	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000193	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000194	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000195	43 00 00 00 20 00	Wait    4, Tc
000196	01 50 a8 44 00 00	Copy    [0:50a0] = [1:0022]
000197	b3 00 00 00 20 00	Wait    11, Tc
000198	81 50 a8 01 00 01	Copy    [0:50a1] = [SF+1], SrcBase: AI
000199	b3 00 00 00 20 00	Wait    11, Tc
00019a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00019b	43 00 00 00 20 00	Wait    4, Tc
00019c	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00019d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00019e	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00019f	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001a0	43 00 00 00 20 00	Wait    4, Tc
0001a1	01 58 a8 44 00 00	Copy    [0:50b0] = [1:0022]
0001a2	b3 00 00 00 20 00	Wait    11, Tc
0001a3	81 58 a8 01 00 01	Copy    [0:50b1] = [SF+1], SrcBase: AI
0001a4	b3 00 00 00 20 00	Wait    11, Tc
0001a5	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001a6	43 00 00 00 20 00	Wait    4, Tc
0001a7	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0001a8	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0001a9	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0001aa	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001ab	43 00 00 00 20 00	Wait    4, Tc
0001ac	01 d8 a8 44 00 00	Copy    [0:51b0] = [1:0022]
0001ad	b3 00 00 00 20 00	Wait    11, Tc
0001ae	81 d8 a8 01 00 01	Copy    [0:51b1] = [SF+1], SrcBase: AI
0001af	b3 00 00 00 20 00	Wait    11, Tc
0001b0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001b1	43 00 00 00 20 00	Wait    4, Tc
0001b2	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0001b3	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0001b4	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0001b5	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001b6	43 00 00 00 20 00	Wait    4, Tc
0001b7	01 d0 a8 44 00 00	Copy    [0:51a0] = [1:0022]
0001b8	b3 00 00 00 20 00	Wait    11, Tc
0001b9	81 d0 a8 01 00 01	Copy    [0:51a1] = [SF+1], SrcBase: AI
0001ba	b3 00 00 00 20 00	Wait    11, Tc
0001bb	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001bc	43 00 00 00 20 00	Wait    4, Tc
0001bd	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0001be	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0001bf	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0001c0	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001c1	43 00 00 00 20 00	Wait    4, Tc
0001c2	01 c8 a8 44 00 00	Copy    [0:5190] = [1:0022]
0001c3	b3 00 00 00 20 00	Wait    11, Tc
0001c4	81 c8 a8 01 00 01	Copy    [0:5191] = [SF+1], SrcBase: AI
0001c5	b3 00 00 00 20 00	Wait    11, Tc
0001c6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001c7	43 00 00 00 20 00	Wait    4, Tc
0001c8	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0001c9	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0001ca	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0001cb	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001cc	43 00 00 00 20 00	Wait    4, Tc
0001cd	01 c0 a8 44 00 00	Copy    [0:5180] = [1:0022]
0001ce	b3 00 00 00 20 00	Wait    11, Tc
0001cf	81 c0 a8 01 00 01	Copy    [0:5181] = [SF+1], SrcBase: AI
0001d0	b3 00 00 00 20 00	Wait    11, Tc
0001d1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001d2	43 00 00 00 20 00	Wait    4, Tc
0001d3	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0001d4	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0001d5	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0001d6	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001d7	43 00 00 00 20 00	Wait    4, Tc
0001d8	01 b8 a8 44 00 00	Copy    [0:5170] = [1:0022]
0001d9	b3 00 00 00 20 00	Wait    11, Tc
0001da	81 b8 a8 01 00 01	Copy    [0:5171] = [SF+1], SrcBase: AI
0001db	b3 00 00 00 20 00	Wait    11, Tc
0001dc	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001dd	43 00 00 00 20 00	Wait    4, Tc
0001de	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0001df	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0001e0	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0001e1	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001e2	43 00 00 00 20 00	Wait    4, Tc
0001e3	01 b0 a8 44 00 00	Copy    [0:5160] = [1:0022]
0001e4	b3 00 00 00 20 00	Wait    11, Tc
0001e5	81 b0 a8 01 00 01	Copy    [0:5161] = [SF+1], SrcBase: AI
0001e6	b3 00 00 00 20 00	Wait    11, Tc
0001e7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001e8	43 00 00 00 20 00	Wait    4, Tc
0001e9	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0001ea	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0001eb	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0001ec	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001ed	43 00 00 00 20 00	Wait    4, Tc
0001ee	01 a8 a8 44 00 00	Copy    [0:5150] = [1:0022]
0001ef	b3 00 00 00 20 00	Wait    11, Tc
0001f0	81 a8 a8 01 00 01	Copy    [0:5151] = [SF+1], SrcBase: AI
0001f1	b3 00 00 00 20 00	Wait    11, Tc
0001f2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001f3	43 00 00 00 20 00	Wait    4, Tc
0001f4	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0001f5	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0001f6	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0001f7	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0001f8	43 00 00 00 20 00	Wait    4, Tc
0001f9	01 a0 a8 44 00 00	Copy    [0:5140] = [1:0022]
0001fa	b3 00 00 00 20 00	Wait    11, Tc
0001fb	81 a0 a8 01 00 01	Copy    [0:5141] = [SF+1], SrcBase: AI
0001fc	b3 00 00 00 20 00	Wait    11, Tc
0001fd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0001fe	43 00 00 00 20 00	Wait    4, Tc
0001ff	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000200	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000201	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000202	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000203	43 00 00 00 20 00	Wait    4, Tc
000204	01 98 a8 44 00 00	Copy    [0:5130] = [1:0022]
000205	b3 00 00 00 20 00	Wait    11, Tc
000206	81 98 a8 01 00 01	Copy    [0:5131] = [SF+1], SrcBase: AI
000207	b3 00 00 00 20 00	Wait    11, Tc
000208	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000209	43 00 00 00 20 00	Wait    4, Tc
00020a	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00020b	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00020c	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00020d	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00020e	43 00 00 00 20 00	Wait    4, Tc
00020f	01 90 a8 44 00 00	Copy    [0:5120] = [1:0022]
000210	b3 00 00 00 20 00	Wait    11, Tc
000211	81 90 a8 01 00 01	Copy    [0:5121] = [SF+1], SrcBase: AI
000212	b3 00 00 00 20 00	Wait    11, Tc
000213	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000214	43 00 00 00 20 00	Wait    4, Tc
000215	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000216	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000217	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000218	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000219	43 00 00 00 20 00	Wait    4, Tc
00021a	01 88 a8 44 00 00	Copy    [0:5110] = [1:0022]
00021b	b3 00 00 00 20 00	Wait    11, Tc
00021c	81 88 a8 01 00 01	Copy    [0:5111] = [SF+1], SrcBase: AI
00021d	b3 00 00 00 20 00	Wait    11, Tc
00021e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00021f	43 00 00 00 20 00	Wait    4, Tc
000220	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000221	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000222	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000223	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000224	43 00 00 00 20 00	Wait    4, Tc
000225	01 80 a8 44 00 00	Copy    [0:5100] = [1:0022]
000226	b3 00 00 00 20 00	Wait    11, Tc
000227	81 80 a8 01 00 01	Copy    [0:5101] = [SF+1], SrcBase: AI
000228	b3 00 00 00 20 00	Wait    11, Tc
000229	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00022a	43 00 00 00 20 00	Wait    4, Tc
00022b	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00022c	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00022d	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00022e	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00022f	43 00 00 00 20 00	Wait    4, Tc
000230	01 00 b8 44 00 00	Copy    [0:7000] = [1:0022]
000231	b3 00 00 00 20 00	Wait    11, Tc
000232	81 00 b8 01 00 01	Copy    [0:7001] = [SF+1], SrcBase: AI
000233	b3 00 00 00 20 00	Wait    11, Tc
000234	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000235	43 00 00 00 20 00	Wait    4, Tc
000236	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000237	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000238	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000239	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00023a	43 00 00 00 20 00	Wait    4, Tc
00023b	01 08 b8 44 00 00	Copy    [0:7010] = [1:0022]
00023c	b3 00 00 00 20 00	Wait    11, Tc
00023d	81 08 b8 01 00 01	Copy    [0:7011] = [SF+1], SrcBase: AI
00023e	b3 00 00 00 20 00	Wait    11, Tc
00023f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000240	43 00 00 00 20 00	Wait    4, Tc
000241	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000242	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000243	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000244	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000245	43 00 00 00 20 00	Wait    4, Tc
000246	01 10 b8 44 00 00	Copy    [0:7020] = [1:0022]
000247	b3 00 00 00 20 00	Wait    11, Tc
000248	81 10 b8 01 00 01	Copy    [0:7021] = [SF+1], SrcBase: AI
000249	b3 00 00 00 20 00	Wait    11, Tc
00024a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00024b	43 00 00 00 20 00	Wait    4, Tc
00024c	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00024d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00024e	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00024f	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000250	43 00 00 00 20 00	Wait    4, Tc
000251	01 18 b8 44 00 00	Copy    [0:7030] = [1:0022]
000252	b3 00 00 00 20 00	Wait    11, Tc
000253	81 18 b8 01 00 01	Copy    [0:7031] = [SF+1], SrcBase: AI
000254	b3 00 00 00 20 00	Wait    11, Tc
000255	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000256	43 00 00 00 20 00	Wait    4, Tc
000257	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000258	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000259	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00025a	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00025b	43 00 00 00 20 00	Wait    4, Tc
00025c	01 20 b8 44 00 00	Copy    [0:7040] = [1:0022]
00025d	b3 00 00 00 20 00	Wait    11, Tc
00025e	81 20 b8 01 00 01	Copy    [0:7041] = [SF+1], SrcBase: AI
00025f	b3 00 00 00 20 00	Wait    11, Tc
000260	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000261	43 00 00 00 20 00	Wait    4, Tc
000262	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000263	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000264	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000265	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000266	43 00 00 00 20 00	Wait    4, Tc
000267	01 28 b8 44 00 00	Copy    [0:7050] = [1:0022]
000268	b3 00 00 00 20 00	Wait    11, Tc
000269	81 28 b8 01 00 01	Copy    [0:7051] = [SF+1], SrcBase: AI
00026a	b3 00 00 00 20 00	Wait    11, Tc
00026b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00026c	43 00 00 00 20 00	Wait    4, Tc
00026d	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00026e	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00026f	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000270	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000271	43 00 00 00 20 00	Wait    4, Tc
000272	01 30 b8 44 00 00	Copy    [0:7060] = [1:0022]
000273	b3 00 00 00 20 00	Wait    11, Tc
000274	81 30 b8 01 00 01	Copy    [0:7061] = [SF+1], SrcBase: AI
000275	b3 00 00 00 20 00	Wait    11, Tc
000276	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000277	43 00 00 00 20 00	Wait    4, Tc
000278	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000279	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00027a	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00027b	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00027c	43 00 00 00 20 00	Wait    4, Tc
00027d	01 38 b8 44 00 00	Copy    [0:7070] = [1:0022]
00027e	b3 00 00 00 20 00	Wait    11, Tc
00027f	81 38 b8 01 00 01	Copy    [0:7071] = [SF+1], SrcBase: AI
000280	b3 00 00 00 20 00	Wait    11, Tc
000281	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000282	43 00 00 00 20 00	Wait    4, Tc
000283	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000284	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000285	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000286	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000287	43 00 00 00 20 00	Wait    4, Tc
000288	01 40 b8 44 00 00	Copy    [0:7080] = [1:0022]
000289	b3 00 00 00 20 00	Wait    11, Tc
00028a	81 40 b8 01 00 01	Copy    [0:7081] = [SF+1], SrcBase: AI
00028b	b3 00 00 00 20 00	Wait    11, Tc
00028c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00028d	43 00 00 00 20 00	Wait    4, Tc
00028e	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00028f	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000290	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000291	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000292	43 00 00 00 20 00	Wait    4, Tc
000293	01 48 b8 44 00 00	Copy    [0:7090] = [1:0022]
000294	b3 00 00 00 20 00	Wait    11, Tc
000295	81 48 b8 01 00 01	Copy    [0:7091] = [SF+1], SrcBase: AI
000296	b3 00 00 00 20 00	Wait    11, Tc
000297	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000298	43 00 00 00 20 00	Wait    4, Tc
000299	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00029a	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00029b	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00029c	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00029d	43 00 00 00 20 00	Wait    4, Tc
00029e	01 50 b8 44 00 00	Copy    [0:70a0] = [1:0022]
00029f	b3 00 00 00 20 00	Wait    11, Tc
0002a0	81 50 b8 01 00 01	Copy    [0:70a1] = [SF+1], SrcBase: AI
0002a1	b3 00 00 00 20 00	Wait    11, Tc
0002a2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002a3	43 00 00 00 20 00	Wait    4, Tc
0002a4	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002a5	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002a6	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002a7	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0002a8	43 00 00 00 20 00	Wait    4, Tc
0002a9	01 58 b8 44 00 00	Copy    [0:70b0] = [1:0022]
0002aa	b3 00 00 00 20 00	Wait    11, Tc
0002ab	81 58 b8 01 00 01	Copy    [0:70b1] = [SF+1], SrcBase: AI
0002ac	b3 00 00 00 20 00	Wait    11, Tc
0002ad	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002ae	43 00 00 00 20 00	Wait    4, Tc
0002af	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002b0	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002b1	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002b2	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0002b3	43 00 00 00 20 00	Wait    4, Tc
0002b4	01 d8 b8 44 00 00	Copy    [0:71b0] = [1:0022]
0002b5	b3 00 00 00 20 00	Wait    11, Tc
0002b6	81 d8 b8 01 00 01	Copy    [0:71b1] = [SF+1], SrcBase: AI
0002b7	b3 00 00 00 20 00	Wait    11, Tc
0002b8	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002b9	43 00 00 00 20 00	Wait    4, Tc
0002ba	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002bb	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002bc	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002bd	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0002be	43 00 00 00 20 00	Wait    4, Tc
0002bf	01 d0 b8 44 00 00	Copy    [0:71a0] = [1:0022]
0002c0	b3 00 00 00 20 00	Wait    11, Tc
0002c1	81 d0 b8 01 00 01	Copy    [0:71a1] = [SF+1], SrcBase: AI
0002c2	b3 00 00 00 20 00	Wait    11, Tc
0002c3	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002c4	43 00 00 00 20 00	Wait    4, Tc
0002c5	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002c6	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002c7	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002c8	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0002c9	43 00 00 00 20 00	Wait    4, Tc
0002ca	01 c8 b8 44 00 00	Copy    [0:7190] = [1:0022]
0002cb	b3 00 00 00 20 00	Wait    11, Tc
0002cc	81 c8 b8 01 00 01	Copy    [0:7191] = [SF+1], SrcBase: AI
0002cd	b3 00 00 00 20 00	Wait    11, Tc
0002ce	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002cf	43 00 00 00 20 00	Wait    4, Tc
0002d0	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002d1	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002d2	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002d3	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0002d4	43 00 00 00 20 00	Wait    4, Tc
0002d5	01 c0 b8 44 00 00	Copy    [0:7180] = [1:0022]
0002d6	b3 00 00 00 20 00	Wait    11, Tc
0002d7	81 c0 b8 01 00 01	Copy    [0:7181] = [SF+1], SrcBase: AI
0002d8	b3 00 00 00 20 00	Wait    11, Tc
0002d9	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002da	43 00 00 00 20 00	Wait    4, Tc
0002db	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002dc	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002dd	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002de	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0002df	43 00 00 00 20 00	Wait    4, Tc
0002e0	01 b8 b8 44 00 00	Copy    [0:7170] = [1:0022]
0002e1	b3 00 00 00 20 00	Wait    11, Tc
0002e2	81 b8 b8 01 00 01	Copy    [0:7171] = [SF+1], SrcBase: AI
0002e3	b3 00 00 00 20 00	Wait    11, Tc
0002e4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002e5	43 00 00 00 20 00	Wait    4, Tc
0002e6	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002e7	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002e8	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002e9	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0002ea	43 00 00 00 20 00	Wait    4, Tc
0002eb	01 b0 b8 44 00 00	Copy    [0:7160] = [1:0022]
0002ec	b3 00 00 00 20 00	Wait    11, Tc
0002ed	81 b0 b8 01 00 01	Copy    [0:7161] = [SF+1], SrcBase: AI
0002ee	b3 00 00 00 20 00	Wait    11, Tc
0002ef	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002f0	43 00 00 00 20 00	Wait    4, Tc
0002f1	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002f2	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002f3	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002f4	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0002f5	43 00 00 00 20 00	Wait    4, Tc
0002f6	01 a8 b8 44 00 00	Copy    [0:7150] = [1:0022]
0002f7	b3 00 00 00 20 00	Wait    11, Tc
0002f8	81 a8 b8 01 00 01	Copy    [0:7151] = [SF+1], SrcBase: AI
0002f9	b3 00 00 00 20 00	Wait    11, Tc
0002fa	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
0002fb	43 00 00 00 20 00	Wait    4, Tc
0002fc	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
0002fd	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0002fe	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0002ff	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000300	43 00 00 00 20 00	Wait    4, Tc
000301	01 a0 b8 44 00 00	Copy    [0:7140] = [1:0022]
000302	b3 00 00 00 20 00	Wait    11, Tc
000303	81 a0 b8 01 00 01	Copy    [0:7141] = [SF+1], SrcBase: AI
000304	b3 00 00 00 20 00	Wait    11, Tc
000305	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000306	43 00 00 00 20 00	Wait    4, Tc
000307	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000308	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000309	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00030a	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00030b	43 00 00 00 20 00	Wait    4, Tc
00030c	01 98 b8 44 00 00	Copy    [0:7130] = [1:0022]
00030d	b3 00 00 00 20 00	Wait    11, Tc
00030e	81 98 b8 01 00 01	Copy    [0:7131] = [SF+1], SrcBase: AI
00030f	b3 00 00 00 20 00	Wait    11, Tc
000310	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000311	43 00 00 00 20 00	Wait    4, Tc
000312	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000313	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000314	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000315	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000316	43 00 00 00 20 00	Wait    4, Tc
000317	01 90 b8 44 00 00	Copy    [0:7120] = [1:0022]
000318	b3 00 00 00 20 00	Wait    11, Tc
000319	81 90 b8 01 00 01	Copy    [0:7121] = [SF+1], SrcBase: AI
00031a	b3 00 00 00 20 00	Wait    11, Tc
00031b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
00031c	43 00 00 00 20 00	Wait    4, Tc
00031d	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
00031e	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00031f	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000320	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000321	43 00 00 00 20 00	Wait    4, Tc
000322	01 88 b8 44 00 00	Copy    [0:7110] = [1:0022]
000323	b3 00 00 00 20 00	Wait    11, Tc
000324	81 88 b8 01 00 01	Copy    [0:7111] = [SF+1], SrcBase: AI
000325	b3 00 00 00 20 00	Wait    11, Tc
000326	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool)
000327	43 00 00 00 20 00	Wait    4, Tc
000328	11 11 80 01 00 01	Copy    [1:0022] = [SF+0], SrcBase: AI
000329	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00032a	c4 11 00 00 20 00	Branch  0x11c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00032b	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
00032c	43 00 00 00 20 00	Wait    4, Tc
00032d	01 80 b8 44 00 00	Copy    [0:7100] = [1:0022]
00032e	b3 00 00 00 20 00	Wait    11, Tc
00032f	81 80 b8 01 00 01	Copy    [0:7101] = [SF+1], SrcBase: AI
000330	b3 00 00 00 20 00	Wait    11, Tc
000331	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeSetPolarityCommand::SetPolarityDefaultValues(enum Vayyar::Centipede::BAND)
000332	80 01 a8 10 00 00	Write   [0:0x5003] = 21
000333	b3 00 00 00 20 00	Wait    11, Tc
000334	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000335	24 12 00 00 20 00	Branch  0x122, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000336	80 09 a8 10 00 00	Write   [0:0x5013] = 21
000337	b3 00 00 00 20 00	Wait    11, Tc
000338	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000339	d4 12 00 00 20 00	Branch  0x12d, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00033a	80 11 a8 10 00 00	Write   [0:0x5023] = 21
00033b	b3 00 00 00 20 00	Wait    11, Tc
00033c	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
00033d	84 13 00 00 20 00	Branch  0x138, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00033e	80 19 a8 10 00 00	Write   [0:0x5033] = 21
00033f	b3 00 00 00 20 00	Wait    11, Tc
000340	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000341	34 14 00 00 20 00	Branch  0x143, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000342	80 21 a8 10 00 00	Write   [0:0x5043] = 21
000343	b3 00 00 00 20 00	Wait    11, Tc
000344	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000345	e4 14 00 00 20 00	Branch  0x14e, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000346	80 29 a8 10 00 00	Write   [0:0x5053] = 21
000347	b3 00 00 00 20 00	Wait    11, Tc
000348	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000349	94 15 00 00 20 00	Branch  0x159, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00034a	80 31 a8 10 00 00	Write   [0:0x5063] = 21
00034b	b3 00 00 00 20 00	Wait    11, Tc
00034c	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
00034d	44 16 00 00 20 00	Branch  0x164, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00034e	80 39 a8 10 00 00	Write   [0:0x5073] = 21
00034f	b3 00 00 00 20 00	Wait    11, Tc
000350	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000351	f4 16 00 00 20 00	Branch  0x16f, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000352	80 41 a8 10 00 00	Write   [0:0x5083] = 21
000353	b3 00 00 00 20 00	Wait    11, Tc
000354	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000355	a4 17 00 00 20 00	Branch  0x17a, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000356	80 49 a8 10 00 00	Write   [0:0x5093] = 21
000357	b3 00 00 00 20 00	Wait    11, Tc
000358	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000359	54 18 00 00 20 00	Branch  0x185, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00035a	80 51 a8 10 00 00	Write   [0:0x50a3] = 21
00035b	b3 00 00 00 20 00	Wait    11, Tc
00035c	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
00035d	04 19 00 00 20 00	Branch  0x190, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00035e	80 59 a8 10 00 00	Write   [0:0x50b3] = 21
00035f	b3 00 00 00 20 00	Wait    11, Tc
000360	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000361	b4 19 00 00 20 00	Branch  0x19b, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000362	80 d9 a8 10 00 00	Write   [0:0x51b3] = 21
000363	b3 00 00 00 20 00	Wait    11, Tc
000364	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000365	64 1a 00 00 20 00	Branch  0x1a6, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000366	80 d1 a8 10 00 00	Write   [0:0x51a3] = 21
000367	b3 00 00 00 20 00	Wait    11, Tc
000368	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000369	14 1b 00 00 20 00	Branch  0x1b1, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00036a	80 c9 a8 10 00 00	Write   [0:0x5193] = 21
00036b	b3 00 00 00 20 00	Wait    11, Tc
00036c	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
00036d	c4 1b 00 00 20 00	Branch  0x1bc, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00036e	80 c1 a8 10 00 00	Write   [0:0x5183] = 21
00036f	b3 00 00 00 20 00	Wait    11, Tc
000370	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000371	74 1c 00 00 20 00	Branch  0x1c7, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000372	80 b9 a8 10 00 00	Write   [0:0x5173] = 21
000373	b3 00 00 00 20 00	Wait    11, Tc
000374	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000375	24 1d 00 00 20 00	Branch  0x1d2, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000376	80 b1 a8 10 00 00	Write   [0:0x5163] = 21
000377	b3 00 00 00 20 00	Wait    11, Tc
000378	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000379	d4 1d 00 00 20 00	Branch  0x1dd, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00037a	80 a9 a8 10 00 00	Write   [0:0x5153] = 21
00037b	b3 00 00 00 20 00	Wait    11, Tc
00037c	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
00037d	84 1e 00 00 20 00	Branch  0x1e8, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00037e	80 a1 a8 10 00 00	Write   [0:0x5143] = 21
00037f	b3 00 00 00 20 00	Wait    11, Tc
000380	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000381	34 1f 00 00 20 00	Branch  0x1f3, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000382	80 99 a8 10 00 00	Write   [0:0x5133] = 21
000383	b3 00 00 00 20 00	Wait    11, Tc
000384	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000385	e4 1f 00 00 20 00	Branch  0x1fe, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000386	80 91 a8 10 00 00	Write   [0:0x5123] = 21
000387	b3 00 00 00 20 00	Wait    11, Tc
000388	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000389	94 20 00 00 20 00	Branch  0x209, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00038a	80 89 a8 10 00 00	Write   [0:0x5113] = 21
00038b	b3 00 00 00 20 00	Wait    11, Tc
00038c	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
00038d	44 21 00 00 20 00	Branch  0x214, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00038e	80 81 a8 10 00 00	Write   [0:0x5103] = 21
00038f	b3 00 00 00 20 00	Wait    11, Tc
000390	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000391	f4 21 00 00 20 00	Branch  0x21f, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000392	80 01 b8 10 00 00	Write   [0:0x7003] = 21
000393	b3 00 00 00 20 00	Wait    11, Tc
000394	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000395	a4 22 00 00 20 00	Branch  0x22a, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
000396	80 09 b8 10 00 00	Write   [0:0x7013] = 21
000397	b3 00 00 00 20 00	Wait    11, Tc
000398	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000399	54 23 00 00 20 00	Branch  0x235, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00039a	80 11 b8 10 00 00	Write   [0:0x7023] = 21
00039b	b3 00 00 00 20 00	Wait    11, Tc
00039c	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
00039d	04 24 00 00 20 00	Branch  0x240, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
00039e	80 19 b8 10 00 00	Write   [0:0x7033] = 21
00039f	b3 00 00 00 20 00	Wait    11, Tc
0003a0	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003a1	b4 24 00 00 20 00	Branch  0x24b, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003a2	80 21 b8 10 00 00	Write   [0:0x7043] = 21
0003a3	b3 00 00 00 20 00	Wait    11, Tc
0003a4	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003a5	64 25 00 00 20 00	Branch  0x256, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003a6	80 29 b8 10 00 00	Write   [0:0x7053] = 21
0003a7	b3 00 00 00 20 00	Wait    11, Tc
0003a8	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003a9	14 26 00 00 20 00	Branch  0x261, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003aa	80 31 b8 10 00 00	Write   [0:0x7063] = 21
0003ab	b3 00 00 00 20 00	Wait    11, Tc
0003ac	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003ad	c4 26 00 00 20 00	Branch  0x26c, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003ae	80 39 b8 10 00 00	Write   [0:0x7073] = 21
0003af	b3 00 00 00 20 00	Wait    11, Tc
0003b0	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003b1	74 27 00 00 20 00	Branch  0x277, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003b2	80 41 b8 10 00 00	Write   [0:0x7083] = 21
0003b3	b3 00 00 00 20 00	Wait    11, Tc
0003b4	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003b5	24 28 00 00 20 00	Branch  0x282, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003b6	80 49 b8 10 00 00	Write   [0:0x7093] = 21
0003b7	b3 00 00 00 20 00	Wait    11, Tc
0003b8	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003b9	d4 28 00 00 20 00	Branch  0x28d, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003ba	80 51 b8 10 00 00	Write   [0:0x70a3] = 21
0003bb	b3 00 00 00 20 00	Wait    11, Tc
0003bc	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003bd	84 29 00 00 20 00	Branch  0x298, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003be	80 59 b8 10 00 00	Write   [0:0x70b3] = 21
0003bf	b3 00 00 00 20 00	Wait    11, Tc
0003c0	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003c1	34 2a 00 00 20 00	Branch  0x2a3, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003c2	80 d9 b8 10 00 00	Write   [0:0x71b3] = 21
0003c3	b3 00 00 00 20 00	Wait    11, Tc
0003c4	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003c5	e4 2a 00 00 20 00	Branch  0x2ae, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003c6	80 d1 b8 10 00 00	Write   [0:0x71a3] = 21
0003c7	b3 00 00 00 20 00	Wait    11, Tc
0003c8	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003c9	94 2b 00 00 20 00	Branch  0x2b9, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003ca	80 c9 b8 10 00 00	Write   [0:0x7193] = 21
0003cb	b3 00 00 00 20 00	Wait    11, Tc
0003cc	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003cd	44 2c 00 00 20 00	Branch  0x2c4, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003ce	80 c1 b8 10 00 00	Write   [0:0x7183] = 21
0003cf	b3 00 00 00 20 00	Wait    11, Tc
0003d0	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003d1	f4 2c 00 00 20 00	Branch  0x2cf, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003d2	80 b9 b8 10 00 00	Write   [0:0x7173] = 21
0003d3	b3 00 00 00 20 00	Wait    11, Tc
0003d4	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003d5	a4 2d 00 00 20 00	Branch  0x2da, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003d6	80 b1 b8 10 00 00	Write   [0:0x7163] = 21
0003d7	b3 00 00 00 20 00	Wait    11, Tc
0003d8	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003d9	54 2e 00 00 20 00	Branch  0x2e5, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003da	80 a9 b8 10 00 00	Write   [0:0x7153] = 21
0003db	b3 00 00 00 20 00	Wait    11, Tc
0003dc	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003dd	04 2f 00 00 20 00	Branch  0x2f0, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003de	80 a1 b8 10 00 00	Write   [0:0x7143] = 21
0003df	b3 00 00 00 20 00	Wait    11, Tc
0003e0	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003e1	b4 2f 00 00 20 00	Branch  0x2fb, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003e2	80 99 b8 10 00 00	Write   [0:0x7133] = 21
0003e3	b3 00 00 00 20 00	Wait    11, Tc
0003e4	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003e5	64 30 00 00 20 00	Branch  0x306, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003e6	80 91 b8 10 00 00	Write   [0:0x7123] = 21
0003e7	b3 00 00 00 20 00	Wait    11, Tc
0003e8	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003e9	14 31 00 00 20 00	Branch  0x311, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003ea	80 89 b8 10 00 00	Write   [0:0x7113] = 21
0003eb	b3 00 00 00 20 00	Wait    11, Tc
0003ec	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003ed	c4 31 00 00 20 00	Branch  0x31c, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003ee	80 81 b8 10 00 00	Write   [0:0x7103] = 21
0003ef	b3 00 00 00 20 00	Wait    11, Tc
0003f0	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0003f1	74 32 00 00 20 00	Branch  0x327, [CALL] < Vayyar::Centipede::CentipedeTrModule::SetPolarityVal(class Vayyar::Centipede::CentipedePortModule,const int,bool,bool) >
0003f2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxDecimatorModule::SetDecimation(unsigned int,bool)
0003f3	43 00 00 00 20 00	Wait    4, Tc
0003f4	81 11 88 01 00 01	Copy    [0:1023] = [SF+0], SrcBase: AI
0003f5	01 10 88 01 00 01	Copy    [0:1020] = [SF+1], SrcBase: AI
0003f6	33 00 00 00 20 00	Wait    3, Tc
0003f7	01 11 88 01 00 01	Copy    [0:1022] = [SF+2], SrcBase: AI
0003f8	81 10 88 01 00 01	Copy    [0:1021] = [SF+3], SrcBase: AI
0003f9	33 00 00 00 20 00	Wait    3, Tc
0003fa	81 18 88 01 00 01	Copy    [0:1031] = [SF+4], SrcBase: AI
0003fb	01 29 88 01 00 01	Copy    [0:1052] = [SF+5], SrcBase: AI
0003fc	33 00 00 00 20 00	Wait    3, Tc
0003fd	81 29 88 01 00 01	Copy    [0:1053] = [SF+6], SrcBase: AI
0003fe	01 2a 88 01 00 01	Copy    [0:1054] = [SF+7], SrcBase: AI
0003ff	33 00 00 00 20 00	Wait    3, Tc
000400	81 2a 88 01 00 01	Copy    [0:1055] = [SF+8], SrcBase: AI
000401	01 2b 88 01 00 01	Copy    [0:1056] = [SF+9], SrcBase: AI
000402	33 00 00 00 20 00	Wait    3, Tc
000403	81 2b 88 01 00 01	Copy    [0:1057] = [SF+10], SrcBase: AI
000404	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxDecimatorModule::SetRxPorts(enum Vayyar::Centipede::CENTIPEDE_RECORDING_MODE,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >)
000405	43 00 00 00 20 00	Wait    4, Tc
000406	01 28 88 01 00 01	Copy    [0:1050] = [SF+0], SrcBase: AI
000407	01 20 88 01 00 01	Copy    [0:1040] = [SF+1], SrcBase: AI
000408	33 00 00 00 20 00	Wait    3, Tc
000409	81 20 88 01 00 01	Copy    [0:1041] = [SF+2], SrcBase: AI
00040a	01 35 88 01 00 01	Copy    [0:106a] = [SF+3], SrcBase: AI
00040b	33 00 00 00 20 00	Wait    3, Tc
00040c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxNcoModule::Enable(bool,class std::vector<bool,class std::allocator<bool> >,class std::vector<enum Vayyar::Centipede::NCO,class std::allocator<enum Vayyar::Centipede::NCO> >)
00040d	00 8c 88 ff 7f 00	Write   [0:0x1118] = ffff
00040e	80 8c 88 7f 00 00	Write   [0:0x1119] = ff
00040f	00 92 08 00 00 00	Write   [0:0x1124] = 0
000410	80 92 08 00 00 00	Write   [0:0x1125] = 0
000411	00 8b 08 00 00 00	Write   [0:0x1116] = 0
000412	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxLineupCommand::SetRecordingPorts(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,int)
000413	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000414	80 09 18 00 00 00	Write   [0:0x3013] = 0
000415	43 00 00 00 20 00	Wait    4, Tc
000416	40 18 00 01 00 00	Write   [0:0x0030] = 2, DestBase: A
000417	b3 00 00 00 20 00	Wait    11, Tc
000418	00 09 18 00 00 00	Write   [0:0x3012] = 0
000419	80 09 18 00 00 00	Write   [0:0x3013] = 0
00041a	43 00 00 00 20 00	Wait    4, Tc
00041b	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00041c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00041d	43 00 00 00 20 00	Wait    4, Tc
00041e	c0 18 00 00 00 00	Write   [0:0x0031] = 0, DestBase: A
00041f	b3 00 00 00 20 00	Wait    11, Tc
000420	00 09 18 00 00 00	Write   [0:0x3012] = 0
000421	80 09 18 00 00 00	Write   [0:0x3013] = 0
000422	43 00 00 00 20 00	Wait    4, Tc
000423	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000424	80 09 18 00 00 00	Write   [0:0x3013] = 0
000425	43 00 00 00 20 00	Wait    4, Tc
000426	40 19 00 00 00 00	Write   [0:0x0032] = 0, DestBase: A
000427	b3 00 00 00 20 00	Wait    11, Tc
000428	00 09 18 00 00 00	Write   [0:0x3012] = 0
000429	80 09 18 00 00 00	Write   [0:0x3013] = 0
00042a	43 00 00 00 20 00	Wait    4, Tc
00042b	80 00 08 14 00 00	Write   [0:0x1001] = 28
00042c	00 08 18 f4 04 00	Write   [0:0x3010] = 9e8
00042d	34 3f 00 00 20 00	Branch  0x3f3, [CALL] < Vayyar::Centipede::CentipedeRxDecimatorModule::SetDecimation(unsigned int,bool) >
00042e	00 08 98 f9 04 00	Write   [0:0x3010] = 9f3
00042f	54 40 00 00 20 00	Branch  0x405, [CALL] < Vayyar::Centipede::CentipedeRxDecimatorModule::SetRxPorts(enum Vayyar::Centipede::CENTIPEDE_RECORDING_MODE,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >) >
000430	d4 40 00 00 20 00	Branch  0x40d, [CALL] < Vayyar::Centipede::CentipedeRxNcoModule::Enable(bool,class std::vector<bool,class std::allocator<bool> >,class std::vector<enum Vayyar::Centipede::NCO,class std::allocator<enum Vayyar::Centipede::NCO> >) >
000431	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void)
000432	43 00 00 00 20 00	Wait    4, Tc
000433	81 e9 a8 01 00 01	Copy    [0:51d3] = [SF+0], SrcBase: AI
000434	b3 00 00 00 20 00	Wait    11, Tc
000435	81 e9 a8 01 00 01	Copy    [0:51d3] = [SF+1], SrcBase: AI
000436	b3 00 00 00 20 00	Wait    11, Tc
000437	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+2], SrcBase: AI
000438	b3 00 00 00 20 00	Wait    11, Tc
000439	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+3], SrcBase: AI
00043a	b3 00 00 00 20 00	Wait    11, Tc
00043b	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+4], SrcBase: AI
00043c	b3 00 00 00 20 00	Wait    11, Tc
00043d	81 e9 a8 01 00 01	Copy    [0:51d3] = [SF+5], SrcBase: AI
00043e	b3 00 00 00 20 00	Wait    11, Tc
00043f	81 e9 a8 01 00 01	Copy    [0:51d3] = [SF+6], SrcBase: AI
000440	b3 00 00 00 20 00	Wait    11, Tc
000441	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+7], SrcBase: AI
000442	c3 3c 00 00 20 00	Wait    972, Tc
000443	01 e8 a8 01 00 01	Copy    [0:51d0] = [SF+8], SrcBase: AI
000444	b3 00 00 00 20 00	Wait    11, Tc
000445	01 e9 a8 01 00 01	Copy    [0:51d2] = [SF+9], SrcBase: AI
000446	b3 00 00 00 20 00	Wait    11, Tc
000447	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+10], SrcBase: AI
000448	b3 00 00 00 20 00	Wait    11, Tc
000449	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+11], SrcBase: AI
00044a	c3 2c 01 00 20 00	Wait    4812, Tc
00044b	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+12], SrcBase: AI
00044c	b3 00 00 00 20 00	Wait    11, Tc
00044d	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+13], SrcBase: AI
00044e	b3 00 00 00 20 00	Wait    11, Tc
00044f	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+14], SrcBase: AI
000450	b3 00 00 00 20 00	Wait    11, Tc
000451	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+15], SrcBase: AI
000452	b3 00 00 00 20 00	Wait    11, Tc
000453	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+16], SrcBase: AI
000454	b3 00 00 00 20 00	Wait    11, Tc
000455	01 f1 a8 01 00 01	Copy    [0:51e2] = [SF+17], SrcBase: AI
000456	b3 00 00 00 20 00	Wait    11, Tc
000457	01 f1 a8 01 00 01	Copy    [0:51e2] = [SF+18], SrcBase: AI
000458	c3 1c 02 00 20 00	Wait    8652, Tc
000459	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+19], SrcBase: AI
00045a	c3 1c 02 00 20 00	Wait    8652, Tc
00045b	01 f1 a8 01 00 01	Copy    [0:51e2] = [SF+20], SrcBase: AI
00045c	b3 00 00 00 20 00	Wait    11, Tc
00045d	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+21], SrcBase: AI
00045e	c3 1c 02 00 20 00	Wait    8652, Tc
00045f	01 e0 a8 01 00 01	Copy    [0:51c0] = [SF+22], SrcBase: AI
000460	b3 00 00 00 20 00	Wait    11, Tc
000461	81 e0 a8 01 00 01	Copy    [0:51c1] = [SF+23], SrcBase: AI
000462	b3 00 00 00 20 00	Wait    11, Tc
000463	81 e0 b8 01 00 01	Copy    [0:71c1] = [SF+24], SrcBase: AI
000464	b3 00 00 00 20 00	Wait    11, Tc
000465	01 e0 b8 01 00 01	Copy    [0:71c0] = [SF+25], SrcBase: AI
000466	b3 00 00 00 20 00	Wait    11, Tc
000467	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void)
000468	80 e9 38 00 00 00	Write   [0:0x71d3] = 0
000469	b3 00 00 00 20 00	Wait    11, Tc
00046a	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
00046b	b3 00 00 00 20 00	Wait    11, Tc
00046c	80 e1 b8 06 00 00	Write   [0:0x71c3] = d
00046d	b3 00 00 00 20 00	Wait    11, Tc
00046e	80 e1 b8 06 00 00	Write   [0:0x71c3] = d
00046f	b3 00 00 00 20 00	Wait    11, Tc
000470	80 e1 b8 06 04 00	Write   [0:0x71c3] = 80d
000471	b3 00 00 00 20 00	Wait    11, Tc
000472	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
000473	b3 00 00 00 20 00	Wait    11, Tc
000474	80 e9 38 01 02 00	Write   [0:0x71d3] = 402
000475	b3 00 00 00 20 00	Wait    11, Tc
000476	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
000477	c3 3c 00 00 20 00	Wait    972, Tc
000478	00 e8 38 00 00 00	Write   [0:0x71d0] = 0
000479	b3 00 00 00 20 00	Wait    11, Tc
00047a	00 e9 38 80 07 00	Write   [0:0x71d2] = f00
00047b	b3 00 00 00 20 00	Wait    11, Tc
00047c	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
00047d	b3 00 00 00 20 00	Wait    11, Tc
00047e	80 e1 b8 26 05 00	Write   [0:0x71c3] = a4d
00047f	c3 2c 01 00 20 00	Wait    4812, Tc
000480	80 e1 b8 36 05 00	Write   [0:0x71c3] = a6d
000481	b3 00 00 00 20 00	Wait    11, Tc
000482	00 f0 b8 00 00 00	Write   [0:0x71e0] = 1
000483	b3 00 00 00 20 00	Wait    11, Tc
000484	00 f0 b8 01 00 00	Write   [0:0x71e0] = 3
000485	b3 00 00 00 20 00	Wait    11, Tc
000486	00 f0 b8 03 00 00	Write   [0:0x71e0] = 7
000487	b3 00 00 00 20 00	Wait    11, Tc
000488	00 f0 b8 07 00 00	Write   [0:0x71e0] = f
000489	b3 00 00 00 20 00	Wait    11, Tc
00048a	00 f1 38 00 01 00	Write   [0:0x71e2] = 200
00048b	c3 1c 02 00 20 00	Wait    8652, Tc
00048c	00 f0 b8 27 00 00	Write   [0:0x71e0] = 4f
00048d	c3 1c 02 00 20 00	Wait    8652, Tc
00048e	00 f1 28 80 0a 00	Write   [0:0x51e2] = 1500
00048f	b3 00 00 00 20 00	Wait    11, Tc
000490	00 f0 a8 57 01 00	Write   [0:0x51e0] = 2af
000491	c3 1c 02 00 20 00	Wait    8652, Tc
000492	80 e0 28 80 00 00	Write   [0:0x51c1] = 100
000493	b3 00 00 00 20 00	Wait    11, Tc
000494	00 e1 28 00 00 00	Write   [0:0x51c2] = 0
000495	b3 00 00 00 20 00	Wait    11, Tc
000496	00 e1 38 00 00 00	Write   [0:0x71c2] = 0
000497	b3 00 00 00 20 00	Wait    11, Tc
000498	80 e0 38 00 00 00	Write   [0:0x71c1] = 0
000499	b3 00 00 00 20 00	Wait    11, Tc
00049a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedePortStateCommand::Set(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,bool,bool,bool,enum Vayyar::Centipede::BAND)
00049b	00 08 98 fb 04 00	Write   [0:0x3010] = 9f7
00049c	24 43 00 00 20 00	Branch  0x432, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void) >
00049d	84 46 00 00 20 00	Branch  0x468, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void) >
00049e	80 00 a8 00 00 00	Write   [0:0x5001] = 1
00049f	b3 00 00 00 20 00	Wait    11, Tc
0004a0	00 00 a8 33 00 00	Write   [0:0x5000] = 67
0004a1	b3 00 00 00 20 00	Wait    11, Tc
0004a2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeGainCommand::Set(int,enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::BAND,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >)
0004a3	80 f1 b8 e7 09 00	Write   [0:0x71e3] = 13cf
0004a4	b3 00 00 00 20 00	Wait    11, Tc
0004a5	80 f0 38 00 00 00	Write   [0:0x71e1] = 0
0004a6	b3 00 00 00 20 00	Wait    11, Tc
0004a7	80 f0 a8 06 00 00	Write   [0:0x51e1] = d
0004a8	b3 00 00 00 20 00	Wait    11, Tc
0004a9	00 01 28 44 00 00	Write   [0:0x5002] = 88
0004aa	b3 00 00 00 20 00	Wait    11, Tc
0004ab	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeGainCommand::Set(int,enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::BAND,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >)
0004ac	80 f1 a8 e7 09 00	Write   [0:0x51e3] = 13cf
0004ad	b3 00 00 00 20 00	Wait    11, Tc
0004ae	80 f0 a8 06 01 00	Write   [0:0x51e1] = 20d
0004af	b3 00 00 00 20 00	Wait    11, Tc
0004b0	80 f0 38 00 00 00	Write   [0:0x71e1] = 0
0004b1	b3 00 00 00 20 00	Wait    11, Tc
0004b2	00 01 28 44 04 00	Write   [0:0x5002] = 888
0004b3	b3 00 00 00 20 00	Wait    11, Tc
0004b4	80 00 a8 01 00 00	Write   [0:0x5001] = 3
0004b5	b3 00 00 00 20 00	Wait    11, Tc
0004b6	04 00 00 00 40 00	Branch  0x0, [RET]


InitCode_Chip_0
0004b7	90 10 80 00 00 00	Write   [1:0x0021] = 1
0004b8	94 02 00 00 20 00	Branch  0x29, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::LogenPowerUpHelper(class std::array<enum Vayyar::Centipede::PLL_POWER,2>,bool) >
0004b9	74 06 00 00 20 00	Branch  0x67, [CALL] < ationFlowInitCode >
0004ba	24 10 00 00 20 00	Branch  0x102, [CALL] < Vayyar::Centipede::CentipedePortStateCommand::Initialize(void) >
0004bb	24 33 00 00 20 00	Branch  0x332, [CALL] < Vayyar::Centipede::CentipedeSetPolarityCommand::SetPolarityDefaultValues(enum Vayyar::Centipede::BAND) >
0004bc	00 60 08 00 00 00	Write   [0:0x10c0] = 0
0004bd	34 41 00 00 20 00	Branch  0x413, [CALL] < Vayyar::Centipede::CentipedeRxLineupCommand::SetRecordingPorts(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,int) >
0004be	b4 49 00 00 20 00	Branch  0x49b, [CALL] < Vayyar::Centipede::CentipedePortStateCommand::Set(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,bool,bool,bool,enum Vayyar::Centipede::BAND) >
0004bf	34 4a 00 00 20 00	Branch  0x4a3, [CALL] < Vayyar::Centipede::CentipedeGainCommand::Set(int,enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::BAND,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >) >
0004c0	c4 4a 00 00 20 00	Branch  0x4ac, [CALL] < Vayyar::Centipede::CentipedeGainCommand::Set(int,enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::BAND,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >) >
0004c1	80 01 a8 31 00 00	Write   [0:0x5003] = 63
0004c2	b3 00 00 00 20 00	Wait    11, Tc
0004c3	04 00 00 00 40 00	Branch  0x0, [RET]


ResetCalibrationParametersVariables
0004c4	90 0a 00 00 00 00	Write   [1:0x0015] = 0
0004c5	10 0b 00 00 00 00	Write   [1:0x0016] = 0
0004c6	90 0b 00 00 00 00	Write   [1:0x0017] = 0
0004c7	10 0c 00 00 00 00	Write   [1:0x0018] = 0
0004c8	90 0c 00 00 00 00	Write   [1:0x0019] = 0
0004c9	10 0d 00 00 00 00	Write   [1:0x001a] = 0
0004ca	90 0d 80 ff 7f 00	Write   [1:0x001b] = ffff
0004cb	10 0e 80 ff 7f 00	Write   [1:0x001c] = ffff
0004cc	90 0e 80 ff 7f 00	Write   [1:0x001d] = ffff
0004cd	10 0f 00 00 00 00	Write   [1:0x001e] = 0
0004ce	90 0f 00 00 00 00	Write   [1:0x001f] = 0
0004cf	10 10 00 00 00 00	Write   [1:0x0020] = 0
0004d0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short)
0004d1	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
0004d2	01 09 98 48 00 00	Copy    [0:3012] = [1:0024]
0004d3	83 00 00 00 20 00	Wait    8, Tc
0004d4	60 00 00 40 01 00	Write   [2:0x0000] = 280, DestBase: A
0004d5	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
0004d6	43 00 00 00 20 00	Wait    4, Tc
0004d7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short)
0004d8	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
0004d9	01 09 98 4a 00 00	Copy    [0:3012] = [1:0025]
0004da	83 00 00 00 20 00	Wait    8, Tc
0004db	60 00 00 19 00 00	Write   [2:0x0000] = 32, DestBase: A
0004dc	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
0004dd	43 00 00 00 20 00	Wait    4, Tc
0004de	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short)
0004df	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
0004e0	01 09 98 4c 00 00	Copy    [0:3012] = [1:0026]
0004e1	83 00 00 00 20 00	Wait    8, Tc
0004e2	60 00 00 69 00 00	Write   [2:0x0000] = d2, DestBase: A
0004e3	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
0004e4	43 00 00 00 20 00	Wait    4, Tc
0004e5	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short)
0004e6	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
0004e7	01 09 98 4e 00 00	Copy    [0:3012] = [1:0027]
0004e8	83 00 00 00 20 00	Wait    8, Tc
0004e9	60 00 00 0a 00 00	Write   [2:0x0000] = 14, DestBase: A
0004ea	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
0004eb	43 00 00 00 20 00	Wait    4, Tc
0004ec	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short)
0004ed	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
0004ee	01 09 98 50 00 00	Copy    [0:3012] = [1:0028]
0004ef	83 00 00 00 20 00	Wait    8, Tc
0004f0	60 00 80 05 00 00	Write   [2:0x0000] = b, DestBase: A
0004f1	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
0004f2	43 00 00 00 20 00	Wait    4, Tc
0004f3	04 00 00 00 40 00	Branch  0x0, [RET]


GetSevenTapParams
0004f4	10 12 80 5f 12 00	Write   [1:0x0024] = 24bf
0004f5	14 4d 00 00 20 00	Branch  0x4d1, [CALL] < Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short) >
0004f6	90 12 80 5d 12 00	Write   [1:0x0025] = 24bb
0004f7	84 4d 00 00 20 00	Branch  0x4d8, [CALL] < Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short) >
0004f8	10 13 00 5e 12 00	Write   [1:0x0026] = 24bc
0004f9	f4 4d 00 00 20 00	Branch  0x4df, [CALL] < Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short) >
0004fa	90 13 80 5e 12 00	Write   [1:0x0027] = 24bd
0004fb	64 4e 00 00 20 00	Branch  0x4e6, [CALL] < Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short) >
0004fc	10 14 00 5f 12 00	Write   [1:0x0028] = 24be
0004fd	d4 4e 00 00 20 00	Branch  0x4ed, [CALL] < Vayyar::SequencerMemoryAccessCentipede::WriteToDsp(const class ILParamShort &,unsigned short) >
0004fe	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::InitRfRegs(void)
0004ff	00 00 00 11 02 00	Write   [0:0x0000] = 422
000500	00 98 00 00 00 00	Write   [0:0x0130] = 0
000501	80 00 00 11 02 00	Write   [0:0x0001] = 422
000502	80 98 00 00 00 00	Write   [0:0x0131] = 0
000503	00 01 00 11 02 00	Write   [0:0x0002] = 422
000504	00 99 00 00 00 00	Write   [0:0x0132] = 0
000505	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetDefaultValues(class std::unordered_map<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,struct std::hash<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,struct std::equal_to<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,class std::allocator<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,int> > > &)
000506	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000507	80 09 18 00 00 00	Write   [0:0x3013] = 0
000508	43 00 00 00 20 00	Wait    4, Tc
000509	40 01 80 01 00 00	Write   [0:0x0002] = 3, DestBase: A
00050a	b3 00 00 00 20 00	Wait    11, Tc
00050b	00 09 18 00 00 00	Write   [0:0x3012] = 0
00050c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00050d	43 00 00 00 20 00	Wait    4, Tc
00050e	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00050f	80 09 18 00 00 00	Write   [0:0x3013] = 0
000510	43 00 00 00 20 00	Wait    4, Tc
000511	40 00 00 01 10 00	Write   [0:0x0000] = 2002, DestBase: A
000512	b3 00 00 00 20 00	Wait    11, Tc
000513	00 09 18 00 00 00	Write   [0:0x3012] = 0
000514	80 09 18 00 00 00	Write   [0:0x3013] = 0
000515	43 00 00 00 20 00	Wait    4, Tc
000516	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000517	80 09 18 00 00 00	Write   [0:0x3013] = 0
000518	43 00 00 00 20 00	Wait    4, Tc
000519	c0 00 80 1f 00 00	Write   [0:0x0001] = 3f, DestBase: A
00051a	b3 00 00 00 20 00	Wait    11, Tc
00051b	00 09 18 00 00 00	Write   [0:0x3012] = 0
00051c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00051d	43 00 00 00 20 00	Wait    4, Tc
00051e	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00051f	80 09 18 00 00 00	Write   [0:0x3013] = 0
000520	43 00 00 00 20 00	Wait    4, Tc
000521	c0 11 80 05 05 00	Write   [0:0x0023] = a0b, DestBase: A
000522	b3 00 00 00 20 00	Wait    11, Tc
000523	00 09 18 00 00 00	Write   [0:0x3012] = 0
000524	80 09 18 00 00 00	Write   [0:0x3013] = 0
000525	43 00 00 00 20 00	Wait    4, Tc
000526	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllInitialize(int)
000527	43 00 00 00 20 00	Wait    4, Tc
000528	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000529	80 09 18 00 00 00	Write   [0:0x3013] = 0
00052a	43 00 00 00 20 00	Wait    4, Tc
00052b	41 00 80 01 00 01	Copy    [0:0000] = [SF+0], DestBase: A, SrcBase: AI
00052c	b3 00 00 00 20 00	Wait    11, Tc
00052d	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00052e	80 09 18 00 00 00	Write   [0:0x3013] = 0
00052f	43 00 00 00 20 00	Wait    4, Tc
000530	41 28 80 01 00 01	Copy    [0:0050] = [SF+1], DestBase: A, SrcBase: AI
000531	b3 00 00 00 20 00	Wait    11, Tc
000532	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000533	80 09 18 00 00 00	Write   [0:0x3013] = 0
000534	43 00 00 00 20 00	Wait    4, Tc
000535	41 29 80 01 00 01	Copy    [0:0052] = [SF+2], DestBase: A, SrcBase: AI
000536	b3 00 00 00 20 00	Wait    11, Tc
000537	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000538	80 09 18 00 00 00	Write   [0:0x3013] = 0
000539	43 00 00 00 20 00	Wait    4, Tc
00053a	41 38 80 01 00 01	Copy    [0:0070] = [SF+3], DestBase: A, SrcBase: AI
00053b	b3 00 00 00 20 00	Wait    11, Tc
00053c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00053d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00053e	43 00 00 00 20 00	Wait    4, Tc
00053f	c1 38 80 01 00 01	Copy    [0:0071] = [SF+4], DestBase: A, SrcBase: AI
000540	b3 00 00 00 20 00	Wait    11, Tc
000541	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000542	80 09 18 00 00 00	Write   [0:0x3013] = 0
000543	43 00 00 00 20 00	Wait    4, Tc
000544	41 39 80 01 00 01	Copy    [0:0072] = [SF+5], DestBase: A, SrcBase: AI
000545	b3 00 00 00 20 00	Wait    11, Tc
000546	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000547	80 09 18 00 00 00	Write   [0:0x3013] = 0
000548	43 00 00 00 20 00	Wait    4, Tc
000549	c1 39 80 01 00 01	Copy    [0:0073] = [SF+6], DestBase: A, SrcBase: AI
00054a	b3 00 00 00 20 00	Wait    11, Tc
00054b	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00054c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00054d	43 00 00 00 20 00	Wait    4, Tc
00054e	41 21 80 01 00 01	Copy    [0:0042] = [SF+7], DestBase: A, SrcBase: AI
00054f	b3 00 00 00 20 00	Wait    11, Tc
000550	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllInitialize(int)
000551	43 00 00 00 20 00	Wait    4, Tc
000552	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000553	80 09 18 00 00 00	Write   [0:0x3013] = 0
000554	43 00 00 00 20 00	Wait    4, Tc
000555	41 00 80 01 00 01	Copy    [0:0000] = [SF+0], DestBase: A, SrcBase: AI
000556	b3 00 00 00 20 00	Wait    11, Tc
000557	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000558	80 09 18 00 00 00	Write   [0:0x3013] = 0
000559	43 00 00 00 20 00	Wait    4, Tc
00055a	41 50 80 01 00 01	Copy    [0:00a0] = [SF+1], DestBase: A, SrcBase: AI
00055b	b3 00 00 00 20 00	Wait    11, Tc
00055c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00055d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00055e	43 00 00 00 20 00	Wait    4, Tc
00055f	41 51 80 01 00 01	Copy    [0:00a2] = [SF+2], DestBase: A, SrcBase: AI
000560	b3 00 00 00 20 00	Wait    11, Tc
000561	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000562	80 09 18 00 00 00	Write   [0:0x3013] = 0
000563	43 00 00 00 20 00	Wait    4, Tc
000564	41 60 80 01 00 01	Copy    [0:00c0] = [SF+3], DestBase: A, SrcBase: AI
000565	b3 00 00 00 20 00	Wait    11, Tc
000566	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000567	80 09 18 00 00 00	Write   [0:0x3013] = 0
000568	43 00 00 00 20 00	Wait    4, Tc
000569	c1 60 80 01 00 01	Copy    [0:00c1] = [SF+4], DestBase: A, SrcBase: AI
00056a	b3 00 00 00 20 00	Wait    11, Tc
00056b	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00056c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00056d	43 00 00 00 20 00	Wait    4, Tc
00056e	41 61 80 01 00 01	Copy    [0:00c2] = [SF+5], DestBase: A, SrcBase: AI
00056f	b3 00 00 00 20 00	Wait    11, Tc
000570	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000571	80 09 18 00 00 00	Write   [0:0x3013] = 0
000572	43 00 00 00 20 00	Wait    4, Tc
000573	c1 61 80 01 00 01	Copy    [0:00c3] = [SF+6], DestBase: A, SrcBase: AI
000574	b3 00 00 00 20 00	Wait    11, Tc
000575	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000576	80 09 18 00 00 00	Write   [0:0x3013] = 0
000577	43 00 00 00 20 00	Wait    4, Tc
000578	41 49 80 01 00 01	Copy    [0:0092] = [SF+7], DestBase: A, SrcBase: AI
000579	b3 00 00 00 20 00	Wait    11, Tc
00057a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00057b	43 00 00 00 20 00	Wait    4, Tc
00057c	01 70 98 58 00 00	Copy    [0:30e0] = [1:002c]
00057d	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00057e	01 70 98 58 00 00	Copy    [0:30e0] = [1:002c]
00057f	34 11 00 00 20 00	Branch  0x113, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000580	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandInitialize(void)
000581	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000582	80 09 18 00 00 00	Write   [0:0x3013] = 0
000583	43 00 00 00 20 00	Wait    4, Tc
000584	40 09 00 00 00 00	Write   [0:0x0012] = 0, DestBase: A
000585	b3 00 00 00 20 00	Wait    11, Tc
000586	00 09 18 00 00 00	Write   [0:0x3012] = 0
000587	80 09 18 00 00 00	Write   [0:0x3013] = 0
000588	43 00 00 00 20 00	Wait    4, Tc
000589	10 11 00 0c 04 00	Write   [1:0x0022] = 818
00058a	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00058b	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00058c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00058d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00058e	43 00 00 00 20 00	Wait    4, Tc
00058f	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
000590	b3 00 00 00 20 00	Wait    11, Tc
000591	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000592	80 09 18 00 00 00	Write   [0:0x3013] = 0
000593	43 00 00 00 20 00	Wait    4, Tc
000594	40 08 00 00 00 00	Write   [0:0x0010] = 0, DestBase: A
000595	b3 00 00 00 20 00	Wait    11, Tc
000596	00 09 18 00 00 00	Write   [0:0x3012] = 0
000597	80 09 18 00 00 00	Write   [0:0x3013] = 0
000598	43 00 00 00 20 00	Wait    4, Tc
000599	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::Initialize(double)
00059a	00 08 98 08 05 00	Write   [0:0x3010] = a11
00059b	74 52 00 00 20 00	Branch  0x527, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllInitialize(int) >
00059c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00059d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00059e	43 00 00 00 20 00	Wait    4, Tc
00059f	40 21 80 b5 07 00	Write   [0:0x0042] = f6b, DestBase: A
0005a0	b3 00 00 00 20 00	Wait    11, Tc
0005a1	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005a2	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005a3	43 00 00 00 20 00	Wait    4, Tc
0005a4	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0005a5	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005a6	43 00 00 00 20 00	Wait    4, Tc
0005a7	40 28 00 00 04 00	Write   [0:0x0050] = 800, DestBase: A
0005a8	b3 00 00 00 20 00	Wait    11, Tc
0005a9	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005aa	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005ab	43 00 00 00 20 00	Wait    4, Tc
0005ac	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0005ad	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005ae	43 00 00 00 20 00	Wait    4, Tc
0005af	40 28 00 00 04 00	Write   [0:0x0050] = 800, DestBase: A
0005b0	b3 00 00 00 20 00	Wait    11, Tc
0005b1	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005b2	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005b3	43 00 00 00 20 00	Wait    4, Tc
0005b4	00 08 98 08 05 00	Write   [0:0x3010] = a11
0005b5	14 55 00 00 20 00	Branch  0x551, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllInitialize(int) >
0005b6	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0005b7	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005b8	43 00 00 00 20 00	Wait    4, Tc
0005b9	40 49 80 b5 07 00	Write   [0:0x0092] = f6b, DestBase: A
0005ba	b3 00 00 00 20 00	Wait    11, Tc
0005bb	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005bc	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005bd	43 00 00 00 20 00	Wait    4, Tc
0005be	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0005bf	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005c0	43 00 00 00 20 00	Wait    4, Tc
0005c1	40 50 00 00 04 00	Write   [0:0x00a0] = 800, DestBase: A
0005c2	b3 00 00 00 20 00	Wait    11, Tc
0005c3	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005c4	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005c5	43 00 00 00 20 00	Wait    4, Tc
0005c6	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0005c7	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005c8	43 00 00 00 20 00	Wait    4, Tc
0005c9	40 50 00 00 04 00	Write   [0:0x00a0] = 800, DestBase: A
0005ca	b3 00 00 00 20 00	Wait    11, Tc
0005cb	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005cc	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005cd	43 00 00 00 20 00	Wait    4, Tc
0005ce	14 58 00 00 20 00	Branch  0x581, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandInitialize(void) >
0005cf	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0005d0	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005d1	43 00 00 00 20 00	Wait    4, Tc
0005d2	40 01 80 01 00 00	Write   [0:0x0002] = 3, DestBase: A
0005d3	b3 00 00 00 20 00	Wait    11, Tc
0005d4	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005d5	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005d6	43 00 00 00 20 00	Wait    4, Tc
0005d7	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0005d8	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005d9	43 00 00 00 20 00	Wait    4, Tc
0005da	40 10 00 00 00 00	Write   [0:0x0020] = 0, DestBase: A
0005db	b3 00 00 00 20 00	Wait    11, Tc
0005dc	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005dd	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005de	43 00 00 00 20 00	Wait    4, Tc
0005df	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0005e0	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005e1	43 00 00 00 20 00	Wait    4, Tc
0005e2	c0 10 00 00 00 00	Write   [0:0x0021] = 0, DestBase: A
0005e3	b3 00 00 00 20 00	Wait    11, Tc
0005e4	00 09 18 00 00 00	Write   [0:0x3012] = 0
0005e5	80 09 18 00 00 00	Write   [0:0x3013] = 0
0005e6	43 00 00 00 20 00	Wait    4, Tc
0005e7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool)
0005e8	43 00 00 00 20 00	Wait    4, Tc
0005e9	81 11 90 01 00 01	Copy    [0:2023] = [SF+0], SrcBase: AI
0005ea	01 11 90 01 00 01	Copy    [0:2022] = [SF+1], SrcBase: AI
0005eb	33 00 00 00 20 00	Wait    3, Tc
0005ec	01 16 90 01 00 01	Copy    [0:202c] = [SF+2], SrcBase: AI
0005ed	81 12 90 01 00 01	Copy    [0:2025] = [SF+3], SrcBase: AI
0005ee	33 00 00 00 20 00	Wait    3, Tc
0005ef	01 12 90 01 00 01	Copy    [0:2024] = [SF+4], SrcBase: AI
0005f0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTxLineupModule::SetRamp(enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::RAMP_MODE,double,double,double,double,double)
0005f1	43 00 00 00 20 00	Wait    4, Tc
0005f2	01 46 90 01 00 01	Copy    [0:208c] = [SF+0], SrcBase: AI
0005f3	81 40 90 01 00 01	Copy    [0:2081] = [SF+1], SrcBase: AI
0005f4	33 00 00 00 20 00	Wait    3, Tc
0005f5	01 40 90 01 00 01	Copy    [0:2080] = [SF+2], SrcBase: AI
0005f6	81 41 90 01 00 01	Copy    [0:2083] = [SF+3], SrcBase: AI
0005f7	33 00 00 00 20 00	Wait    3, Tc
0005f8	01 41 90 01 00 01	Copy    [0:2082] = [SF+4], SrcBase: AI
0005f9	81 43 90 01 00 01	Copy    [0:2087] = [SF+5], SrcBase: AI
0005fa	33 00 00 00 20 00	Wait    3, Tc
0005fb	01 43 90 01 00 01	Copy    [0:2086] = [SF+6], SrcBase: AI
0005fc	81 42 90 01 00 01	Copy    [0:2085] = [SF+7], SrcBase: AI
0005fd	33 00 00 00 20 00	Wait    3, Tc
0005fe	01 42 90 01 00 01	Copy    [0:2084] = [SF+8], SrcBase: AI
0005ff	81 44 90 01 00 01	Copy    [0:2089] = [SF+9], SrcBase: AI
000600	33 00 00 00 20 00	Wait    3, Tc
000601	01 44 90 01 00 01	Copy    [0:2088] = [SF+10], SrcBase: AI
000602	01 01 90 01 00 01	Copy    [0:2002] = [SF+11], SrcBase: AI
000603	33 00 00 00 20 00	Wait    3, Tc
000604	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool)
000605	43 00 00 00 20 00	Wait    4, Tc
000606	81 14 90 01 00 01	Copy    [0:2029] = [SF+0], SrcBase: AI
000607	01 14 90 01 00 01	Copy    [0:2028] = [SF+1], SrcBase: AI
000608	33 00 00 00 20 00	Wait    3, Tc
000609	01 16 90 01 00 01	Copy    [0:202c] = [SF+2], SrcBase: AI
00060a	81 15 90 01 00 01	Copy    [0:202b] = [SF+3], SrcBase: AI
00060b	33 00 00 00 20 00	Wait    3, Tc
00060c	01 15 90 01 00 01	Copy    [0:202a] = [SF+4], SrcBase: AI
00060d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTxLineupModule::SetRamp(enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::RAMP_MODE,double,double,double,double,double)
00060e	43 00 00 00 20 00	Wait    4, Tc
00060f	01 4e 90 01 00 01	Copy    [0:209c] = [SF+0], SrcBase: AI
000610	81 48 90 01 00 01	Copy    [0:2091] = [SF+1], SrcBase: AI
000611	33 00 00 00 20 00	Wait    3, Tc
000612	01 48 90 01 00 01	Copy    [0:2090] = [SF+2], SrcBase: AI
000613	81 49 90 01 00 01	Copy    [0:2093] = [SF+3], SrcBase: AI
000614	33 00 00 00 20 00	Wait    3, Tc
000615	01 49 90 01 00 01	Copy    [0:2092] = [SF+4], SrcBase: AI
000616	81 4b 90 01 00 01	Copy    [0:2097] = [SF+5], SrcBase: AI
000617	33 00 00 00 20 00	Wait    3, Tc
000618	01 4b 90 01 00 01	Copy    [0:2096] = [SF+6], SrcBase: AI
000619	81 4a 90 01 00 01	Copy    [0:2095] = [SF+7], SrcBase: AI
00061a	33 00 00 00 20 00	Wait    3, Tc
00061b	01 4a 90 01 00 01	Copy    [0:2094] = [SF+8], SrcBase: AI
00061c	81 4c 90 01 00 01	Copy    [0:2099] = [SF+9], SrcBase: AI
00061d	33 00 00 00 20 00	Wait    3, Tc
00061e	01 4c 90 01 00 01	Copy    [0:2098] = [SF+10], SrcBase: AI
00061f	01 01 90 01 00 01	Copy    [0:2002] = [SF+11], SrcBase: AI
000620	33 00 00 00 20 00	Wait    3, Tc
000621	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTxLineupModule::Initialize(void)
000622	80 03 10 00 02 00	Write   [0:0x2007] = 400
000623	00 00 10 00 00 00	Write   [0:0x2000] = 0
000624	80 12 10 00 00 00	Write   [0:0x2025] = 0
000625	00 12 10 00 00 00	Write   [0:0x2024] = 0
000626	00 08 98 0c 05 00	Write   [0:0x3010] = a19
000627	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
000628	00 10 10 00 00 00	Write   [0:0x2020] = 0
000629	80 10 10 00 00 00	Write   [0:0x2021] = 0
00062a	80 03 10 00 02 00	Write   [0:0x2007] = 400
00062b	00 06 90 ff 3f 00	Write   [0:0x200c] = 7fff
00062c	00 17 90 3f 00 00	Write   [0:0x202e] = 7f
00062d	00 08 18 0f 05 00	Write   [0:0x3010] = a1e
00062e	14 5f 00 00 20 00	Branch  0x5f1, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetRamp(enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::RAMP_MODE,double,double,double,double,double) >
00062f	00 16 10 01 00 00	Write   [0:0x202c] = 2
000630	00 30 10 00 00 00	Write   [0:0x2060] = 0
000631	80 15 10 00 00 00	Write   [0:0x202b] = 0
000632	00 15 10 00 00 00	Write   [0:0x202a] = 0
000633	00 08 98 0c 05 00	Write   [0:0x3010] = a19
000634	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
000635	00 13 10 00 00 00	Write   [0:0x2026] = 0
000636	80 13 10 00 00 00	Write   [0:0x2027] = 0
000637	80 03 10 00 02 00	Write   [0:0x2007] = 400
000638	80 06 90 ff 3f 00	Write   [0:0x200d] = 7fff
000639	80 17 90 3f 00 00	Write   [0:0x202f] = 7f
00063a	00 08 18 0f 05 00	Write   [0:0x3010] = a1e
00063b	e4 60 00 00 20 00	Branch  0x60e, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetRamp(enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::RAMP_MODE,double,double,double,double,double) >
00063c	00 16 10 01 00 00	Write   [0:0x202c] = 2
00063d	80 30 10 00 00 00	Write   [0:0x2061] = 0
00063e	00 01 90 ff 7f 00	Write   [0:0x2002] = ffff
00063f	00 01 10 00 00 00	Write   [0:0x2002] = 0
000640	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::ManualTune(int,struct Vayyar::Centipede::Subband,struct Vayyar::Centipede::Divider)
000641	43 00 00 00 20 00	Wait    4, Tc
000642	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000643	80 09 18 00 00 00	Write   [0:0x3013] = 0
000644	43 00 00 00 20 00	Wait    4, Tc
000645	c1 20 80 01 00 01	Copy    [0:0041] = [SF+0], DestBase: A, SrcBase: AI
000646	b3 00 00 00 20 00	Wait    11, Tc
000647	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000648	80 09 18 00 00 00	Write   [0:0x3013] = 0
000649	43 00 00 00 20 00	Wait    4, Tc
00064a	c1 28 80 01 00 01	Copy    [0:0051] = [SF+1], DestBase: A, SrcBase: AI
00064b	b3 00 00 00 20 00	Wait    11, Tc
00064c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00064d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00064e	43 00 00 00 20 00	Wait    4, Tc
00064f	41 41 80 01 00 01	Copy    [0:0082] = [SF+2], DestBase: A, SrcBase: AI
000650	b3 00 00 00 20 00	Wait    11, Tc
000651	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000652	80 09 18 00 00 00	Write   [0:0x3013] = 0
000653	43 00 00 00 20 00	Wait    4, Tc
000654	c1 41 80 01 00 01	Copy    [0:0083] = [SF+3], DestBase: A, SrcBase: AI
000655	b3 00 00 00 20 00	Wait    11, Tc
000656	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000657	80 09 18 00 00 00	Write   [0:0x3013] = 0
000658	43 00 00 00 20 00	Wait    4, Tc
000659	c1 41 80 01 00 01	Copy    [0:0083] = [SF+4], DestBase: A, SrcBase: AI
00065a	b3 00 00 00 20 00	Wait    11, Tc
00065b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::ManualTune(int,struct Vayyar::Centipede::Subband,struct Vayyar::Centipede::Divider)
00065c	43 00 00 00 20 00	Wait    4, Tc
00065d	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00065e	80 09 18 00 00 00	Write   [0:0x3013] = 0
00065f	43 00 00 00 20 00	Wait    4, Tc
000660	c1 48 80 01 00 01	Copy    [0:0091] = [SF+0], DestBase: A, SrcBase: AI
000661	b3 00 00 00 20 00	Wait    11, Tc
000662	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000663	80 09 18 00 00 00	Write   [0:0x3013] = 0
000664	43 00 00 00 20 00	Wait    4, Tc
000665	c1 50 80 01 00 01	Copy    [0:00a1] = [SF+1], DestBase: A, SrcBase: AI
000666	b3 00 00 00 20 00	Wait    11, Tc
000667	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000668	80 09 18 00 00 00	Write   [0:0x3013] = 0
000669	43 00 00 00 20 00	Wait    4, Tc
00066a	41 69 80 01 00 01	Copy    [0:00d2] = [SF+2], DestBase: A, SrcBase: AI
00066b	b3 00 00 00 20 00	Wait    11, Tc
00066c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00066d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00066e	43 00 00 00 20 00	Wait    4, Tc
00066f	c1 69 80 01 00 01	Copy    [0:00d3] = [SF+3], DestBase: A, SrcBase: AI
000670	b3 00 00 00 20 00	Wait    11, Tc
000671	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000672	80 09 18 00 00 00	Write   [0:0x3013] = 0
000673	43 00 00 00 20 00	Wait    4, Tc
000674	c1 69 80 01 00 01	Copy    [0:00d3] = [SF+4], DestBase: A, SrcBase: AI
000675	b3 00 00 00 20 00	Wait    11, Tc
000676	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::Initialize(enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,double,double)
000677	f4 4f 00 00 20 00	Branch  0x4ff, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::InitRfRegs(void) >
000678	64 50 00 00 20 00	Branch  0x506, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetDefaultValues(class std::unordered_map<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,struct std::hash<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,struct std::equal_to<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,class std::allocator<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,int> > > &) >
000679	a4 59 00 00 20 00	Branch  0x59a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::Initialize(double) >
00067a	24 62 00 00 20 00	Branch  0x622, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::Initialize(void) >
00067b	00 08 18 15 05 00	Write   [0:0x3010] = a2a
00067c	14 64 00 00 20 00	Branch  0x641, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::ManualTune(int,struct Vayyar::Centipede::Subband,struct Vayyar::Centipede::Divider) >
00067d	03 64 00 00 20 00	Wait    1600, Tc
00067e	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00067f	80 09 18 00 00 00	Write   [0:0x3013] = 0
000680	43 00 00 00 20 00	Wait    4, Tc
000681	c0 41 00 00 00 00	Write   [0:0x0083] = 0, DestBase: A
000682	b3 00 00 00 20 00	Wait    11, Tc
000683	00 09 18 00 00 00	Write   [0:0x3012] = 0
000684	80 09 18 00 00 00	Write   [0:0x3013] = 0
000685	43 00 00 00 20 00	Wait    4, Tc
000686	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000687	80 09 18 00 00 00	Write   [0:0x3013] = 0
000688	43 00 00 00 20 00	Wait    4, Tc
000689	c0 41 80 00 08 00	Write   [0:0x0083] = 1001, DestBase: A
00068a	b3 00 00 00 20 00	Wait    11, Tc
00068b	00 09 18 00 00 00	Write   [0:0x3012] = 0
00068c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00068d	43 00 00 00 20 00	Wait    4, Tc
00068e	00 08 18 15 05 00	Write   [0:0x3010] = a2a
00068f	c4 65 00 00 20 00	Branch  0x65c, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::ManualTune(int,struct Vayyar::Centipede::Subband,struct Vayyar::Centipede::Divider) >
000690	03 64 00 00 20 00	Wait    1600, Tc
000691	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000692	80 09 18 00 00 00	Write   [0:0x3013] = 0
000693	43 00 00 00 20 00	Wait    4, Tc
000694	c0 69 00 00 00 00	Write   [0:0x00d3] = 0, DestBase: A
000695	b3 00 00 00 20 00	Wait    11, Tc
000696	00 09 18 00 00 00	Write   [0:0x3012] = 0
000697	80 09 18 00 00 00	Write   [0:0x3013] = 0
000698	43 00 00 00 20 00	Wait    4, Tc
000699	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00069a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00069b	43 00 00 00 20 00	Wait    4, Tc
00069c	c0 69 80 00 08 00	Write   [0:0x00d3] = 1001, DestBase: A
00069d	b3 00 00 00 20 00	Wait    11, Tc
00069e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00069f	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006a0	43 00 00 00 20 00	Wait    4, Tc
0006a1	80 03 10 00 06 00	Write   [0:0x2007] = c00
0006a2	00 06 10 61 28 00	Write   [0:0x200c] = 50c2
0006a3	00 17 90 3f 00 00	Write   [0:0x202e] = 7f
0006a4	80 03 10 00 06 00	Write   [0:0x2007] = c00
0006a5	80 06 10 61 28 00	Write   [0:0x200d] = 50c2
0006a6	80 17 90 3f 00 00	Write   [0:0x202f] = 7f
0006a7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int)
0006a8	43 00 00 00 20 00	Wait    4, Tc
0006a9	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006aa	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006ab	43 00 00 00 20 00	Wait    4, Tc
0006ac	41 08 80 01 00 01	Copy    [0:0010] = [SF+0], DestBase: A, SrcBase: AI
0006ad	b3 00 00 00 20 00	Wait    11, Tc
0006ae	11 11 80 01 00 01	Copy    [1:0022] = [SF+1], SrcBase: AI
0006af	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0006b0	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0006b1	00 08 98 18 05 00	Write   [0:0x3010] = a31
0006b2	43 00 00 00 20 00	Wait    4, Tc
0006b3	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006b4	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006b5	43 00 00 00 20 00	Wait    4, Tc
0006b6	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
0006b7	b3 00 00 00 20 00	Wait    11, Tc
0006b8	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllSetMode(int)
0006b9	43 00 00 00 20 00	Wait    4, Tc
0006ba	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006bb	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006bc	43 00 00 00 20 00	Wait    4, Tc
0006bd	41 28 80 01 00 01	Copy    [0:0050] = [SF+0], DestBase: A, SrcBase: AI
0006be	b3 00 00 00 20 00	Wait    11, Tc
0006bf	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006c0	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006c1	43 00 00 00 20 00	Wait    4, Tc
0006c2	41 29 80 01 00 01	Copy    [0:0052] = [SF+1], DestBase: A, SrcBase: AI
0006c3	b3 00 00 00 20 00	Wait    11, Tc
0006c4	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006c5	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006c6	43 00 00 00 20 00	Wait    4, Tc
0006c7	41 39 80 01 00 01	Copy    [0:0072] = [SF+2], DestBase: A, SrcBase: AI
0006c8	b3 00 00 00 20 00	Wait    11, Tc
0006c9	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006ca	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006cb	43 00 00 00 20 00	Wait    4, Tc
0006cc	41 21 80 01 00 01	Copy    [0:0042] = [SF+3], DestBase: A, SrcBase: AI
0006cd	b3 00 00 00 20 00	Wait    11, Tc
0006ce	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int)
0006cf	43 00 00 00 20 00	Wait    4, Tc
0006d0	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006d1	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006d2	43 00 00 00 20 00	Wait    4, Tc
0006d3	41 08 80 01 00 01	Copy    [0:0010] = [SF+0], DestBase: A, SrcBase: AI
0006d4	b3 00 00 00 20 00	Wait    11, Tc
0006d5	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006d6	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006d7	43 00 00 00 20 00	Wait    4, Tc
0006d8	41 09 80 01 00 01	Copy    [0:0012] = [SF+1], DestBase: A, SrcBase: AI
0006d9	b3 00 00 00 20 00	Wait    11, Tc
0006da	11 11 80 01 00 01	Copy    [1:0022] = [SF+2], SrcBase: AI
0006db	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0006dc	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0006dd	00 08 18 1c 05 00	Write   [0:0x3010] = a38
0006de	43 00 00 00 20 00	Wait    4, Tc
0006df	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006e0	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006e1	43 00 00 00 20 00	Wait    4, Tc
0006e2	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
0006e3	b3 00 00 00 20 00	Wait    11, Tc
0006e4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllSetMode(int)
0006e5	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006e6	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006e7	43 00 00 00 20 00	Wait    4, Tc
0006e8	40 50 80 83 47 00	Write   [0:0x00a0] = 8f07, DestBase: A
0006e9	b3 00 00 00 20 00	Wait    11, Tc
0006ea	00 09 18 00 00 00	Write   [0:0x3012] = 0
0006eb	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006ec	43 00 00 00 20 00	Wait    4, Tc
0006ed	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006ee	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006ef	43 00 00 00 20 00	Wait    4, Tc
0006f0	40 51 00 e4 00 00	Write   [0:0x00a2] = 1c8, DestBase: A
0006f1	b3 00 00 00 20 00	Wait    11, Tc
0006f2	00 09 18 00 00 00	Write   [0:0x3012] = 0
0006f3	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006f4	43 00 00 00 20 00	Wait    4, Tc
0006f5	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006f6	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006f7	43 00 00 00 20 00	Wait    4, Tc
0006f8	40 61 00 00 00 00	Write   [0:0x00c2] = 0, DestBase: A
0006f9	b3 00 00 00 20 00	Wait    11, Tc
0006fa	00 09 18 00 00 00	Write   [0:0x3012] = 0
0006fb	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006fc	43 00 00 00 20 00	Wait    4, Tc
0006fd	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0006fe	80 09 18 00 00 00	Write   [0:0x3013] = 0
0006ff	43 00 00 00 20 00	Wait    4, Tc
000700	40 49 80 b5 07 00	Write   [0:0x0092] = f6b, DestBase: A
000701	b3 00 00 00 20 00	Wait    11, Tc
000702	00 09 18 00 00 00	Write   [0:0x3012] = 0
000703	80 09 18 00 00 00	Write   [0:0x3013] = 0
000704	43 00 00 00 20 00	Wait    4, Tc
000705	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetMode(struct Vayyar::Centipede::LoMode [])
000706	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000707	80 09 18 00 00 00	Write   [0:0x3013] = 0
000708	43 00 00 00 20 00	Wait    4, Tc
000709	40 01 80 01 00 00	Write   [0:0x0002] = 3, DestBase: A
00070a	b3 00 00 00 20 00	Wait    11, Tc
00070b	00 09 18 00 00 00	Write   [0:0x3012] = 0
00070c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00070d	43 00 00 00 20 00	Wait    4, Tc
00070e	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00070f	80 09 18 00 00 00	Write   [0:0x3013] = 0
000710	43 00 00 00 20 00	Wait    4, Tc
000711	c0 10 80 87 09 00	Write   [0:0x0021] = 130f, DestBase: A
000712	b3 00 00 00 20 00	Wait    11, Tc
000713	00 09 18 00 00 00	Write   [0:0x3012] = 0
000714	80 09 18 00 00 00	Write   [0:0x3013] = 0
000715	43 00 00 00 20 00	Wait    4, Tc
000716	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000717	80 09 18 00 00 00	Write   [0:0x3013] = 0
000718	43 00 00 00 20 00	Wait    4, Tc
000719	40 10 80 79 0a 00	Write   [0:0x0020] = 14f3, DestBase: A
00071a	b3 00 00 00 20 00	Wait    11, Tc
00071b	00 09 18 00 00 00	Write   [0:0x3012] = 0
00071c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00071d	43 00 00 00 20 00	Wait    4, Tc
00071e	00 08 98 17 05 00	Write   [0:0x3010] = a2f
00071f	84 6a 00 00 20 00	Branch  0x6a8, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int) >
000720	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000721	80 09 18 00 00 00	Write   [0:0x3013] = 0
000722	43 00 00 00 20 00	Wait    4, Tc
000723	40 21 80 b5 07 00	Write   [0:0x0042] = f6b, DestBase: A
000724	b3 00 00 00 20 00	Wait    11, Tc
000725	00 09 18 00 00 00	Write   [0:0x3012] = 0
000726	80 09 18 00 00 00	Write   [0:0x3013] = 0
000727	43 00 00 00 20 00	Wait    4, Tc
000728	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000729	80 09 18 00 00 00	Write   [0:0x3013] = 0
00072a	43 00 00 00 20 00	Wait    4, Tc
00072b	40 28 00 01 45 00	Write   [0:0x0050] = 8a02, DestBase: A
00072c	b3 00 00 00 20 00	Wait    11, Tc
00072d	00 09 18 00 00 00	Write   [0:0x3012] = 0
00072e	80 09 18 00 00 00	Write   [0:0x3013] = 0
00072f	43 00 00 00 20 00	Wait    4, Tc
000730	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000731	80 09 18 00 00 00	Write   [0:0x3013] = 0
000732	43 00 00 00 20 00	Wait    4, Tc
000733	40 28 80 01 45 00	Write   [0:0x0050] = 8a03, DestBase: A
000734	b3 00 00 00 20 00	Wait    11, Tc
000735	00 09 18 00 00 00	Write   [0:0x3012] = 0
000736	80 09 18 00 00 00	Write   [0:0x3013] = 0
000737	43 00 00 00 20 00	Wait    4, Tc
000738	00 08 98 18 05 00	Write   [0:0x3010] = a31
000739	94 6b 00 00 20 00	Branch  0x6b9, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllSetMode(int) >
00073a	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00073b	80 09 18 00 00 00	Write   [0:0x3013] = 0
00073c	43 00 00 00 20 00	Wait    4, Tc
00073d	40 28 80 93 45 00	Write   [0:0x0050] = 8b27, DestBase: A
00073e	b3 00 00 00 20 00	Wait    11, Tc
00073f	00 09 18 00 00 00	Write   [0:0x3012] = 0
000740	80 09 18 00 00 00	Write   [0:0x3013] = 0
000741	43 00 00 00 20 00	Wait    4, Tc
000742	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000743	80 09 18 00 00 00	Write   [0:0x3013] = 0
000744	43 00 00 00 20 00	Wait    4, Tc
000745	c0 10 80 ff 1f 00	Write   [0:0x0021] = 3fff, DestBase: A
000746	b3 00 00 00 20 00	Wait    11, Tc
000747	00 09 18 00 00 00	Write   [0:0x3012] = 0
000748	80 09 18 00 00 00	Write   [0:0x3013] = 0
000749	43 00 00 00 20 00	Wait    4, Tc
00074a	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00074b	80 09 18 00 00 00	Write   [0:0x3013] = 0
00074c	43 00 00 00 20 00	Wait    4, Tc
00074d	40 10 80 79 1e 00	Write   [0:0x0020] = 3cf3, DestBase: A
00074e	b3 00 00 00 20 00	Wait    11, Tc
00074f	00 09 18 00 00 00	Write   [0:0x3012] = 0
000750	80 09 18 00 00 00	Write   [0:0x3013] = 0
000751	43 00 00 00 20 00	Wait    4, Tc
000752	00 08 98 1a 05 00	Write   [0:0x3010] = a35
000753	f4 6c 00 00 20 00	Branch  0x6cf, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int) >
000754	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000755	80 09 18 00 00 00	Write   [0:0x3013] = 0
000756	43 00 00 00 20 00	Wait    4, Tc
000757	40 49 80 b5 07 00	Write   [0:0x0092] = f6b, DestBase: A
000758	b3 00 00 00 20 00	Wait    11, Tc
000759	00 09 18 00 00 00	Write   [0:0x3012] = 0
00075a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00075b	43 00 00 00 20 00	Wait    4, Tc
00075c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00075d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00075e	43 00 00 00 20 00	Wait    4, Tc
00075f	40 50 00 01 45 00	Write   [0:0x00a0] = 8a02, DestBase: A
000760	b3 00 00 00 20 00	Wait    11, Tc
000761	00 09 18 00 00 00	Write   [0:0x3012] = 0
000762	80 09 18 00 00 00	Write   [0:0x3013] = 0
000763	43 00 00 00 20 00	Wait    4, Tc
000764	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000765	80 09 18 00 00 00	Write   [0:0x3013] = 0
000766	43 00 00 00 20 00	Wait    4, Tc
000767	40 50 80 01 45 00	Write   [0:0x00a0] = 8a03, DestBase: A
000768	b3 00 00 00 20 00	Wait    11, Tc
000769	00 09 18 00 00 00	Write   [0:0x3012] = 0
00076a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00076b	43 00 00 00 20 00	Wait    4, Tc
00076c	54 6e 00 00 20 00	Branch  0x6e5, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllSetMode(int) >
00076d	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00076e	80 09 18 00 00 00	Write   [0:0x3013] = 0
00076f	43 00 00 00 20 00	Wait    4, Tc
000770	40 50 80 8b 47 00	Write   [0:0x00a0] = 8f17, DestBase: A
000771	b3 00 00 00 20 00	Wait    11, Tc
000772	00 09 18 00 00 00	Write   [0:0x3012] = 0
000773	80 09 18 00 00 00	Write   [0:0x3013] = 0
000774	43 00 00 00 20 00	Wait    4, Tc
000775	04 00 00 00 40 00	Branch  0x0, [RET]


mtIoffset_1
000776	43 00 00 00 20 00	Wait    4, Tc
000777	11 87 80 01 00 01	Copy    [1:010e] = [SF+0], SrcBase: AI
000778	91 87 80 01 00 01	Copy    [1:010f] = [SF+1], SrcBase: AI
000779	53 00 00 00 20 00	Wait    5, Tc
00077a	11 88 80 01 00 01	Copy    [1:0110] = [SF+2], SrcBase: AI
00077b	13 00 00 00 20 00	Wait    1, Tc
00077c	91 88 80 01 00 01	Copy    [1:0111] = [SF+3], SrcBase: AI
00077d	13 00 00 00 20 00	Wait    1, Tc
00077e	11 89 80 01 00 01	Copy    [1:0112] = [SF+4], SrcBase: AI
00077f	04 00 00 00 40 00	Branch  0x0, [RET]


ReadModifyWrite_Indirect
000780	43 00 00 00 20 00	Wait    4, Tc
000781	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000782	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000783	73 00 00 00 20 00	Wait    7, Tc
000784	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000785	01 08 98 1c 02 00	Copy    [0:3010] = [1:010e]
000786	83 00 00 00 20 00	Wait    8, Tc
000787	01 70 18 01 00 00	Copy    [0:30e0] = [0:0000], SrcBase: A
000788	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000789	f3 06 00 00 20 00	Wait    111, Tc
00078a	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00078b	01 08 98 28 02 00	Copy    [0:3010] = [1:0114]
00078c	83 00 00 00 20 00	Wait    8, Tc
00078d	01 70 18 01 00 00	Copy    [0:30e0] = [0:0000], SrcBase: A
00078e	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00078f	83 00 00 00 20 00	Wait    8, Tc
000790	01 71 98 22 02 00	Copy    [0:30e2] = [1:0111]
000791	33 00 00 00 20 00	Wait    3, Tc
000792	01 70 18 d0 61 00	Copy    [0:30e0] = [0:30e8]
000793	01 71 98 24 02 00	Copy    [0:30e2] = [1:0112]
000794	73 00 00 00 20 00	Wait    7, Tc
000795	01 70 18 d2 61 00	Copy    [0:30e0] = [0:30e9]
000796	01 71 98 1e 02 00	Copy    [0:30e2] = [1:010f]
000797	73 00 00 00 20 00	Wait    7, Tc
000798	01 71 18 d0 61 00	Copy    [0:30e2] = [0:30e8]
000799	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00079a	33 00 00 00 20 00	Wait    3, Tc
00079b	01 08 98 28 02 00	Copy    [0:3010] = [1:0114]
00079c	43 00 00 00 20 00	Wait    4, Tc
00079d	01 70 18 01 00 00	Copy    [0:30e0] = [0:0000], SrcBase: A
00079e	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00079f	c3 00 00 00 20 00	Wait    12, Tc
0007a0	01 70 18 cc 61 00	Copy    [0:30e0] = [0:30e6]
0007a1	01 71 98 26 02 00	Copy    [0:30e2] = [1:0113]
0007a2	73 00 00 00 20 00	Wait    7, Tc
0007a3	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
0007a4	01 09 98 1c 02 00	Copy    [0:3012] = [1:010e]
0007a5	83 00 00 00 20 00	Wait    8, Tc
0007a6	41 00 00 c8 61 00	Copy    [0:0000] = [0:30e4], DestBase: A
0007a7	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
0007a8	93 01 00 00 20 00	Wait    25, Tc
0007a9	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int)
0007aa	43 00 00 00 20 00	Wait    4, Tc
0007ab	00 08 18 1d 05 00	Write   [0:0x3010] = a3a
0007ac	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0007ad	00 08 18 1c 05 00	Write   [0:0x3010] = a38
0007ae	43 00 00 00 20 00	Wait    4, Tc
0007af	91 89 80 01 00 01	Copy    [1:0113] = [SF+0], SrcBase: AI
0007b0	11 8a 80 01 00 01	Copy    [1:0114] = [SF+1], SrcBase: AI
0007b1	33 00 00 00 20 00	Wait    3, Tc
0007b2	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0007b3	04 78 00 00 20 00	Branch  0x780, [CALL] < ReadModifyWrite_Indirect >
0007b4	00 08 18 1d 05 00	Write   [0:0x3010] = a3a
0007b5	43 00 00 00 20 00	Wait    4, Tc
0007b6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int)
0007b7	43 00 00 00 20 00	Wait    4, Tc
0007b8	00 08 98 1f 05 00	Write   [0:0x3010] = a3f
0007b9	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0007ba	00 08 18 1c 05 00	Write   [0:0x3010] = a38
0007bb	43 00 00 00 20 00	Wait    4, Tc
0007bc	91 89 80 01 00 01	Copy    [1:0113] = [SF+0], SrcBase: AI
0007bd	11 8a 80 01 00 01	Copy    [1:0114] = [SF+1], SrcBase: AI
0007be	33 00 00 00 20 00	Wait    3, Tc
0007bf	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0007c0	04 78 00 00 20 00	Branch  0x780, [CALL] < ReadModifyWrite_Indirect >
0007c1	00 08 18 1d 05 00	Write   [0:0x3010] = a3a
0007c2	43 00 00 00 20 00	Wait    4, Tc
0007c3	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0007c4	43 00 00 00 20 00	Wait    4, Tc
0007c5	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0007c6	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0007c7	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0007c8	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0007c9	33 00 00 00 20 00	Wait    3, Tc
0007ca	01 71 98 60 00 00	Copy    [0:30e2] = [1:0030]
0007cb	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0007cc	73 00 00 00 20 00	Wait    7, Tc
0007cd	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0007ce	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0007cf	33 00 00 00 20 00	Wait    3, Tc
0007d0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0007d1	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0007d2	44 7c 00 00 20 00	Branch  0x7c4, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0007d3	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0007d4	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0007d5	83 00 00 00 20 00	Wait    8, Tc
0007d6	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0007d7	80 09 18 00 00 00	Write   [0:0x3013] = 0
0007d8	43 00 00 00 20 00	Wait    4, Tc
0007d9	c1 20 80 01 00 00	Copy    [0:0041] = [1:0000], DestBase: A, SrcBase: A
0007da	b3 00 00 00 20 00	Wait    11, Tc
0007db	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0007dc	43 00 00 00 20 00	Wait    4, Tc
0007dd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0007de	43 00 00 00 20 00	Wait    4, Tc
0007df	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0007e0	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0007e1	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0007e2	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0007e3	33 00 00 00 20 00	Wait    3, Tc
0007e4	01 71 98 6c 00 00	Copy    [0:30e2] = [1:0036]
0007e5	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0007e6	73 00 00 00 20 00	Wait    7, Tc
0007e7	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0007e8	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0007e9	33 00 00 00 20 00	Wait    3, Tc
0007ea	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0007eb	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0007ec	e4 7d 00 00 20 00	Branch  0x7de, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0007ed	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0007ee	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0007ef	83 00 00 00 20 00	Wait    8, Tc
0007f0	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0007f1	80 09 18 00 00 00	Write   [0:0x3013] = 0
0007f2	43 00 00 00 20 00	Wait    4, Tc
0007f3	c1 28 80 01 00 00	Copy    [0:0051] = [1:0000], DestBase: A, SrcBase: A
0007f4	b3 00 00 00 20 00	Wait    11, Tc
0007f5	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0007f6	43 00 00 00 20 00	Wait    4, Tc
0007f7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0007f8	43 00 00 00 20 00	Wait    4, Tc
0007f9	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0007fa	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0007fb	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0007fc	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0007fd	33 00 00 00 20 00	Wait    3, Tc
0007fe	01 71 98 76 00 00	Copy    [0:30e2] = [1:003b]
0007ff	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000800	73 00 00 00 20 00	Wait    7, Tc
000801	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
000802	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000803	33 00 00 00 20 00	Wait    3, Tc
000804	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
000805	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000806	84 7f 00 00 20 00	Branch  0x7f8, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000807	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000808	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
000809	83 00 00 00 20 00	Wait    8, Tc
00080a	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00080b	80 09 18 00 00 00	Write   [0:0x3013] = 0
00080c	43 00 00 00 20 00	Wait    4, Tc
00080d	41 41 80 01 00 00	Copy    [0:0082] = [1:0000], DestBase: A, SrcBase: A
00080e	b3 00 00 00 20 00	Wait    11, Tc
00080f	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000810	43 00 00 00 20 00	Wait    4, Tc
000811	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000812	43 00 00 00 20 00	Wait    4, Tc
000813	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000814	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000815	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000816	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000817	33 00 00 00 20 00	Wait    3, Tc
000818	01 71 98 80 00 00	Copy    [0:30e2] = [1:0040]
000819	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00081a	73 00 00 00 20 00	Wait    7, Tc
00081b	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00081c	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00081d	33 00 00 00 20 00	Wait    3, Tc
00081e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00081f	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000820	24 81 00 00 20 00	Branch  0x812, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000821	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000822	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
000823	83 00 00 00 20 00	Wait    8, Tc
000824	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000825	80 09 18 00 00 00	Write   [0:0x3013] = 0
000826	43 00 00 00 20 00	Wait    4, Tc
000827	41 40 80 01 00 00	Copy    [0:0080] = [1:0000], DestBase: A, SrcBase: A
000828	b3 00 00 00 20 00	Wait    11, Tc
000829	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00082a	43 00 00 00 20 00	Wait    4, Tc
00082b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00082c	43 00 00 00 20 00	Wait    4, Tc
00082d	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
00082e	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00082f	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000830	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000831	33 00 00 00 20 00	Wait    3, Tc
000832	01 71 98 8a 00 00	Copy    [0:30e2] = [1:0045]
000833	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000834	73 00 00 00 20 00	Wait    7, Tc
000835	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
000836	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000837	33 00 00 00 20 00	Wait    3, Tc
000838	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
000839	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00083a	c4 82 00 00 20 00	Branch  0x82c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00083b	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00083c	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
00083d	83 00 00 00 20 00	Wait    8, Tc
00083e	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00083f	80 09 18 00 00 00	Write   [0:0x3013] = 0
000840	43 00 00 00 20 00	Wait    4, Tc
000841	c1 40 80 01 00 00	Copy    [0:0081] = [1:0000], DestBase: A, SrcBase: A
000842	b3 00 00 00 20 00	Wait    11, Tc
000843	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000844	43 00 00 00 20 00	Wait    4, Tc
000845	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000846	43 00 00 00 20 00	Wait    4, Tc
000847	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000848	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000849	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
00084a	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00084b	33 00 00 00 20 00	Wait    3, Tc
00084c	01 71 98 94 00 00	Copy    [0:30e2] = [1:004a]
00084d	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00084e	73 00 00 00 20 00	Wait    7, Tc
00084f	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
000850	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000851	33 00 00 00 20 00	Wait    3, Tc
000852	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
000853	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000854	64 84 00 00 20 00	Branch  0x846, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000855	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000856	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
000857	83 00 00 00 20 00	Wait    8, Tc
000858	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000859	80 09 18 00 00 00	Write   [0:0x3013] = 0
00085a	43 00 00 00 20 00	Wait    4, Tc
00085b	c1 41 80 01 00 00	Copy    [0:0083] = [1:0000], DestBase: A, SrcBase: A
00085c	b3 00 00 00 20 00	Wait    11, Tc
00085d	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00085e	43 00 00 00 20 00	Wait    4, Tc
00085f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000860	43 00 00 00 20 00	Wait    4, Tc
000861	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000862	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000863	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000864	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000865	33 00 00 00 20 00	Wait    3, Tc
000866	01 71 98 9e 00 00	Copy    [0:30e2] = [1:004f]
000867	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000868	73 00 00 00 20 00	Wait    7, Tc
000869	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00086a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00086b	33 00 00 00 20 00	Wait    3, Tc
00086c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00086d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00086e	04 86 00 00 20 00	Branch  0x860, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00086f	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000870	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
000871	83 00 00 00 20 00	Wait    8, Tc
000872	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000873	80 09 18 00 00 00	Write   [0:0x3013] = 0
000874	43 00 00 00 20 00	Wait    4, Tc
000875	c1 41 80 01 00 00	Copy    [0:0083] = [1:0000], DestBase: A, SrcBase: A
000876	b3 00 00 00 20 00	Wait    11, Tc
000877	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000878	43 00 00 00 20 00	Wait    4, Tc
000879	04 00 00 00 40 00	Branch  0x0, [RET]


__If_1_[PllIdx == 0]
00087a	14 7d 00 00 20 00	Branch  0x7d1, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >		# If_1_Func_Start
00087b	b4 7e 00 00 20 00	Branch  0x7eb, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
00087c	54 80 00 00 20 00	Branch  0x805, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
00087d	f4 81 00 00 20 00	Branch  0x81f, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
00087e	94 83 00 00 20 00	Branch  0x839, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
00087f	34 85 00 00 20 00	Branch  0x853, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
000880	d4 86 00 00 20 00	Branch  0x86d, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
000881	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000882	43 00 00 00 20 00	Wait    4, Tc
000883	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000884	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000885	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000886	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000887	33 00 00 00 20 00	Wait    3, Tc
000888	01 71 98 a8 00 00	Copy    [0:30e2] = [1:0054]
000889	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00088a	73 00 00 00 20 00	Wait    7, Tc
00088b	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00088c	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00088d	33 00 00 00 20 00	Wait    3, Tc
00088e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00088f	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000890	24 88 00 00 20 00	Branch  0x882, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000891	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000892	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
000893	83 00 00 00 20 00	Wait    8, Tc
000894	91 86 80 01 00 00	Copy    [1:010d] = [1:0000], SrcBase: A
000895	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000896	83 00 00 00 20 00	Wait    8, Tc
000897	04 00 00 00 40 00	Branch  0x0, [RET]


mtIoffset_1shiftFieldValue_Func
000898	43 00 00 00 20 00	Wait    4, Tc
000899	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00089a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00089b	73 00 00 00 20 00	Wait    7, Tc
00089c	01 70 98 26 02 00	Copy    [0:30e0] = [1:0113]
00089d	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
00089e	43 01 00 00 20 00	Wait    20, Tc
00089f	91 89 00 d0 61 00	Copy    [1:0113] = [0:30e8]
0008a0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)
0008a1	43 00 00 00 20 00	Wait    4, Tc
0008a2	00 08 98 27 05 00	Write   [0:0x3010] = a4f
0008a3	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0008a4	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0008a5	93 00 00 00 20 00	Wait    9, Tc
0008a6	91 89 80 1a 02 00	Copy    [1:0113] = [1:010d]
0008a7	43 00 00 00 20 00	Wait    4, Tc
0008a8	00 08 18 2a 05 00	Write   [0:0x3010] = a54
0008a9	84 89 00 00 20 00	Branch  0x898, [CALL] < mtIoffset_1shiftFieldValue_Func >
0008aa	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0008ab	43 00 00 00 20 00	Wait    4, Tc
0008ac	11 8a 80 01 00 01	Copy    [1:0114] = [SF+0], SrcBase: AI
0008ad	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0008ae	04 78 00 00 20 00	Branch  0x780, [CALL] < ReadModifyWrite_Indirect >
0008af	00 08 98 27 05 00	Write   [0:0x3010] = a4f
0008b0	43 00 00 00 20 00	Wait    4, Tc
0008b1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0008b2	43 00 00 00 20 00	Wait    4, Tc
0008b3	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0008b4	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0008b5	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0008b6	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0008b7	33 00 00 00 20 00	Wait    3, Tc
0008b8	01 71 98 2a 02 00	Copy    [0:30e2] = [1:0115]
0008b9	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0008ba	73 00 00 00 20 00	Wait    7, Tc
0008bb	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0008bc	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0008bd	33 00 00 00 20 00	Wait    3, Tc
0008be	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0008bf	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0008c0	24 8b 00 00 20 00	Branch  0x8b2, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0008c1	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0008c2	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0008c3	83 00 00 00 20 00	Wait    8, Tc
0008c4	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0008c5	80 09 18 00 00 00	Write   [0:0x3013] = 0
0008c6	43 00 00 00 20 00	Wait    4, Tc
0008c7	c1 48 80 01 00 00	Copy    [0:0091] = [1:0000], DestBase: A, SrcBase: A
0008c8	b3 00 00 00 20 00	Wait    11, Tc
0008c9	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0008ca	43 00 00 00 20 00	Wait    4, Tc
0008cb	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0008cc	43 00 00 00 20 00	Wait    4, Tc
0008cd	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0008ce	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0008cf	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0008d0	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0008d1	33 00 00 00 20 00	Wait    3, Tc
0008d2	01 71 98 9c 03 00	Copy    [0:30e2] = [1:01ce]
0008d3	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0008d4	73 00 00 00 20 00	Wait    7, Tc
0008d5	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0008d6	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0008d7	33 00 00 00 20 00	Wait    3, Tc
0008d8	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0008d9	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0008da	c4 8c 00 00 20 00	Branch  0x8cc, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0008db	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0008dc	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0008dd	83 00 00 00 20 00	Wait    8, Tc
0008de	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0008df	80 09 18 00 00 00	Write   [0:0x3013] = 0
0008e0	43 00 00 00 20 00	Wait    4, Tc
0008e1	c1 50 80 01 00 00	Copy    [0:00a1] = [1:0000], DestBase: A, SrcBase: A
0008e2	b3 00 00 00 20 00	Wait    11, Tc
0008e3	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0008e4	43 00 00 00 20 00	Wait    4, Tc
0008e5	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0008e6	43 00 00 00 20 00	Wait    4, Tc
0008e7	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0008e8	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0008e9	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
0008ea	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0008eb	33 00 00 00 20 00	Wait    3, Tc
0008ec	01 71 98 0e 05 00	Copy    [0:30e2] = [1:0287]
0008ed	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0008ee	73 00 00 00 20 00	Wait    7, Tc
0008ef	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0008f0	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0008f1	33 00 00 00 20 00	Wait    3, Tc
0008f2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0008f3	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0008f4	64 8e 00 00 20 00	Branch  0x8e6, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0008f5	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0008f6	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0008f7	83 00 00 00 20 00	Wait    8, Tc
0008f8	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0008f9	80 09 18 00 00 00	Write   [0:0x3013] = 0
0008fa	43 00 00 00 20 00	Wait    4, Tc
0008fb	41 69 80 01 00 00	Copy    [0:00d2] = [1:0000], DestBase: A, SrcBase: A
0008fc	b3 00 00 00 20 00	Wait    11, Tc
0008fd	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0008fe	43 00 00 00 20 00	Wait    4, Tc
0008ff	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000900	43 00 00 00 20 00	Wait    4, Tc
000901	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000902	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000903	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000904	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000905	33 00 00 00 20 00	Wait    3, Tc
000906	01 71 98 80 06 00	Copy    [0:30e2] = [1:0340]
000907	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000908	73 00 00 00 20 00	Wait    7, Tc
000909	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00090a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00090b	33 00 00 00 20 00	Wait    3, Tc
00090c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00090d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00090e	04 90 00 00 20 00	Branch  0x900, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00090f	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000910	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
000911	83 00 00 00 20 00	Wait    8, Tc
000912	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000913	80 09 18 00 00 00	Write   [0:0x3013] = 0
000914	43 00 00 00 20 00	Wait    4, Tc
000915	41 68 80 01 00 00	Copy    [0:00d0] = [1:0000], DestBase: A, SrcBase: A
000916	b3 00 00 00 20 00	Wait    11, Tc
000917	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000918	43 00 00 00 20 00	Wait    4, Tc
000919	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00091a	43 00 00 00 20 00	Wait    4, Tc
00091b	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
00091c	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00091d	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
00091e	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00091f	33 00 00 00 20 00	Wait    3, Tc
000920	01 71 98 f2 07 00	Copy    [0:30e2] = [1:03f9]
000921	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000922	73 00 00 00 20 00	Wait    7, Tc
000923	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
000924	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000925	33 00 00 00 20 00	Wait    3, Tc
000926	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
000927	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000928	a4 91 00 00 20 00	Branch  0x91a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000929	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00092a	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
00092b	83 00 00 00 20 00	Wait    8, Tc
00092c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00092d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00092e	43 00 00 00 20 00	Wait    4, Tc
00092f	c1 68 80 01 00 00	Copy    [0:00d1] = [1:0000], DestBase: A, SrcBase: A
000930	b3 00 00 00 20 00	Wait    11, Tc
000931	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000932	43 00 00 00 20 00	Wait    4, Tc
000933	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000934	43 00 00 00 20 00	Wait    4, Tc
000935	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000936	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000937	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000938	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000939	33 00 00 00 20 00	Wait    3, Tc
00093a	01 71 98 64 09 00	Copy    [0:30e2] = [1:04b2]
00093b	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00093c	73 00 00 00 20 00	Wait    7, Tc
00093d	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00093e	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00093f	33 00 00 00 20 00	Wait    3, Tc
000940	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
000941	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000942	44 93 00 00 20 00	Branch  0x934, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000943	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000944	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
000945	83 00 00 00 20 00	Wait    8, Tc
000946	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000947	80 09 18 00 00 00	Write   [0:0x3013] = 0
000948	43 00 00 00 20 00	Wait    4, Tc
000949	c1 69 80 01 00 00	Copy    [0:00d3] = [1:0000], DestBase: A, SrcBase: A
00094a	b3 00 00 00 20 00	Wait    11, Tc
00094b	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00094c	43 00 00 00 20 00	Wait    4, Tc
00094d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00094e	43 00 00 00 20 00	Wait    4, Tc
00094f	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000950	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000951	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000952	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000953	33 00 00 00 20 00	Wait    3, Tc
000954	01 71 98 d6 0a 00	Copy    [0:30e2] = [1:056b]
000955	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000956	73 00 00 00 20 00	Wait    7, Tc
000957	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
000958	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000959	33 00 00 00 20 00	Wait    3, Tc
00095a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00095b	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00095c	e4 94 00 00 20 00	Branch  0x94e, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00095d	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00095e	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
00095f	83 00 00 00 20 00	Wait    8, Tc
000960	00 09 18 00 40 00	Write   [0:0x3012] = 8000
000961	80 09 18 00 00 00	Write   [0:0x3013] = 0
000962	43 00 00 00 20 00	Wait    4, Tc
000963	c1 69 80 01 00 00	Copy    [0:00d3] = [1:0000], DestBase: A, SrcBase: A
000964	b3 00 00 00 20 00	Wait    11, Tc
000965	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000966	43 00 00 00 20 00	Wait    4, Tc
000967	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_1_[PllIdx == 0]
000968	f4 88 00 00 20 00	Branch  0x88f, [CALL] < Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >		# Else_1_Func_Start
000969	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00096a	14 8a 00 00 20 00	Branch  0x8a1, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int) >
00096b	f4 8b 00 00 20 00	Branch  0x8bf, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
00096c	94 8d 00 00 20 00	Branch  0x8d9, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
00096d	34 8f 00 00 20 00	Branch  0x8f3, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
00096e	d4 90 00 00 20 00	Branch  0x90d, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
00096f	74 92 00 00 20 00	Branch  0x927, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
000970	14 94 00 00 20 00	Branch  0x941, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
000971	b4 95 00 00 20 00	Branch  0x95b, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
000972	04 00 00 00 40 00	Branch  0x0, [RET]


ManualTuneWithIdx
000973	a3 00 00 00 20 00	Wait    10, Tc
000974	01 48 98 5c 00 00	Copy    [0:3090] = [1:002e]		# If_1
000975	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
000976	93 00 00 00 20 00	Wait    9, Tc
000977	02 00 00 01 00 00	Cond    0x00100000

000978	d4 97 00 00 90 00	Branch  0x97d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000979	a4 87 00 00 20 00	Branch  0x87a, [CALL] < __If_1_[PllIdx == 0] >
00097a	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00097b	43 00 00 00 20 00	Wait    4, Tc
00097c	04 98 00 00 00 00	Branch  0x980, [JMP]
00097d	84 96 00 00 20 00	Branch  0x968, [CALL] < __Else_1_[PllIdx == 0] >		# Else_1
00097e	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00097f	43 00 00 00 20 00	Wait    4, Tc
000980	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_1

pll_0 freq = 17920.000000
000981	43 00 00 00 20 00	Wait    4, Tc
000982	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000983	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000984	33 00 00 00 20 00	Wait    3, Tc
000985	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000986	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000987	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000988	43 00 00 00 20 00	Wait    4, Tc
000989	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
00098a	43 00 00 00 20 00	Wait    4, Tc
00098b	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00098c	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00098d	33 00 00 00 20 00	Wait    3, Tc
00098e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00098f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000990	00 08 98 2c 05 00	Write   [0:0x3010] = a59
000991	43 00 00 00 20 00	Wait    4, Tc
000992	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000993	43 00 00 00 20 00	Wait    4, Tc
000994	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000995	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000996	33 00 00 00 20 00	Wait    3, Tc
000997	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000998	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000999	00 08 98 2d 05 00	Write   [0:0x3010] = a5b
00099a	43 00 00 00 20 00	Wait    4, Tc
00099b	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
00099c	43 00 00 00 20 00	Wait    4, Tc
00099d	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00099e	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00099f	33 00 00 00 20 00	Wait    3, Tc
0009a0	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0009a1	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0009a2	00 08 98 2e 05 00	Write   [0:0x3010] = a5d
0009a3	43 00 00 00 20 00	Wait    4, Tc
0009a4	04 00 00 00 40 00	Branch  0x0, [RET]


InlineSwAbs_CallTable_0
0009a5	43 00 00 00 20 00	Wait    4, Tc
0009a6	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]		# InlineSwAbs_CallTable_0_ParentOfIndirect
0009a7	00 71 18 01 00 00	Write   [0:0x30e2] = 2
0009a8	43 00 00 00 20 00	Wait    4, Tc
0009a9	91 81 04 d0 61 00	Copy    [1:0903] = [0:30e8]
0009aa	01 70 18 20 60 00	Copy    [0:30e0] = [0:3010]
0009ab	43 00 00 00 20 00	Wait    4, Tc
0009ac	01 71 98 06 12 00	Copy    [0:30e2] = [1:0903]
0009ad	43 00 00 00 20 00	Wait    4, Tc
0009ae	01 08 18 c8 61 00	Copy    [0:3010] = [0:30e4]
0009af	64 00 00 00 20 00	Branch  0x6, [CALL]
0009b0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)_sub_2
0009b1	43 00 00 00 20 00	Wait    4, Tc
0009b2	91 89 80 18 12 00	Copy    [1:0113] = [1:090c]
0009b3	43 00 00 00 20 00	Wait    4, Tc
0009b4	00 08 18 31 05 00	Write   [0:0x3010] = a62
0009b5	84 89 00 00 20 00	Branch  0x898, [CALL] < mtIoffset_1shiftFieldValue_Func >
0009b6	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0009b7	43 00 00 00 20 00	Wait    4, Tc
0009b8	11 8a 80 01 00 01	Copy    [1:0114] = [SF+0], SrcBase: AI
0009b9	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0009ba	04 78 00 00 20 00	Branch  0x780, [CALL] < ReadModifyWrite_Indirect >
0009bb	00 08 98 27 05 00	Write   [0:0x3010] = a4f
0009bc	43 00 00 00 20 00	Wait    4, Tc
0009bd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)
0009be	43 00 00 00 20 00	Wait    4, Tc
0009bf	00 08 98 2e 05 00	Write   [0:0x3010] = a5d
0009c0	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0009c1	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0009c2	43 00 00 00 20 00	Wait    4, Tc
0009c3	14 9b 00 00 20 00	Branch  0x9b1, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)_sub_2 >
0009c4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)_sub_3
0009c5	43 00 00 00 20 00	Wait    4, Tc
0009c6	91 89 80 1c 12 00	Copy    [1:0113] = [1:090e]
0009c7	43 00 00 00 20 00	Wait    4, Tc
0009c8	00 08 18 35 05 00	Write   [0:0x3010] = a6a
0009c9	84 89 00 00 20 00	Branch  0x898, [CALL] < mtIoffset_1shiftFieldValue_Func >
0009ca	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0009cb	43 00 00 00 20 00	Wait    4, Tc
0009cc	11 8a 80 01 00 01	Copy    [1:0114] = [SF+0], SrcBase: AI
0009cd	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0009ce	04 78 00 00 20 00	Branch  0x780, [CALL] < ReadModifyWrite_Indirect >
0009cf	00 08 98 27 05 00	Write   [0:0x3010] = a4f
0009d0	43 00 00 00 20 00	Wait    4, Tc
0009d1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)
0009d2	43 00 00 00 20 00	Wait    4, Tc
0009d3	00 08 98 32 05 00	Write   [0:0x3010] = a65
0009d4	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0009d5	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0009d6	43 00 00 00 20 00	Wait    4, Tc
0009d7	54 9c 00 00 20 00	Branch  0x9c5, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)_sub_3 >
0009d8	04 00 00 00 40 00	Branch  0x0, [RET]


__If_2_[currPll == 0]
0009d9	00 08 18 27 05 00	Write   [0:0x3010] = a4e		# If_2_Func_Start
0009da	e4 9b 00 00 20 00	Branch  0x9be, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int) >
0009db	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0009dc	24 9d 00 00 20 00	Branch  0x9d2, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int) >
0009dd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)
0009de	43 00 00 00 20 00	Wait    4, Tc
0009df	00 08 98 36 05 00	Write   [0:0x3010] = a6d
0009e0	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0009e1	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0009e2	43 00 00 00 20 00	Wait    4, Tc
0009e3	14 9b 00 00 20 00	Branch  0x9b1, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)_sub_2 >
0009e4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)
0009e5	43 00 00 00 20 00	Wait    4, Tc
0009e6	00 08 18 39 05 00	Write   [0:0x3010] = a72
0009e7	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0009e8	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0009e9	43 00 00 00 20 00	Wait    4, Tc
0009ea	54 9c 00 00 20 00	Branch  0x9c5, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int)_sub_3 >
0009eb	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_2_[currPll == 0]
0009ec	00 08 18 27 05 00	Write   [0:0x3010] = a4e		# Else_2_Func_Start
0009ed	e4 9d 00 00 20 00	Branch  0x9de, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int) >
0009ee	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0009ef	54 9e 00 00 20 00	Branch  0x9e5, [CALL] < Vayyar::ReadModifyWrite::RfWriteFieldFromParam(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,class ILParamShort &,unsigned int) >
0009f0	04 00 00 00 40 00	Branch  0x0, [RET]


__If_3_[currPll == 0]
0009f1	00 08 18 00 40 00	Write   [0:0x3010] = 8000		# If_3_Func_Start
0009f2	80 08 18 00 00 00	Write   [0:0x3011] = 0
0009f3	43 00 00 00 20 00	Wait    4, Tc
0009f4	91 8a 04 8f 00 00	Copy    [1:0915] = [0:0047], SrcBase: A
0009f5	00 08 98 27 05 00	Write   [0:0x3010] = a4f
0009f6	80 08 18 00 00 00	Write   [0:0x3011] = 0
0009f7	43 00 00 00 20 00	Wait    4, Tc
0009f8	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_3_[currPll == 0]
0009f9	00 08 18 00 40 00	Write   [0:0x3010] = 8000		# Else_3_Func_Start
0009fa	80 08 18 00 00 00	Write   [0:0x3011] = 0
0009fb	43 00 00 00 20 00	Wait    4, Tc
0009fc	91 8a 04 2f 01 00	Copy    [1:0915] = [0:0097], SrcBase: A
0009fd	00 08 98 27 05 00	Write   [0:0x3010] = a4f
0009fe	80 08 18 00 00 00	Write   [0:0x3011] = 0
0009ff	43 00 00 00 20 00	Wait    4, Tc
000a00	04 00 00 00 40 00	Branch  0x0, [RET]


__If_4_Retry_vTuneInRange
000a01	43 00 00 00 20 00	Wait    4, Tc
000a02	01 48 98 24 12 00	Copy    [0:3090] = [1:0912]		# If_4_Func_Start
000a03	81 48 98 01 00 01	Copy    [0:3091] = [SF+0], SrcBase: AI
000a04	93 00 00 00 20 00	Wait    9, Tc
000a05	11 89 04 20 61 00	Copy    [1:0912] = [0:3090]
000a06	53 00 00 00 20 00	Wait    5, Tc
000a07	06 00 00 00 00 00	Nop     		# Else_4_Func_Start
000a08	04 00 00 00 40 00	Branch  0x0, [RET]


__If_5_Retry_vTuneTooHigh
000a09	43 00 00 00 20 00	Wait    4, Tc
000a0a	01 48 98 20 12 00	Copy    [0:3090] = [1:0910]		# If_5_Func_Start
000a0b	81 48 98 01 00 01	Copy    [0:3091] = [SF+0], SrcBase: AI
000a0c	93 00 00 00 20 00	Wait    9, Tc
000a0d	11 88 04 20 61 00	Copy    [1:0910] = [0:3090]
000a0e	53 00 00 00 20 00	Wait    5, Tc
000a0f	06 00 00 00 00 00	Nop     		# Else_5_Func_Start
000a10	04 00 00 00 40 00	Branch  0x0, [RET]


__If_6_Retry_vTuneTooLow
000a11	43 00 00 00 20 00	Wait    4, Tc
000a12	01 48 98 22 12 00	Copy    [0:3090] = [1:0911]		# If_6_Func_Start
000a13	81 48 98 01 00 01	Copy    [0:3091] = [SF+0], SrcBase: AI
000a14	93 00 00 00 20 00	Wait    9, Tc
000a15	91 88 04 20 61 00	Copy    [1:0911] = [0:3090]
000a16	53 00 00 00 20 00	Wait    5, Tc
000a17	06 00 00 00 00 00	Nop     		# Else_6_Func_Start
000a18	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_LockRetries
000a19	11 8a 04 20 60 00	Copy    [1:0914] = [0:3010]		# While_3_Func_Start
000a1a	53 00 00 00 20 00	Wait    5, Tc
000a1b	01 08 98 28 12 00	Copy    [0:3010] = [1:0914]		# While_3
000a1c	01 4c 98 26 12 00	Copy    [0:3098] = [1:0913]
000a1d	33 00 00 00 20 00	Wait    3, Tc
000a1e	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000a1f	33 00 00 00 20 00	Wait    3, Tc
000a20	00 4d 98 04 00 00	Write   [0:0x309a] = 9
000a21	53 00 00 00 20 00	Wait    5, Tc
000a22	02 00 08 00 00 00	Cond    0x00008000

000a23	04 a5 00 00 10 00	Branch  0xa50, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a24	53 00 00 00 20 00	Wait    5, Tc		# If_3
000a25	01 48 98 08 12 00	Copy    [0:3090] = [1:0904]
000a26	00 49 18 00 00 00	Write   [0:0x3092] = 0
000a27	53 00 00 00 20 00	Wait    5, Tc
000a28	02 00 00 01 00 00	Cond    0x00100000

000a29	c4 a2 00 00 90 00	Branch  0xa2c, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a2a	14 9f 00 00 20 00	Branch  0x9f1, [CALL] < __If_3_[currPll == 0] >
000a2b	d4 a2 00 00 00 00	Branch  0xa2d, [JMP]
000a2c	94 9f 00 00 20 00	Branch  0x9f9, [CALL] < __Else_3_[currPll == 0] >		# Else_3
000a2d	63 06 00 00 20 00	Wait    102, Tc		# EndIf_3
000a2e	91 8a 04 68 02 00	Copy    [1:0915] = [0:0134]
000a2f	53 00 00 00 20 00	Wait    5, Tc		# If_4
000a30	01 48 98 2a 12 00	Copy    [0:3090] = [1:0915]
000a31	00 49 98 0c 00 00	Write   [0:0x3092] = 19
000a32	53 00 00 00 20 00	Wait    5, Tc
000a33	02 00 00 01 00 00	Cond    0x00100000

000a34	84 a3 00 00 90 00	Branch  0xa38, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a35	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000a36	14 a0 00 00 20 00	Branch  0xa01, [CALL] < __If_4_Retry_vTuneInRange >
000a37	84 a3 00 00 00 00	Branch  0xa38, [JMP]
000a38	53 00 00 00 20 00	Wait    5, Tc		# Else_4
000a39	01 48 98 2a 12 00	Copy    [0:3090] = [1:0915]
000a3a	00 49 98 0d 00 00	Write   [0:0x3092] = 1b
000a3b	53 00 00 00 20 00	Wait    5, Tc
000a3c	02 00 00 01 00 00	Cond    0x00100000

000a3d	14 a4 00 00 90 00	Branch  0xa41, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a3e	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000a3f	94 a0 00 00 20 00	Branch  0xa09, [CALL] < __If_5_Retry_vTuneTooHigh >
000a40	14 a4 00 00 00 00	Branch  0xa41, [JMP]
000a41	53 00 00 00 20 00	Wait    5, Tc		# Else_5
000a42	01 48 98 2a 12 00	Copy    [0:3090] = [1:0915]
000a43	00 49 98 0e 00 00	Write   [0:0x3092] = 1d
000a44	53 00 00 00 20 00	Wait    5, Tc
000a45	02 00 00 01 00 00	Cond    0x00100000

000a46	a4 a4 00 00 90 00	Branch  0xa4a, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a47	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000a48	14 a1 00 00 20 00	Branch  0xa11, [CALL] < __If_6_Retry_vTuneTooLow >
000a49	a4 a4 00 00 00 00	Branch  0xa4a, [JMP]
000a4a	01 48 98 26 12 00	Copy    [0:3090] = [1:0913]		# Else_6
000a4b	80 48 98 00 00 00	Write   [0:0x3091] = 1
000a4c	53 00 00 00 20 00	Wait    5, Tc
000a4d	91 89 04 20 61 00	Copy    [1:0913] = [0:3090]
000a4e	53 00 00 00 20 00	Wait    5, Tc
000a4f	b4 a1 00 00 00 00	Branch  0xa1b, [JMP]
000a50	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_3

__If_7_Majority_vTuneInRange
000a51	43 00 00 00 20 00	Wait    4, Tc
000a52	91 85 84 01 00 01	Copy    [1:090b] = [SF+0], SrcBase: AI		# If_7_Func_Start
000a53	06 00 00 00 00 00	Nop     		# Else_7_Func_Start
000a54	04 00 00 00 40 00	Branch  0x0, [RET]


__If_10_[lockStatus == SEARCHING]
000a55	90 85 04 00 00 00	Write   [1:0x090b] = 0		# If_10_Func_Start
000a56	01 4c 98 22 12 00	Copy    [0:3098] = [1:0911]		# If_11
000a57	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000a58	33 00 00 00 20 00	Wait    3, Tc
000a59	01 4d 98 20 12 00	Copy    [0:309a] = [1:0910]
000a5a	53 00 00 00 20 00	Wait    5, Tc
000a5b	02 00 08 00 00 00	Cond    0x00008000

000a5c	04 a6 00 00 90 00	Branch  0xa60, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a5d	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000a5e	14 a5 00 00 20 00	Branch  0xa51, [CALL] < __If_7_Majority_vTuneInRange >
000a5f	04 a6 00 00 00 00	Branch  0xa60, [JMP]
000a60	01 4c 98 20 12 00	Copy    [0:3098] = [1:0910]		# Else_11
000a61	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000a62	33 00 00 00 20 00	Wait    3, Tc
000a63	01 4d 98 22 12 00	Copy    [0:309a] = [1:0911]
000a64	53 00 00 00 20 00	Wait    5, Tc
000a65	02 00 08 00 00 00	Cond    0x00008000

000a66	a4 a6 00 00 90 00	Branch  0xa6a, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a67	00 08 18 3c 05 00	Write   [0:0x3010] = a78
000a68	14 a5 00 00 20 00	Branch  0xa51, [CALL] < __If_7_Majority_vTuneInRange >
000a69	a4 a6 00 00 00 00	Branch  0xa6a, [JMP]
000a6a	06 00 00 00 00 00	Nop     		# Else_12
000a6b	04 00 00 00 40 00	Branch  0x0, [RET]


CheckLock
000a6c	53 00 00 00 20 00	Wait    5, Tc		# If_2
000a6d	01 48 98 08 12 00	Copy    [0:3090] = [1:0904]
000a6e	00 49 18 00 00 00	Write   [0:0x3092] = 0
000a6f	53 00 00 00 20 00	Wait    5, Tc
000a70	02 00 00 01 00 00	Cond    0x00100000

000a71	44 a7 00 00 90 00	Branch  0xa74, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a72	94 9d 00 00 20 00	Branch  0x9d9, [CALL] < __If_2_[currPll == 0] >
000a73	54 a7 00 00 00 00	Branch  0xa75, [JMP]
000a74	c4 9e 00 00 20 00	Branch  0x9ec, [CALL] < __Else_2_[currPll == 0] >		# Else_2
000a75	03 64 00 00 20 00	Wait    1600, Tc		# EndIf_2
000a76	10 88 04 00 00 00	Write   [1:0x0910] = 0
000a77	90 88 04 00 00 00	Write   [1:0x0911] = 0
000a78	10 89 04 00 00 00	Write   [1:0x0912] = 0
000a79	90 89 04 00 00 00	Write   [1:0x0913] = 0
000a7a	94 a1 00 00 20 00	Branch  0xa19, [CALL] < _Loop_LockRetries >
000a7b	01 4c 98 24 12 00	Copy    [0:3098] = [1:0912]		# If_7
000a7c	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000a7d	33 00 00 00 20 00	Wait    3, Tc
000a7e	00 4d 98 02 00 00	Write   [0:0x309a] = 5
000a7f	53 00 00 00 20 00	Wait    5, Tc
000a80	02 00 08 00 00 00	Cond    0x00008000

000a81	54 a8 00 00 90 00	Branch  0xa85, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a82	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000a83	14 a5 00 00 20 00	Branch  0xa51, [CALL] < __If_7_Majority_vTuneInRange >
000a84	54 a8 00 00 00 00	Branch  0xa85, [JMP]
000a85	01 4c 98 20 12 00	Copy    [0:3098] = [1:0910]		# Else_7
000a86	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000a87	33 00 00 00 20 00	Wait    3, Tc
000a88	00 4d 98 02 00 00	Write   [0:0x309a] = 5
000a89	53 00 00 00 20 00	Wait    5, Tc
000a8a	02 00 08 00 00 00	Cond    0x00008000

000a8b	f4 a8 00 00 90 00	Branch  0xa8f, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a8c	00 08 18 3c 05 00	Write   [0:0x3010] = a78
000a8d	14 a5 00 00 20 00	Branch  0xa51, [CALL] < __If_7_Majority_vTuneInRange >
000a8e	f4 a8 00 00 00 00	Branch  0xa8f, [JMP]
000a8f	01 4c 98 22 12 00	Copy    [0:3098] = [1:0911]		# Else_8
000a90	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000a91	33 00 00 00 20 00	Wait    3, Tc
000a92	00 4d 98 02 00 00	Write   [0:0x309a] = 5
000a93	53 00 00 00 20 00	Wait    5, Tc
000a94	02 00 08 00 00 00	Cond    0x00008000

000a95	94 a9 00 00 90 00	Branch  0xa99, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a96	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000a97	14 a5 00 00 20 00	Branch  0xa51, [CALL] < __If_7_Majority_vTuneInRange >
000a98	94 a9 00 00 00 00	Branch  0xa99, [JMP]
000a99	53 00 00 00 20 00	Wait    5, Tc		# Else_9
000a9a	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]
000a9b	00 49 18 02 00 00	Write   [0:0x3092] = 4
000a9c	53 00 00 00 20 00	Wait    5, Tc
000a9d	02 00 00 01 00 00	Cond    0x00100000

000a9e	14 aa 00 00 90 00	Branch  0xaa1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000a9f	54 a5 00 00 20 00	Branch  0xa55, [CALL] < __If_10_[lockStatus == SEARCHING] >
000aa0	14 aa 00 00 00 00	Branch  0xaa1, [JMP]
000aa1	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_10

__If_13_SearchVcoDone
000aa2	43 00 00 00 20 00	Wait    4, Tc
000aa3	11 85 84 01 00 01	Copy    [1:090a] = [SF+0], SrcBase: AI		# If_13_Func_Start
000aa4	04 00 00 00 40 00	Branch  0x0, [RET]


__If_14_Locked
000aa5	43 00 00 00 20 00	Wait    4, Tc
000aa6	11 85 84 01 00 01	Copy    [1:090a] = [SF+0], SrcBase: AI		# If_14_Func_Start
000aa7	43 00 00 00 20 00	Wait    4, Tc
000aa8	11 8b 84 18 12 00	Copy    [1:0916] = [1:090c]
000aa9	43 00 00 00 20 00	Wait    4, Tc
000aaa	06 00 00 00 00 00	Nop     		# Else_14_Func_Start
000aab	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short)
000aac	43 00 00 00 20 00	Wait    4, Tc
000aad	81 74 98 01 00 01	Copy    [0:30e9] = [SF+0], SrcBase: AI
000aae	01 70 98 1a 12 00	Copy    [0:30e0] = [1:090d]
000aaf	33 00 00 00 20 00	Wait    3, Tc
000ab0	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000ab1	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
000ab2	33 00 00 00 20 00	Wait    3, Tc
000ab3	81 71 98 01 00 01	Copy    [0:30e3] = [SF+3], SrcBase: AI
000ab4	33 00 00 00 20 00	Wait    3, Tc
000ab5	91 86 04 d2 61 00	Copy    [1:090d] = [0:30e9]
000ab6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000ab7	43 00 00 00 20 00	Wait    4, Tc
000ab8	01 70 98 1a 12 00	Copy    [0:30e0] = [1:090d]
000ab9	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000aba	01 70 98 1a 12 00	Copy    [0:30e0] = [1:090d]
000abb	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000abc	33 00 00 00 20 00	Wait    3, Tc
000abd	01 71 98 18 12 00	Copy    [0:30e2] = [1:090c]
000abe	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000abf	73 00 00 00 20 00	Wait    7, Tc
000ac0	11 86 04 c8 61 00	Copy    [1:090c] = [0:30e4]
000ac1	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000ac2	33 00 00 00 20 00	Wait    3, Tc
000ac3	04 00 00 00 40 00	Branch  0x0, [RET]


__If_15_AboveThreshold
000ac4	43 00 00 00 20 00	Wait    4, Tc		# If_15_Func_Start
000ac5	11 8b 84 18 12 00	Copy    [1:0916] = [1:090c]
000ac6	43 00 00 00 20 00	Wait    4, Tc
000ac7	00 08 98 3c 05 00	Write   [0:0x3010] = a79
000ac8	c4 aa 00 00 20 00	Branch  0xaac, [CALL] < Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short) >
000ac9	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000aca	74 ab 00 00 20 00	Branch  0xab7, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000acb	06 00 00 00 00 00	Nop     		# Else_15_Func_Start
000acc	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShort(const class IILParam &,const class IILParam &,const class IILParam &)
000acd	43 00 00 00 20 00	Wait    4, Tc
000ace	01 71 98 1a 12 00	Copy    [0:30e2] = [1:090d]
000acf	01 70 98 18 12 00	Copy    [0:30e0] = [1:090c]
000ad0	33 00 00 00 20 00	Wait    3, Tc
000ad1	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
000ad2	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
000ad3	73 00 00 00 20 00	Wait    7, Tc
000ad4	11 86 04 cc 61 00	Copy    [1:090c] = [0:30e6]
000ad5	04 00 00 00 40 00	Branch  0x0, [RET]


__If_16_BelowThreshold
000ad6	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0		# If_16_Func_Start
000ad7	d4 ac 00 00 20 00	Branch  0xacd, [CALL] < Vayyar::SequencerMath::SubShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000ad8	00 08 98 3c 05 00	Write   [0:0x3010] = a79
000ad9	c4 aa 00 00 20 00	Branch  0xaac, [CALL] < Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short) >
000ada	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000adb	74 ab 00 00 20 00	Branch  0xab7, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000adc	06 00 00 00 00 00	Nop     		# Else_16_Func_Start
000add	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_13_SearchVcoDone
000ade	53 00 00 00 20 00	Wait    5, Tc		# Else_13_Func_Start
000adf	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]
000ae0	00 49 18 00 00 00	Write   [0:0x3092] = 0
000ae1	53 00 00 00 20 00	Wait    5, Tc
000ae2	02 00 00 01 00 00	Cond    0x00100000

000ae3	74 ae 00 00 90 00	Branch  0xae7, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000ae4	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000ae5	54 aa 00 00 20 00	Branch  0xaa5, [CALL] < __If_14_Locked >
000ae6	74 ae 00 00 00 00	Branch  0xae7, [JMP]
000ae7	53 00 00 00 20 00	Wait    5, Tc		# Else_14
000ae8	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]
000ae9	00 49 18 01 00 00	Write   [0:0x3092] = 2
000aea	53 00 00 00 20 00	Wait    5, Tc
000aeb	02 00 00 01 00 00	Cond    0x00100000

000aec	f4 ae 00 00 90 00	Branch  0xaef, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000aed	44 ac 00 00 20 00	Branch  0xac4, [CALL] < __If_15_AboveThreshold >
000aee	f4 ae 00 00 00 00	Branch  0xaef, [JMP]
000aef	53 00 00 00 20 00	Wait    5, Tc		# Else_15
000af0	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]
000af1	00 49 98 00 00 00	Write   [0:0x3092] = 1
000af2	53 00 00 00 20 00	Wait    5, Tc
000af3	02 00 00 01 00 00	Cond    0x00100000

000af4	74 af 00 00 90 00	Branch  0xaf7, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000af5	64 ad 00 00 20 00	Branch  0xad6, [CALL] < __If_16_BelowThreshold >
000af6	74 af 00 00 00 00	Branch  0xaf7, [JMP]
000af7	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_16

_Loop_SearchVco
000af8	43 00 00 00 20 00	Wait    4, Tc
000af9	91 87 04 20 60 00	Copy    [1:090f] = [0:3010]		# While_2_Func_Start
000afa	53 00 00 00 20 00	Wait    5, Tc
000afb	01 08 98 1e 12 00	Copy    [0:3010] = [1:090f]		# While_2
000afc	53 00 00 00 20 00	Wait    5, Tc
000afd	01 48 98 14 12 00	Copy    [0:3090] = [1:090a]
000afe	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
000aff	93 00 00 00 20 00	Wait    9, Tc
000b00	02 00 00 01 00 00	Cond    0x00100000

000b01	34 b1 00 00 90 00	Branch  0xb13, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000b02	c4 a6 00 00 20 00	Branch  0xa6c, [CALL] < CheckLock >
000b03	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000b04	a3 00 00 00 20 00	Wait    10, Tc
000b05	01 48 98 1a 12 00	Copy    [0:3090] = [1:090d]		# If_13
000b06	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
000b07	93 00 00 00 20 00	Wait    9, Tc
000b08	02 00 00 01 00 00	Cond    0x00100000

000b09	f4 b0 00 00 90 00	Branch  0xb0f, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000b0a	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000b0b	24 aa 00 00 20 00	Branch  0xaa2, [CALL] < __If_13_SearchVcoDone >
000b0c	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000b0d	43 00 00 00 20 00	Wait    4, Tc
000b0e	24 b1 00 00 00 00	Branch  0xb12, [JMP]
000b0f	e4 ad 00 00 20 00	Branch  0xade, [CALL] < __Else_13_SearchVcoDone >		# Else_13
000b10	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000b11	43 00 00 00 20 00	Wait    4, Tc
000b12	b4 af 00 00 00 00	Branch  0xafb, [JMP]		# EndIf_13
000b13	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_2

SearchVco
000b14	10 85 04 00 00 00	Write   [1:0x090a] = 0
000b15	90 85 04 02 00 00	Write   [1:0x090b] = 4
000b16	10 86 04 02 00 00	Write   [1:0x090c] = 4
000b17	90 86 04 02 00 00	Write   [1:0x090d] = 4
000b18	10 87 04 1d 00 00	Write   [1:0x090e] = 3a
000b19	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000b1a	84 af 00 00 20 00	Branch  0xaf8, [CALL] < _Loop_SearchVco >
000b1b	04 00 00 00 40 00	Branch  0x0, [RET]


__If_17_SearchCapDone
000b1c	43 00 00 00 20 00	Wait    4, Tc
000b1d	11 8c 84 01 00 01	Copy    [1:0918] = [SF+0], SrcBase: AI		# If_17_Func_Start
000b1e	04 00 00 00 40 00	Branch  0x0, [RET]


__If_18_Locked
000b1f	43 00 00 00 20 00	Wait    4, Tc
000b20	11 8c 84 01 00 01	Copy    [1:0918] = [SF+0], SrcBase: AI		# If_18_Func_Start
000b21	06 00 00 00 00 00	Nop     		# Else_18_Func_Start
000b22	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short)
000b23	43 00 00 00 20 00	Wait    4, Tc
000b24	81 74 98 01 00 01	Copy    [0:30e9] = [SF+0], SrcBase: AI
000b25	01 70 98 2e 12 00	Copy    [0:30e0] = [1:0917]
000b26	33 00 00 00 20 00	Wait    3, Tc
000b27	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000b28	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
000b29	33 00 00 00 20 00	Wait    3, Tc
000b2a	81 71 98 01 00 01	Copy    [0:30e3] = [SF+3], SrcBase: AI
000b2b	33 00 00 00 20 00	Wait    3, Tc
000b2c	91 8b 04 d2 61 00	Copy    [1:0917] = [0:30e9]
000b2d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000b2e	43 00 00 00 20 00	Wait    4, Tc
000b2f	01 70 98 2e 12 00	Copy    [0:30e0] = [1:0917]
000b30	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000b31	01 70 98 2e 12 00	Copy    [0:30e0] = [1:0917]
000b32	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000b33	33 00 00 00 20 00	Wait    3, Tc
000b34	01 71 98 1c 12 00	Copy    [0:30e2] = [1:090e]
000b35	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000b36	73 00 00 00 20 00	Wait    7, Tc
000b37	11 87 04 c8 61 00	Copy    [1:090e] = [0:30e4]
000b38	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000b39	33 00 00 00 20 00	Wait    3, Tc
000b3a	04 00 00 00 40 00	Branch  0x0, [RET]


__If_19_BelowThreshold
000b3b	00 08 98 3c 05 00	Write   [0:0x3010] = a79		# If_19_Func_Start
000b3c	34 b2 00 00 20 00	Branch  0xb23, [CALL] < Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short) >
000b3d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000b3e	e4 b2 00 00 20 00	Branch  0xb2e, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000b3f	06 00 00 00 00 00	Nop     		# Else_19_Func_Start
000b40	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShort(const class IILParam &,const class IILParam &,const class IILParam &)
000b41	43 00 00 00 20 00	Wait    4, Tc
000b42	01 71 98 2e 12 00	Copy    [0:30e2] = [1:0917]
000b43	01 70 98 1c 12 00	Copy    [0:30e0] = [1:090e]
000b44	33 00 00 00 20 00	Wait    3, Tc
000b45	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
000b46	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
000b47	73 00 00 00 20 00	Wait    7, Tc
000b48	11 87 04 cc 61 00	Copy    [1:090e] = [0:30e6]
000b49	04 00 00 00 40 00	Branch  0x0, [RET]


__If_20_AboveThreshold
000b4a	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0		# If_20_Func_Start
000b4b	14 b4 00 00 20 00	Branch  0xb41, [CALL] < Vayyar::SequencerMath::SubShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000b4c	00 08 98 3c 05 00	Write   [0:0x3010] = a79
000b4d	34 b2 00 00 20 00	Branch  0xb23, [CALL] < Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short) >
000b4e	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000b4f	e4 b2 00 00 20 00	Branch  0xb2e, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000b50	06 00 00 00 00 00	Nop     		# Else_20_Func_Start
000b51	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_17_SearchCapDone
000b52	53 00 00 00 20 00	Wait    5, Tc		# Else_17_Func_Start
000b53	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]
000b54	00 49 18 00 00 00	Write   [0:0x3092] = 0
000b55	53 00 00 00 20 00	Wait    5, Tc
000b56	02 00 00 01 00 00	Cond    0x00100000

000b57	b4 b5 00 00 90 00	Branch  0xb5b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000b58	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000b59	f4 b1 00 00 20 00	Branch  0xb1f, [CALL] < __If_18_Locked >
000b5a	b4 b5 00 00 00 00	Branch  0xb5b, [JMP]
000b5b	53 00 00 00 20 00	Wait    5, Tc		# Else_18
000b5c	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]
000b5d	00 49 98 00 00 00	Write   [0:0x3092] = 1
000b5e	53 00 00 00 20 00	Wait    5, Tc
000b5f	02 00 00 01 00 00	Cond    0x00100000

000b60	34 b6 00 00 90 00	Branch  0xb63, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000b61	b4 b3 00 00 20 00	Branch  0xb3b, [CALL] < __If_19_BelowThreshold >
000b62	34 b6 00 00 00 00	Branch  0xb63, [JMP]
000b63	53 00 00 00 20 00	Wait    5, Tc		# Else_19
000b64	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]
000b65	00 49 18 01 00 00	Write   [0:0x3092] = 2
000b66	53 00 00 00 20 00	Wait    5, Tc
000b67	02 00 00 01 00 00	Cond    0x00100000

000b68	b4 b6 00 00 90 00	Branch  0xb6b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000b69	a4 b4 00 00 20 00	Branch  0xb4a, [CALL] < __If_20_AboveThreshold >
000b6a	b4 b6 00 00 00 00	Branch  0xb6b, [JMP]
000b6b	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_20

_Loop_SearchCap
000b6c	43 00 00 00 20 00	Wait    4, Tc
000b6d	91 8c 04 20 60 00	Copy    [1:0919] = [0:3010]		# While_4_Func_Start
000b6e	53 00 00 00 20 00	Wait    5, Tc
000b6f	01 08 98 32 12 00	Copy    [0:3010] = [1:0919]		# While_4
000b70	53 00 00 00 20 00	Wait    5, Tc
000b71	01 48 98 30 12 00	Copy    [0:3090] = [1:0918]
000b72	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
000b73	93 00 00 00 20 00	Wait    9, Tc
000b74	02 00 00 01 00 00	Cond    0x00100000

000b75	74 b8 00 00 90 00	Branch  0xb87, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000b76	c4 a6 00 00 20 00	Branch  0xa6c, [CALL] < CheckLock >
000b77	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
000b78	a3 00 00 00 20 00	Wait    10, Tc
000b79	01 48 98 2e 12 00	Copy    [0:3090] = [1:0917]		# If_17
000b7a	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
000b7b	93 00 00 00 20 00	Wait    9, Tc
000b7c	02 00 00 01 00 00	Cond    0x00100000

000b7d	34 b8 00 00 90 00	Branch  0xb83, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000b7e	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000b7f	c4 b1 00 00 20 00	Branch  0xb1c, [CALL] < __If_17_SearchCapDone >
000b80	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000b81	43 00 00 00 20 00	Wait    4, Tc
000b82	64 b8 00 00 00 00	Branch  0xb86, [JMP]
000b83	24 b5 00 00 20 00	Branch  0xb52, [CALL] < __Else_17_SearchCapDone >		# Else_17
000b84	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000b85	43 00 00 00 20 00	Wait    4, Tc
000b86	f4 b6 00 00 00 00	Branch  0xb6f, [JMP]		# EndIf_17
000b87	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_4

SearchCap
000b88	10 87 04 10 00 00	Write   [1:0x090e] = 20
000b89	90 8b 04 10 00 00	Write   [1:0x0917] = 20
000b8a	10 8c 04 00 00 00	Write   [1:0x0918] = 0
000b8b	90 85 04 02 00 00	Write   [1:0x090b] = 4
000b8c	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000b8d	c4 b6 00 00 20 00	Branch  0xb6c, [CALL] < _Loop_SearchCap >
000b8e	04 00 00 00 40 00	Branch  0x0, [RET]


__If_21
000b8f	43 00 00 00 20 00	Wait    4, Tc		# If_21_Func_Start
000b90	11 86 84 2c 12 00	Copy    [1:090c] = [1:0916]
000b91	43 00 00 00 20 00	Wait    4, Tc
000b92	84 b8 00 00 20 00	Branch  0xb88, [CALL] < SearchCap >
000b93	06 00 00 00 00 00	Nop     		# Else_21_Func_Start
000b94	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)
000b95	01 71 98 1c 12 00	Copy    [0:30e2] = [1:090e]
000b96	80 71 18 00 00 00	Write   [0:0x30e3] = 0
000b97	00 70 98 02 00 00	Write   [0:0x30e0] = 5
000b98	80 70 18 00 00 00	Write   [0:0x30e1] = 0
000b99	33 00 00 00 20 00	Wait    3, Tc
000b9a	11 87 04 c8 61 00	Copy    [1:090e] = [0:30e4]
000b9b	04 00 00 00 40 00	Branch  0x0, [RET]


__If_22_[currCap > 63]
000b9c	10 87 84 1f 00 00	Write   [1:0x090e] = 3f		# If_22_Func_Start
000b9d	06 00 00 00 00 00	Nop     		# Else_22_Func_Start
000b9e	04 00 00 00 40 00	Branch  0x0, [RET]


__If_24_IsLocked
000b9f	43 00 00 00 20 00	Wait    4, Tc		# If_24_Func_Start
000ba0	11 8d 84 1c 12 00	Copy    [1:091a] = [1:090e]
000ba1	43 00 00 00 20 00	Wait    4, Tc
000ba2	06 00 00 00 00 00	Nop     		# Else_24_Func_Start
000ba3	04 00 00 00 40 00	Branch  0x0, [RET]


__If_23_NoLockedCapYet
000ba4	a3 00 00 00 20 00	Wait    10, Tc
000ba5	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]		# If_23_Func_Start
000ba6	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
000ba7	93 00 00 00 20 00	Wait    9, Tc
000ba8	02 00 00 01 00 00	Cond    0x00100000

000ba9	e4 ba 00 00 90 00	Branch  0xbae, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000baa	f4 b9 00 00 20 00	Branch  0xb9f, [CALL] < __If_24_IsLocked >
000bab	00 08 18 27 05 00	Write   [0:0x3010] = a4e
000bac	43 00 00 00 20 00	Wait    4, Tc
000bad	e4 ba 00 00 00 00	Branch  0xbae, [JMP]
000bae	06 00 00 00 00 00	Nop     		# Else_24
000baf	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short)
000bb0	43 00 00 00 20 00	Wait    4, Tc
000bb1	01 70 98 1c 12 00	Copy    [0:30e0] = [1:090e]
000bb2	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
000bb3	33 00 00 00 20 00	Wait    3, Tc
000bb4	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
000bb5	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
000bb6	73 00 00 00 20 00	Wait    7, Tc
000bb7	11 87 04 cc 61 00	Copy    [1:090e] = [0:30e6]
000bb8	04 00 00 00 40 00	Branch  0x0, [RET]


__If_25_CanDecrementCap
000bb9	00 08 18 31 05 00	Write   [0:0x3010] = a62		# If_25_Func_Start
000bba	04 bb 00 00 20 00	Branch  0xbb0, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
000bbb	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_25_CanDecrementCap
000bbc	43 00 00 00 20 00	Wait    4, Tc
000bbd	91 8d 84 01 00 01	Copy    [1:091b] = [SF+0], SrcBase: AI		# Else_25_Func_Start
000bbe	04 00 00 00 40 00	Branch  0x0, [RET]


__If_26_BelowThreshold
000bbf	43 00 00 00 20 00	Wait    4, Tc
000bc0	91 8d 84 01 00 01	Copy    [1:091b] = [SF+0], SrcBase: AI		# If_26_Func_Start
000bc1	06 00 00 00 00 00	Nop     		# Else_26_Func_Start
000bc2	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_CapWindowsSearch
000bc3	11 8e 04 20 60 00	Copy    [1:091c] = [0:3010]		# While_5_Func_Start
000bc4	53 00 00 00 20 00	Wait    5, Tc
000bc5	01 08 98 38 12 00	Copy    [0:3010] = [1:091c]		# While_5
000bc6	53 00 00 00 20 00	Wait    5, Tc
000bc7	01 48 98 36 12 00	Copy    [0:3090] = [1:091b]
000bc8	00 49 18 00 00 00	Write   [0:0x3092] = 0
000bc9	53 00 00 00 20 00	Wait    5, Tc
000bca	02 00 00 01 00 00	Cond    0x00100000

000bcb	b4 be 00 00 90 00	Branch  0xbeb, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000bcc	c4 a6 00 00 20 00	Branch  0xa6c, [CALL] < CheckLock >
000bcd	53 00 00 00 20 00	Wait    5, Tc		# If_23
000bce	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
000bcf	00 49 98 56 6f 00	Write   [0:0x3092] = dead
000bd0	53 00 00 00 20 00	Wait    5, Tc
000bd1	02 00 00 01 00 00	Cond    0x00100000

000bd2	64 bd 00 00 90 00	Branch  0xbd6, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000bd3	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000bd4	44 ba 00 00 20 00	Branch  0xba4, [CALL] < __If_23_NoLockedCapYet >
000bd5	64 bd 00 00 00 00	Branch  0xbd6, [JMP]
000bd6	01 4c 98 1c 12 00	Copy    [0:3098] = [1:090e]		# Else_23
000bd7	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000bd8	33 00 00 00 20 00	Wait    3, Tc
000bd9	00 4d 18 00 00 00	Write   [0:0x309a] = 0
000bda	53 00 00 00 20 00	Wait    5, Tc
000bdb	02 00 08 00 00 00	Cond    0x00008000

000bdc	f4 bd 00 00 90 00	Branch  0xbdf, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000bdd	94 bb 00 00 20 00	Branch  0xbb9, [CALL] < __If_25_CanDecrementCap >
000bde	14 be 00 00 00 00	Branch  0xbe1, [JMP]
000bdf	00 08 98 3b 05 00	Write   [0:0x3010] = a77		# Else_25
000be0	c4 bb 00 00 20 00	Branch  0xbbc, [CALL] < __Else_25_CanDecrementCap >
000be1	53 00 00 00 20 00	Wait    5, Tc		# EndIf_25
000be2	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]
000be3	00 49 98 00 00 00	Write   [0:0x3092] = 1
000be4	53 00 00 00 20 00	Wait    5, Tc
000be5	02 00 00 01 00 00	Cond    0x00100000

000be6	a4 be 00 00 90 00	Branch  0xbea, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000be7	00 08 98 3b 05 00	Write   [0:0x3010] = a77
000be8	f4 bb 00 00 20 00	Branch  0xbbf, [CALL] < __If_26_BelowThreshold >
000be9	a4 be 00 00 00 00	Branch  0xbea, [JMP]
000bea	54 bc 00 00 00 00	Branch  0xbc5, [JMP]		# Else_26
000beb	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_5

class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShort(const class IILParam &,const class IILParam &,const class IILParam &)
000bec	43 00 00 00 20 00	Wait    4, Tc
000bed	01 71 98 1c 12 00	Copy    [0:30e2] = [1:090e]
000bee	01 70 98 3a 12 00	Copy    [0:30e0] = [1:091d]
000bef	33 00 00 00 20 00	Wait    3, Tc
000bf0	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
000bf1	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
000bf2	73 00 00 00 20 00	Wait    7, Tc
000bf3	91 8e 04 cc 61 00	Copy    [1:091d] = [0:30e6]
000bf4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short)
000bf5	43 00 00 00 20 00	Wait    4, Tc
000bf6	81 74 98 01 00 01	Copy    [0:30e9] = [SF+0], SrcBase: AI
000bf7	01 70 98 3a 12 00	Copy    [0:30e0] = [1:091d]
000bf8	33 00 00 00 20 00	Wait    3, Tc
000bf9	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000bfa	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
000bfb	33 00 00 00 20 00	Wait    3, Tc
000bfc	81 71 98 01 00 01	Copy    [0:30e3] = [SF+3], SrcBase: AI
000bfd	33 00 00 00 20 00	Wait    3, Tc
000bfe	91 8e 04 d2 61 00	Copy    [1:091d] = [0:30e9]
000bff	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000c00	43 00 00 00 20 00	Wait    4, Tc
000c01	01 70 98 1c 12 00	Copy    [0:30e0] = [1:090e]
000c02	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000c03	01 70 98 1c 12 00	Copy    [0:30e0] = [1:090e]
000c04	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000c05	33 00 00 00 20 00	Wait    3, Tc
000c06	01 71 98 3a 12 00	Copy    [0:30e2] = [1:091d]
000c07	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000c08	73 00 00 00 20 00	Wait    7, Tc
000c09	91 8e 04 c8 61 00	Copy    [1:091d] = [0:30e4]
000c0a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000c0b	33 00 00 00 20 00	Wait    3, Tc
000c0c	04 00 00 00 40 00	Branch  0x0, [RET]


__If_27_IsLocked
000c0d	43 00 00 00 20 00	Wait    4, Tc		# If_27_Func_Start
000c0e	91 8e 84 34 12 00	Copy    [1:091d] = [1:091a]
000c0f	43 00 00 00 20 00	Wait    4, Tc
000c10	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
000c11	c4 be 00 00 20 00	Branch  0xbec, [CALL] < Vayyar::SequencerMath::SubShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000c12	00 08 98 3c 05 00	Write   [0:0x3010] = a79
000c13	54 bf 00 00 20 00	Branch  0xbf5, [CALL] < Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short) >
000c14	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000c15	04 c0 00 00 20 00	Branch  0xc00, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000c16	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_27_IsLocked
000c17	43 00 00 00 20 00	Wait    4, Tc
000c18	01 48 98 12 12 00	Copy    [0:3090] = [1:0909]		# Else_27_Func_Start
000c19	81 48 98 01 00 01	Copy    [0:3091] = [SF+0], SrcBase: AI
000c1a	93 00 00 00 20 00	Wait    9, Tc
000c1b	91 84 04 20 61 00	Copy    [1:0909] = [0:3090]
000c1c	53 00 00 00 20 00	Wait    5, Tc
000c1d	04 00 00 00 40 00	Branch  0x0, [RET]


OptimizeCap
000c1e	54 b9 00 00 20 00	Branch  0xb95, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
000c1f	01 4c 98 1c 12 00	Copy    [0:3098] = [1:090e]		# If_22
000c20	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000c21	33 00 00 00 20 00	Wait    3, Tc
000c22	00 4d 98 1f 00 00	Write   [0:0x309a] = 3f
000c23	53 00 00 00 20 00	Wait    5, Tc
000c24	02 00 08 00 00 00	Cond    0x00008000

000c25	84 c2 00 00 90 00	Branch  0xc28, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000c26	c4 b9 00 00 20 00	Branch  0xb9c, [CALL] < __If_22_[currCap > 63] >
000c27	84 c2 00 00 00 00	Branch  0xc28, [JMP]
000c28	10 8d 84 56 6f 00	Write   [1:0x091a] = dead		# Else_22
000c29	90 8d 04 00 00 00	Write   [1:0x091b] = 0
000c2a	34 bc 00 00 20 00	Branch  0xbc3, [CALL] < _Loop_CapWindowsSearch >
000c2b	53 00 00 00 20 00	Wait    5, Tc		# If_27
000c2c	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
000c2d	00 49 98 56 6f 00	Write   [0:0x3092] = dead
000c2e	53 00 00 00 20 00	Wait    5, Tc
000c2f	02 00 00 01 00 00	Cond    0x00100000

000c30	34 c3 00 00 10 00	Branch  0xc33, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000c31	d4 c0 00 00 20 00	Branch  0xc0d, [CALL] < __If_27_IsLocked >
000c32	54 c3 00 00 00 00	Branch  0xc35, [JMP]
000c33	00 08 98 3b 05 00	Write   [0:0x3010] = a77		# Else_27
000c34	74 c1 00 00 20 00	Branch  0xc17, [CALL] < __Else_27_IsLocked >
000c35	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_27

FindLock
000c36	43 00 00 00 20 00	Wait    4, Tc
000c37	44 b1 00 00 20 00	Branch  0xb14, [CALL] < SearchVco >
000c38	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000c39	43 00 00 00 20 00	Wait    4, Tc
000c3a	84 b8 00 00 20 00	Branch  0xb88, [CALL] < SearchCap >
000c3b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000c3c	a3 00 00 00 20 00	Wait    10, Tc
000c3d	01 48 98 16 12 00	Copy    [0:3090] = [1:090b]		# If_21
000c3e	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
000c3f	93 00 00 00 20 00	Wait    9, Tc
000c40	02 00 00 01 00 00	Cond    0x00100000

000c41	64 c4 00 00 10 00	Branch  0xc46, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000c42	f4 b8 00 00 20 00	Branch  0xb8f, [CALL] < __If_21 >
000c43	00 08 18 27 05 00	Write   [0:0x3010] = a4e
000c44	43 00 00 00 20 00	Wait    4, Tc
000c45	64 c4 00 00 00 00	Branch  0xc46, [JMP]
000c46	e4 c1 00 00 20 00	Branch  0xc1e, [CALL] < OptimizeCap >		# Else_21
000c47	00 08 18 27 05 00	Write   [0:0x3010] = a4e
000c48	43 00 00 00 20 00	Wait    4, Tc
000c49	04 00 00 00 40 00	Branch  0x0, [RET]


__If_28_NotLocked
000c4a	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# If_28_Func_Start
000c4b	64 c3 00 00 20 00	Branch  0xc36, [CALL] < FindLock >
000c4c	06 00 00 00 00 00	Nop     		# Else_28_Func_Start
000c4d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000c4e	43 00 00 00 20 00	Wait    4, Tc
000c4f	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000c50	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000c51	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000c52	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000c53	33 00 00 00 20 00	Wait    3, Tc
000c54	01 71 98 52 0c 00	Copy    [0:30e2] = [1:0629]
000c55	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000c56	73 00 00 00 20 00	Wait    7, Tc
000c57	11 8f 04 c8 61 00	Copy    [1:091e] = [0:30e4]
000c58	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000c59	33 00 00 00 20 00	Wait    3, Tc
000c5a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &)
000c5b	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000c5c	e4 c4 00 00 20 00	Branch  0xc4e, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000c5d	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
000c5e	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
000c5f	83 00 00 00 20 00	Wait    8, Tc
000c60	51 00 80 18 12 00	Copy    [1:0000] = [1:090c], DestBase: A
000c61	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
000c62	83 00 00 00 20 00	Wait    8, Tc
000c63	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000c64	43 00 00 00 20 00	Wait    4, Tc
000c65	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000c66	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000c67	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
000c68	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
000c69	33 00 00 00 20 00	Wait    3, Tc
000c6a	01 71 98 5c 0c 00	Copy    [0:30e2] = [1:062e]
000c6b	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
000c6c	73 00 00 00 20 00	Wait    7, Tc
000c6d	11 8f 04 c8 61 00	Copy    [1:091e] = [0:30e4]
000c6e	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
000c6f	33 00 00 00 20 00	Wait    3, Tc
000c70	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &)
000c71	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000c72	44 c6 00 00 20 00	Branch  0xc64, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000c73	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
000c74	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
000c75	83 00 00 00 20 00	Wait    8, Tc
000c76	51 00 80 3a 12 00	Copy    [1:0000] = [1:091d], DestBase: A
000c77	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
000c78	83 00 00 00 20 00	Wait    8, Tc
000c79	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,unsigned short)
000c7a	01 71 98 3a 12 00	Copy    [0:30e2] = [1:091d]
000c7b	80 71 18 00 00 00	Write   [0:0x30e3] = 0
000c7c	00 70 18 04 00 00	Write   [0:0x30e0] = 8
000c7d	80 70 18 00 00 00	Write   [0:0x30e1] = 0
000c7e	33 00 00 00 20 00	Wait    3, Tc
000c7f	91 8f 04 d0 61 00	Copy    [1:091f] = [0:30e8]
000c80	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000c81	43 00 00 00 20 00	Wait    4, Tc
000c82	01 70 98 18 12 00	Copy    [0:30e0] = [1:090c]
000c83	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000c84	01 70 98 18 12 00	Copy    [0:30e0] = [1:090c]
000c85	34 11 00 00 20 00	Branch  0x113, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000c86	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
000c87	43 00 00 00 20 00	Wait    4, Tc
000c88	01 70 98 3e 12 00	Copy    [0:30e0] = [1:091f]
000c89	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000c8a	01 70 98 3e 12 00	Copy    [0:30e0] = [1:091f]
000c8b	34 11 00 00 20 00	Branch  0x113, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
000c8c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::UpdateFieldsAndWrite<class ILParamShortPtr,class ILParamShortPtr,class ILParamShort,class ILParamShort>(class ILParamShortPtr,class ILParamShortPtr,class ILParamShort,class ILParamShort)
000c8d	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
000c8e	01 08 98 0a 12 00	Copy    [0:3010] = [1:0905]
000c8f	83 00 00 00 20 00	Wait    8, Tc
000c90	11 11 80 01 00 00	Copy    [1:0022] = [1:0000], SrcBase: A
000c91	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
000c92	83 00 00 00 20 00	Wait    8, Tc
000c93	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000c94	14 c8 00 00 20 00	Branch  0xc81, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000c95	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000c96	74 c8 00 00 20 00	Branch  0xc87, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000c97	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
000c98	01 09 98 0c 12 00	Copy    [0:3012] = [1:0906]
000c99	83 00 00 00 20 00	Wait    8, Tc
000c9a	51 00 80 44 00 00	Copy    [1:0000] = [1:0022], DestBase: A
000c9b	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
000c9c	83 00 00 00 20 00	Wait    8, Tc
000c9d	04 00 00 00 40 00	Branch  0x0, [RET]


__If_31_IsLocked
000c9e	b4 c5 00 00 20 00	Branch  0xc5b, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &) >		# If_31_Func_Start
000c9f	14 c7 00 00 20 00	Branch  0xc71, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &) >
000ca0	a4 c7 00 00 20 00	Branch  0xc7a, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,unsigned short) >
000ca1	d4 c8 00 00 20 00	Branch  0xc8d, [CALL] < Vayyar::ReadModifyWrite::UpdateFieldsAndWrite<class ILParamShortPtr,class ILParamShortPtr,class ILParamShort,class ILParamShort>(class ILParamShortPtr,class ILParamShortPtr,class ILParamShort,class ILParamShort) >
000ca2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)_sub_7
000ca3	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
000ca4	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
000ca5	83 00 00 00 20 00	Wait    8, Tc
000ca6	51 00 80 01 00 01	Copy    [1:0000] = [SF+0], DestBase: A, SrcBase: AI
000ca7	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
000ca8	83 00 00 00 20 00	Wait    8, Tc
000ca9	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)
000caa	43 00 00 00 20 00	Wait    4, Tc
000cab	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000cac	e4 c4 00 00 20 00	Branch  0xc4e, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000cad	00 08 98 3e 05 00	Write   [0:0x3010] = a7d
000cae	43 00 00 00 20 00	Wait    4, Tc
000caf	34 ca 00 00 20 00	Branch  0xca3, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)_sub_7 >
000cb0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)
000cb1	43 00 00 00 20 00	Wait    4, Tc
000cb2	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000cb3	44 c6 00 00 20 00	Branch  0xc64, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
000cb4	00 08 98 3e 05 00	Write   [0:0x3010] = a7d
000cb5	43 00 00 00 20 00	Wait    4, Tc
000cb6	34 ca 00 00 20 00	Branch  0xca3, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)_sub_7 >
000cb7	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_31_IsLocked
000cb8	00 08 98 3e 05 00	Write   [0:0x3010] = a7d		# Else_31_Func_Start
000cb9	a4 ca 00 00 20 00	Branch  0xcaa, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short) >
000cba	00 08 98 3e 05 00	Write   [0:0x3010] = a7d
000cbb	14 cb 00 00 20 00	Branch  0xcb1, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short) >
000cbc	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_LoFrequencies
000cbd	91 83 04 20 60 00	Copy    [1:0907] = [0:3010]		# While_1_Func_Start
000cbe	53 00 00 00 20 00	Wait    5, Tc
000cbf	01 08 98 0e 12 00	Copy    [0:3010] = [1:0907]		# While_1
000cc0	01 4c 98 5e 00 00	Copy    [0:3098] = [1:002f]
000cc1	33 00 00 00 20 00	Wait    3, Tc
000cc2	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
000cc3	33 00 00 00 20 00	Wait    3, Tc
000cc4	00 4d 98 01 00 00	Write   [0:0x309a] = 3
000cc5	53 00 00 00 20 00	Wait    5, Tc
000cc6	02 00 08 00 00 00	Cond    0x00008000

000cc7	f4 cf 00 00 10 00	Branch  0xcff, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000cc8	10 84 04 00 00 00	Write   [1:0x0908] = 0
000cc9	90 84 04 00 00 00	Write   [1:0x0909] = 0
000cca	00 08 18 22 05 00	Write   [0:0x3010] = a44
000ccb	54 9a 00 00 20 00	Branch  0x9a5, [CALL] < InlineSwAbs_CallTable_0 >
000ccc	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000ccd	64 c3 00 00 20 00	Branch  0xc36, [CALL] < FindLock >
000cce	53 00 00 00 20 00	Wait    5, Tc		# If_28
000ccf	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
000cd0	00 49 98 56 6f 00	Write   [0:0x3092] = dead
000cd1	53 00 00 00 20 00	Wait    5, Tc
000cd2	02 00 00 01 00 00	Cond    0x00100000

000cd3	64 cd 00 00 90 00	Branch  0xcd6, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000cd4	a4 c4 00 00 20 00	Branch  0xc4a, [CALL] < __If_28_NotLocked >
000cd5	64 cd 00 00 00 00	Branch  0xcd6, [JMP]
000cd6	53 00 00 00 20 00	Wait    5, Tc		# Else_28
000cd7	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
000cd8	00 49 98 56 6f 00	Write   [0:0x3092] = dead
000cd9	53 00 00 00 20 00	Wait    5, Tc
000cda	02 00 00 01 00 00	Cond    0x00100000

000cdb	e4 cd 00 00 90 00	Branch  0xcde, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000cdc	a4 c4 00 00 20 00	Branch  0xc4a, [CALL] < __If_28_NotLocked >
000cdd	e4 cd 00 00 00 00	Branch  0xcde, [JMP]
000cde	53 00 00 00 20 00	Wait    5, Tc		# Else_29
000cdf	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
000ce0	00 49 98 56 6f 00	Write   [0:0x3092] = dead
000ce1	53 00 00 00 20 00	Wait    5, Tc
000ce2	02 00 00 01 00 00	Cond    0x00100000

000ce3	64 ce 00 00 90 00	Branch  0xce6, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000ce4	a4 c4 00 00 20 00	Branch  0xc4a, [CALL] < __If_28_NotLocked >
000ce5	64 ce 00 00 00 00	Branch  0xce6, [JMP]
000ce6	53 00 00 00 20 00	Wait    5, Tc		# Else_30
000ce7	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
000ce8	00 49 98 56 6f 00	Write   [0:0x3092] = dead
000ce9	53 00 00 00 20 00	Wait    5, Tc
000cea	02 00 00 01 00 00	Cond    0x00100000

000ceb	e4 ce 00 00 10 00	Branch  0xcee, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
000cec	e4 c9 00 00 20 00	Branch  0xc9e, [CALL] < __If_31_IsLocked >
000ced	f4 ce 00 00 00 00	Branch  0xcef, [JMP]
000cee	84 cb 00 00 20 00	Branch  0xcb8, [CALL] < __Else_31_IsLocked >		# Else_31
000cef	01 48 98 0a 12 00	Copy    [0:3090] = [1:0905]		# EndIf_31
000cf0	80 48 98 00 00 00	Write   [0:0x3091] = 1
000cf1	53 00 00 00 20 00	Wait    5, Tc
000cf2	91 82 04 20 61 00	Copy    [1:0905] = [0:3090]
000cf3	53 00 00 00 20 00	Wait    5, Tc
000cf4	01 48 98 0c 12 00	Copy    [0:3090] = [1:0906]
000cf5	80 48 98 00 00 00	Write   [0:0x3091] = 1
000cf6	53 00 00 00 20 00	Wait    5, Tc
000cf7	11 83 04 20 61 00	Copy    [1:0906] = [0:3090]
000cf8	53 00 00 00 20 00	Wait    5, Tc
000cf9	01 48 98 5e 00 00	Copy    [0:3090] = [1:002f]
000cfa	80 48 98 00 00 00	Write   [0:0x3091] = 1
000cfb	53 00 00 00 20 00	Wait    5, Tc
000cfc	91 17 00 20 61 00	Copy    [1:002f] = [0:3090]
000cfd	53 00 00 00 20 00	Wait    5, Tc
000cfe	f4 cb 00 00 00 00	Branch  0xcbf, [JMP]
000cff	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_1

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeLockSweepBlockLib::InlineBuildSweep(unsigned short,class Vayyar::Centipede::ICentipedeAnalogSynthModule *)
000d00	43 00 00 00 20 00	Wait    4, Tc
000d01	11 82 84 01 00 01	Copy    [1:0904] = [SF+0], SrcBase: AI
000d02	43 00 00 00 20 00	Wait    4, Tc
000d03	91 82 84 66 0c 00	Copy    [1:0905] = [1:0633]
000d04	93 00 00 00 20 00	Wait    9, Tc
000d05	11 83 84 6c 00 00	Copy    [1:0906] = [1:0036]
000d06	43 00 00 00 20 00	Wait    4, Tc
000d07	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d08	d4 cb 00 00 20 00	Branch  0xcbd, [CALL] < _Loop_LoFrequencies >
000d09	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
000d0a	43 00 00 00 20 00	Wait    4, Tc
000d0b	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d0c	43 00 00 00 20 00	Wait    4, Tc
000d0d	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d0e	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d0f	33 00 00 00 20 00	Wait    3, Tc
000d10	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d11	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d12	00 08 18 40 05 00	Write   [0:0x3010] = a80
000d13	43 00 00 00 20 00	Wait    4, Tc
000d14	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d15	43 00 00 00 20 00	Wait    4, Tc
000d16	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d17	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d18	33 00 00 00 20 00	Wait    3, Tc
000d19	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d1a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d1b	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
000d1c	43 00 00 00 20 00	Wait    4, Tc
000d1d	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d1e	43 00 00 00 20 00	Wait    4, Tc
000d1f	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d20	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d21	33 00 00 00 20 00	Wait    3, Tc
000d22	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d23	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d24	00 08 98 9d 05 00	Write   [0:0x3010] = b3b
000d25	43 00 00 00 20 00	Wait    4, Tc
000d26	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d27	43 00 00 00 20 00	Wait    4, Tc
000d28	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d29	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d2a	33 00 00 00 20 00	Wait    3, Tc
000d2b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d2c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d2d	00 08 98 9e 05 00	Write   [0:0x3010] = b3d
000d2e	43 00 00 00 20 00	Wait    4, Tc
000d2f	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d30	43 00 00 00 20 00	Wait    4, Tc
000d31	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d32	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d33	33 00 00 00 20 00	Wait    3, Tc
000d34	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d35	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d36	00 08 98 9f 05 00	Write   [0:0x3010] = b3f
000d37	43 00 00 00 20 00	Wait    4, Tc
000d38	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d39	43 00 00 00 20 00	Wait    4, Tc
000d3a	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d3b	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d3c	33 00 00 00 20 00	Wait    3, Tc
000d3d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d3e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d3f	00 08 98 a0 05 00	Write   [0:0x3010] = b41
000d40	43 00 00 00 20 00	Wait    4, Tc
000d41	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d42	43 00 00 00 20 00	Wait    4, Tc
000d43	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d44	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d45	33 00 00 00 20 00	Wait    3, Tc
000d46	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d47	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d48	00 08 98 a1 05 00	Write   [0:0x3010] = b43
000d49	43 00 00 00 20 00	Wait    4, Tc
000d4a	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d4b	43 00 00 00 20 00	Wait    4, Tc
000d4c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d4d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d4e	33 00 00 00 20 00	Wait    3, Tc
000d4f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d50	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d51	00 08 98 a2 05 00	Write   [0:0x3010] = b45
000d52	43 00 00 00 20 00	Wait    4, Tc
000d53	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d54	43 00 00 00 20 00	Wait    4, Tc
000d55	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d56	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d57	33 00 00 00 20 00	Wait    3, Tc
000d58	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d59	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d5a	00 08 98 a3 05 00	Write   [0:0x3010] = b47
000d5b	43 00 00 00 20 00	Wait    4, Tc
000d5c	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d5d	43 00 00 00 20 00	Wait    4, Tc
000d5e	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d5f	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d60	33 00 00 00 20 00	Wait    3, Tc
000d61	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d62	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d63	00 08 98 a4 05 00	Write   [0:0x3010] = b49
000d64	43 00 00 00 20 00	Wait    4, Tc
000d65	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d66	43 00 00 00 20 00	Wait    4, Tc
000d67	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d68	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d69	33 00 00 00 20 00	Wait    3, Tc
000d6a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d6b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d6c	00 08 98 a5 05 00	Write   [0:0x3010] = b4b
000d6d	43 00 00 00 20 00	Wait    4, Tc
000d6e	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d6f	43 00 00 00 20 00	Wait    4, Tc
000d70	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d71	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d72	33 00 00 00 20 00	Wait    3, Tc
000d73	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d74	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d75	00 08 98 a6 05 00	Write   [0:0x3010] = b4d
000d76	43 00 00 00 20 00	Wait    4, Tc
000d77	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d78	43 00 00 00 20 00	Wait    4, Tc
000d79	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d7a	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d7b	33 00 00 00 20 00	Wait    3, Tc
000d7c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d7d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d7e	00 08 98 a7 05 00	Write   [0:0x3010] = b4f
000d7f	43 00 00 00 20 00	Wait    4, Tc
000d80	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d81	43 00 00 00 20 00	Wait    4, Tc
000d82	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d83	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d84	33 00 00 00 20 00	Wait    3, Tc
000d85	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d86	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d87	00 08 98 a8 05 00	Write   [0:0x3010] = b51
000d88	43 00 00 00 20 00	Wait    4, Tc
000d89	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d8a	43 00 00 00 20 00	Wait    4, Tc
000d8b	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d8c	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d8d	33 00 00 00 20 00	Wait    3, Tc
000d8e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d8f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d90	00 08 98 a9 05 00	Write   [0:0x3010] = b53
000d91	43 00 00 00 20 00	Wait    4, Tc
000d92	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d93	43 00 00 00 20 00	Wait    4, Tc
000d94	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d95	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d96	33 00 00 00 20 00	Wait    3, Tc
000d97	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000d98	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000d99	00 08 98 aa 05 00	Write   [0:0x3010] = b55
000d9a	43 00 00 00 20 00	Wait    4, Tc
000d9b	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000d9c	43 00 00 00 20 00	Wait    4, Tc
000d9d	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000d9e	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000d9f	33 00 00 00 20 00	Wait    3, Tc
000da0	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000da1	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000da2	00 08 98 ab 05 00	Write   [0:0x3010] = b57
000da3	43 00 00 00 20 00	Wait    4, Tc
000da4	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000da5	43 00 00 00 20 00	Wait    4, Tc
000da6	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000da7	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000da8	33 00 00 00 20 00	Wait    3, Tc
000da9	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000daa	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000dab	00 08 98 ac 05 00	Write   [0:0x3010] = b59
000dac	43 00 00 00 20 00	Wait    4, Tc
000dad	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000dae	43 00 00 00 20 00	Wait    4, Tc
000daf	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000db0	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000db1	33 00 00 00 20 00	Wait    3, Tc
000db2	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000db3	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000db4	00 08 98 ad 05 00	Write   [0:0x3010] = b5b
000db5	43 00 00 00 20 00	Wait    4, Tc
000db6	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000db7	43 00 00 00 20 00	Wait    4, Tc
000db8	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000db9	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000dba	33 00 00 00 20 00	Wait    3, Tc
000dbb	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000dbc	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000dbd	00 08 98 ae 05 00	Write   [0:0x3010] = b5d
000dbe	43 00 00 00 20 00	Wait    4, Tc
000dbf	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000dc0	43 00 00 00 20 00	Wait    4, Tc
000dc1	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000dc2	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000dc3	33 00 00 00 20 00	Wait    3, Tc
000dc4	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000dc5	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000dc6	00 08 98 af 05 00	Write   [0:0x3010] = b5f
000dc7	43 00 00 00 20 00	Wait    4, Tc
000dc8	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000dc9	43 00 00 00 20 00	Wait    4, Tc
000dca	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000dcb	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000dcc	33 00 00 00 20 00	Wait    3, Tc
000dcd	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000dce	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000dcf	00 08 98 b0 05 00	Write   [0:0x3010] = b61
000dd0	43 00 00 00 20 00	Wait    4, Tc
000dd1	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000dd2	43 00 00 00 20 00	Wait    4, Tc
000dd3	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000dd4	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000dd5	33 00 00 00 20 00	Wait    3, Tc
000dd6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000dd7	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000dd8	00 08 98 b1 05 00	Write   [0:0x3010] = b63
000dd9	43 00 00 00 20 00	Wait    4, Tc
000dda	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ddb	43 00 00 00 20 00	Wait    4, Tc
000ddc	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ddd	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000dde	33 00 00 00 20 00	Wait    3, Tc
000ddf	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000de0	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000de1	00 08 98 b2 05 00	Write   [0:0x3010] = b65
000de2	43 00 00 00 20 00	Wait    4, Tc
000de3	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000de4	43 00 00 00 20 00	Wait    4, Tc
000de5	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000de6	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000de7	33 00 00 00 20 00	Wait    3, Tc
000de8	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000de9	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000dea	00 08 98 b3 05 00	Write   [0:0x3010] = b67
000deb	43 00 00 00 20 00	Wait    4, Tc
000dec	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ded	43 00 00 00 20 00	Wait    4, Tc
000dee	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000def	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000df0	33 00 00 00 20 00	Wait    3, Tc
000df1	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000df2	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000df3	00 08 98 b4 05 00	Write   [0:0x3010] = b69
000df4	43 00 00 00 20 00	Wait    4, Tc
000df5	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000df6	43 00 00 00 20 00	Wait    4, Tc
000df7	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000df8	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000df9	33 00 00 00 20 00	Wait    3, Tc
000dfa	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000dfb	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000dfc	00 08 98 b5 05 00	Write   [0:0x3010] = b6b
000dfd	43 00 00 00 20 00	Wait    4, Tc
000dfe	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000dff	43 00 00 00 20 00	Wait    4, Tc
000e00	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e01	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e02	33 00 00 00 20 00	Wait    3, Tc
000e03	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e04	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e05	00 08 98 b6 05 00	Write   [0:0x3010] = b6d
000e06	43 00 00 00 20 00	Wait    4, Tc
000e07	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e08	43 00 00 00 20 00	Wait    4, Tc
000e09	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e0a	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e0b	33 00 00 00 20 00	Wait    3, Tc
000e0c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e0d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e0e	00 08 98 b7 05 00	Write   [0:0x3010] = b6f
000e0f	43 00 00 00 20 00	Wait    4, Tc
000e10	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e11	43 00 00 00 20 00	Wait    4, Tc
000e12	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e13	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e14	33 00 00 00 20 00	Wait    3, Tc
000e15	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e16	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e17	00 08 98 b8 05 00	Write   [0:0x3010] = b71
000e18	43 00 00 00 20 00	Wait    4, Tc
000e19	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e1a	43 00 00 00 20 00	Wait    4, Tc
000e1b	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e1c	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e1d	33 00 00 00 20 00	Wait    3, Tc
000e1e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e1f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e20	00 08 98 b9 05 00	Write   [0:0x3010] = b73
000e21	43 00 00 00 20 00	Wait    4, Tc
000e22	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e23	43 00 00 00 20 00	Wait    4, Tc
000e24	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e25	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e26	33 00 00 00 20 00	Wait    3, Tc
000e27	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e28	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e29	00 08 98 ba 05 00	Write   [0:0x3010] = b75
000e2a	43 00 00 00 20 00	Wait    4, Tc
000e2b	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e2c	43 00 00 00 20 00	Wait    4, Tc
000e2d	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e2e	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e2f	33 00 00 00 20 00	Wait    3, Tc
000e30	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e31	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e32	00 08 98 bb 05 00	Write   [0:0x3010] = b77
000e33	43 00 00 00 20 00	Wait    4, Tc
000e34	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e35	43 00 00 00 20 00	Wait    4, Tc
000e36	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e37	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e38	33 00 00 00 20 00	Wait    3, Tc
000e39	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e3a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e3b	00 08 98 bc 05 00	Write   [0:0x3010] = b79
000e3c	43 00 00 00 20 00	Wait    4, Tc
000e3d	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e3e	43 00 00 00 20 00	Wait    4, Tc
000e3f	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e40	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e41	33 00 00 00 20 00	Wait    3, Tc
000e42	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e43	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e44	00 08 98 bd 05 00	Write   [0:0x3010] = b7b
000e45	43 00 00 00 20 00	Wait    4, Tc
000e46	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e47	43 00 00 00 20 00	Wait    4, Tc
000e48	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e49	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e4a	33 00 00 00 20 00	Wait    3, Tc
000e4b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e4c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e4d	00 08 98 be 05 00	Write   [0:0x3010] = b7d
000e4e	43 00 00 00 20 00	Wait    4, Tc
000e4f	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e50	43 00 00 00 20 00	Wait    4, Tc
000e51	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e52	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e53	33 00 00 00 20 00	Wait    3, Tc
000e54	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e55	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e56	00 08 98 bf 05 00	Write   [0:0x3010] = b7f
000e57	43 00 00 00 20 00	Wait    4, Tc
000e58	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e59	43 00 00 00 20 00	Wait    4, Tc
000e5a	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e5b	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e5c	33 00 00 00 20 00	Wait    3, Tc
000e5d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e5e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e5f	00 08 98 c0 05 00	Write   [0:0x3010] = b81
000e60	43 00 00 00 20 00	Wait    4, Tc
000e61	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e62	43 00 00 00 20 00	Wait    4, Tc
000e63	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e64	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e65	33 00 00 00 20 00	Wait    3, Tc
000e66	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e67	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e68	00 08 98 c1 05 00	Write   [0:0x3010] = b83
000e69	43 00 00 00 20 00	Wait    4, Tc
000e6a	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e6b	43 00 00 00 20 00	Wait    4, Tc
000e6c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e6d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e6e	33 00 00 00 20 00	Wait    3, Tc
000e6f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e70	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e71	00 08 98 c2 05 00	Write   [0:0x3010] = b85
000e72	43 00 00 00 20 00	Wait    4, Tc
000e73	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e74	43 00 00 00 20 00	Wait    4, Tc
000e75	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e76	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e77	33 00 00 00 20 00	Wait    3, Tc
000e78	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e79	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e7a	00 08 98 c3 05 00	Write   [0:0x3010] = b87
000e7b	43 00 00 00 20 00	Wait    4, Tc
000e7c	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e7d	43 00 00 00 20 00	Wait    4, Tc
000e7e	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e7f	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e80	33 00 00 00 20 00	Wait    3, Tc
000e81	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e82	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e83	00 08 98 c4 05 00	Write   [0:0x3010] = b89
000e84	43 00 00 00 20 00	Wait    4, Tc
000e85	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e86	43 00 00 00 20 00	Wait    4, Tc
000e87	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e88	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e89	33 00 00 00 20 00	Wait    3, Tc
000e8a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e8b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e8c	00 08 98 c5 05 00	Write   [0:0x3010] = b8b
000e8d	43 00 00 00 20 00	Wait    4, Tc
000e8e	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e8f	43 00 00 00 20 00	Wait    4, Tc
000e90	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e91	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e92	33 00 00 00 20 00	Wait    3, Tc
000e93	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e94	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e95	00 08 98 c6 05 00	Write   [0:0x3010] = b8d
000e96	43 00 00 00 20 00	Wait    4, Tc
000e97	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000e98	43 00 00 00 20 00	Wait    4, Tc
000e99	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000e9a	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000e9b	33 00 00 00 20 00	Wait    3, Tc
000e9c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000e9d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000e9e	00 08 98 c7 05 00	Write   [0:0x3010] = b8f
000e9f	43 00 00 00 20 00	Wait    4, Tc
000ea0	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ea1	43 00 00 00 20 00	Wait    4, Tc
000ea2	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ea3	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ea4	33 00 00 00 20 00	Wait    3, Tc
000ea5	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000ea6	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000ea7	00 08 98 c8 05 00	Write   [0:0x3010] = b91
000ea8	43 00 00 00 20 00	Wait    4, Tc
000ea9	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000eaa	43 00 00 00 20 00	Wait    4, Tc
000eab	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000eac	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ead	33 00 00 00 20 00	Wait    3, Tc
000eae	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000eaf	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000eb0	00 08 98 c9 05 00	Write   [0:0x3010] = b93
000eb1	43 00 00 00 20 00	Wait    4, Tc
000eb2	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000eb3	43 00 00 00 20 00	Wait    4, Tc
000eb4	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000eb5	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000eb6	33 00 00 00 20 00	Wait    3, Tc
000eb7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000eb8	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000eb9	00 08 98 ca 05 00	Write   [0:0x3010] = b95
000eba	43 00 00 00 20 00	Wait    4, Tc
000ebb	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ebc	43 00 00 00 20 00	Wait    4, Tc
000ebd	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ebe	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ebf	33 00 00 00 20 00	Wait    3, Tc
000ec0	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000ec1	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000ec2	00 08 98 cb 05 00	Write   [0:0x3010] = b97
000ec3	43 00 00 00 20 00	Wait    4, Tc
000ec4	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ec5	43 00 00 00 20 00	Wait    4, Tc
000ec6	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ec7	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ec8	33 00 00 00 20 00	Wait    3, Tc
000ec9	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000eca	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000ecb	00 08 98 cc 05 00	Write   [0:0x3010] = b99
000ecc	43 00 00 00 20 00	Wait    4, Tc
000ecd	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ece	43 00 00 00 20 00	Wait    4, Tc
000ecf	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ed0	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ed1	33 00 00 00 20 00	Wait    3, Tc
000ed2	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000ed3	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000ed4	00 08 98 cd 05 00	Write   [0:0x3010] = b9b
000ed5	43 00 00 00 20 00	Wait    4, Tc
000ed6	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ed7	43 00 00 00 20 00	Wait    4, Tc
000ed8	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ed9	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000eda	33 00 00 00 20 00	Wait    3, Tc
000edb	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000edc	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000edd	00 08 98 ce 05 00	Write   [0:0x3010] = b9d
000ede	43 00 00 00 20 00	Wait    4, Tc
000edf	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ee0	43 00 00 00 20 00	Wait    4, Tc
000ee1	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ee2	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ee3	33 00 00 00 20 00	Wait    3, Tc
000ee4	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000ee5	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000ee6	00 08 98 cf 05 00	Write   [0:0x3010] = b9f
000ee7	43 00 00 00 20 00	Wait    4, Tc
000ee8	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ee9	43 00 00 00 20 00	Wait    4, Tc
000eea	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000eeb	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000eec	33 00 00 00 20 00	Wait    3, Tc
000eed	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000eee	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000eef	00 08 98 d0 05 00	Write   [0:0x3010] = ba1
000ef0	43 00 00 00 20 00	Wait    4, Tc
000ef1	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ef2	43 00 00 00 20 00	Wait    4, Tc
000ef3	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ef4	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ef5	33 00 00 00 20 00	Wait    3, Tc
000ef6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000ef7	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000ef8	00 08 98 d1 05 00	Write   [0:0x3010] = ba3
000ef9	43 00 00 00 20 00	Wait    4, Tc
000efa	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000efb	43 00 00 00 20 00	Wait    4, Tc
000efc	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000efd	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000efe	33 00 00 00 20 00	Wait    3, Tc
000eff	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f00	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f01	00 08 98 d2 05 00	Write   [0:0x3010] = ba5
000f02	43 00 00 00 20 00	Wait    4, Tc
000f03	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f04	43 00 00 00 20 00	Wait    4, Tc
000f05	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f06	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f07	33 00 00 00 20 00	Wait    3, Tc
000f08	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f09	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f0a	00 08 98 d3 05 00	Write   [0:0x3010] = ba7
000f0b	43 00 00 00 20 00	Wait    4, Tc
000f0c	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f0d	43 00 00 00 20 00	Wait    4, Tc
000f0e	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f0f	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f10	33 00 00 00 20 00	Wait    3, Tc
000f11	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f12	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f13	00 08 98 d4 05 00	Write   [0:0x3010] = ba9
000f14	43 00 00 00 20 00	Wait    4, Tc
000f15	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f16	43 00 00 00 20 00	Wait    4, Tc
000f17	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f18	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f19	33 00 00 00 20 00	Wait    3, Tc
000f1a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f1b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f1c	00 08 98 d5 05 00	Write   [0:0x3010] = bab
000f1d	43 00 00 00 20 00	Wait    4, Tc
000f1e	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f1f	43 00 00 00 20 00	Wait    4, Tc
000f20	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f21	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f22	33 00 00 00 20 00	Wait    3, Tc
000f23	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f24	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f25	00 08 98 d6 05 00	Write   [0:0x3010] = bad
000f26	43 00 00 00 20 00	Wait    4, Tc
000f27	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f28	43 00 00 00 20 00	Wait    4, Tc
000f29	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f2a	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f2b	33 00 00 00 20 00	Wait    3, Tc
000f2c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f2d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f2e	00 08 98 d7 05 00	Write   [0:0x3010] = baf
000f2f	43 00 00 00 20 00	Wait    4, Tc
000f30	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f31	43 00 00 00 20 00	Wait    4, Tc
000f32	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f33	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f34	33 00 00 00 20 00	Wait    3, Tc
000f35	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f36	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f37	00 08 98 d8 05 00	Write   [0:0x3010] = bb1
000f38	43 00 00 00 20 00	Wait    4, Tc
000f39	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f3a	43 00 00 00 20 00	Wait    4, Tc
000f3b	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f3c	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f3d	33 00 00 00 20 00	Wait    3, Tc
000f3e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f3f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f40	00 08 98 d9 05 00	Write   [0:0x3010] = bb3
000f41	43 00 00 00 20 00	Wait    4, Tc
000f42	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f43	43 00 00 00 20 00	Wait    4, Tc
000f44	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f45	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f46	33 00 00 00 20 00	Wait    3, Tc
000f47	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f48	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f49	00 08 98 da 05 00	Write   [0:0x3010] = bb5
000f4a	43 00 00 00 20 00	Wait    4, Tc
000f4b	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f4c	43 00 00 00 20 00	Wait    4, Tc
000f4d	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f4e	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f4f	33 00 00 00 20 00	Wait    3, Tc
000f50	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f51	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f52	00 08 98 db 05 00	Write   [0:0x3010] = bb7
000f53	43 00 00 00 20 00	Wait    4, Tc
000f54	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f55	43 00 00 00 20 00	Wait    4, Tc
000f56	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f57	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f58	33 00 00 00 20 00	Wait    3, Tc
000f59	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f5a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f5b	00 08 98 dc 05 00	Write   [0:0x3010] = bb9
000f5c	43 00 00 00 20 00	Wait    4, Tc
000f5d	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f5e	43 00 00 00 20 00	Wait    4, Tc
000f5f	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f60	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f61	33 00 00 00 20 00	Wait    3, Tc
000f62	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f63	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f64	00 08 98 dd 05 00	Write   [0:0x3010] = bbb
000f65	43 00 00 00 20 00	Wait    4, Tc
000f66	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f67	43 00 00 00 20 00	Wait    4, Tc
000f68	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f69	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f6a	33 00 00 00 20 00	Wait    3, Tc
000f6b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f6c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f6d	00 08 98 de 05 00	Write   [0:0x3010] = bbd
000f6e	43 00 00 00 20 00	Wait    4, Tc
000f6f	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f70	43 00 00 00 20 00	Wait    4, Tc
000f71	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f72	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f73	33 00 00 00 20 00	Wait    3, Tc
000f74	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f75	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f76	00 08 98 df 05 00	Write   [0:0x3010] = bbf
000f77	43 00 00 00 20 00	Wait    4, Tc
000f78	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f79	43 00 00 00 20 00	Wait    4, Tc
000f7a	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f7b	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f7c	33 00 00 00 20 00	Wait    3, Tc
000f7d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f7e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f7f	00 08 98 e0 05 00	Write   [0:0x3010] = bc1
000f80	43 00 00 00 20 00	Wait    4, Tc
000f81	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f82	43 00 00 00 20 00	Wait    4, Tc
000f83	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f84	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f85	33 00 00 00 20 00	Wait    3, Tc
000f86	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f87	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f88	00 08 98 e1 05 00	Write   [0:0x3010] = bc3
000f89	43 00 00 00 20 00	Wait    4, Tc
000f8a	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f8b	43 00 00 00 20 00	Wait    4, Tc
000f8c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f8d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f8e	33 00 00 00 20 00	Wait    3, Tc
000f8f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f90	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f91	00 08 98 e2 05 00	Write   [0:0x3010] = bc5
000f92	43 00 00 00 20 00	Wait    4, Tc
000f93	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f94	43 00 00 00 20 00	Wait    4, Tc
000f95	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f96	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000f97	33 00 00 00 20 00	Wait    3, Tc
000f98	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000f99	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000f9a	00 08 98 e3 05 00	Write   [0:0x3010] = bc7
000f9b	43 00 00 00 20 00	Wait    4, Tc
000f9c	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000f9d	43 00 00 00 20 00	Wait    4, Tc
000f9e	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000f9f	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fa0	33 00 00 00 20 00	Wait    3, Tc
000fa1	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fa2	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000fa3	00 08 98 e4 05 00	Write   [0:0x3010] = bc9
000fa4	43 00 00 00 20 00	Wait    4, Tc
000fa5	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000fa6	43 00 00 00 20 00	Wait    4, Tc
000fa7	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000fa8	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fa9	33 00 00 00 20 00	Wait    3, Tc
000faa	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fab	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000fac	00 08 98 e5 05 00	Write   [0:0x3010] = bcb
000fad	43 00 00 00 20 00	Wait    4, Tc
000fae	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000faf	43 00 00 00 20 00	Wait    4, Tc
000fb0	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000fb1	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fb2	33 00 00 00 20 00	Wait    3, Tc
000fb3	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fb4	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000fb5	00 08 98 e6 05 00	Write   [0:0x3010] = bcd
000fb6	43 00 00 00 20 00	Wait    4, Tc
000fb7	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000fb8	43 00 00 00 20 00	Wait    4, Tc
000fb9	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000fba	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fbb	33 00 00 00 20 00	Wait    3, Tc
000fbc	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fbd	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000fbe	00 08 98 e7 05 00	Write   [0:0x3010] = bcf
000fbf	43 00 00 00 20 00	Wait    4, Tc
000fc0	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000fc1	43 00 00 00 20 00	Wait    4, Tc
000fc2	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000fc3	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fc4	33 00 00 00 20 00	Wait    3, Tc
000fc5	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fc6	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000fc7	00 08 98 e8 05 00	Write   [0:0x3010] = bd1
000fc8	43 00 00 00 20 00	Wait    4, Tc
000fc9	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000fca	43 00 00 00 20 00	Wait    4, Tc
000fcb	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000fcc	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fcd	33 00 00 00 20 00	Wait    3, Tc
000fce	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fcf	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000fd0	00 08 98 e9 05 00	Write   [0:0x3010] = bd3
000fd1	43 00 00 00 20 00	Wait    4, Tc
000fd2	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000fd3	43 00 00 00 20 00	Wait    4, Tc
000fd4	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000fd5	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fd6	33 00 00 00 20 00	Wait    3, Tc
000fd7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fd8	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000fd9	00 08 98 ea 05 00	Write   [0:0x3010] = bd5
000fda	43 00 00 00 20 00	Wait    4, Tc
000fdb	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000fdc	43 00 00 00 20 00	Wait    4, Tc
000fdd	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000fde	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fdf	33 00 00 00 20 00	Wait    3, Tc
000fe0	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fe1	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000fe2	00 08 98 eb 05 00	Write   [0:0x3010] = bd7
000fe3	43 00 00 00 20 00	Wait    4, Tc
000fe4	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000fe5	43 00 00 00 20 00	Wait    4, Tc
000fe6	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000fe7	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000fe8	33 00 00 00 20 00	Wait    3, Tc
000fe9	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000fea	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000feb	00 08 98 ec 05 00	Write   [0:0x3010] = bd9
000fec	43 00 00 00 20 00	Wait    4, Tc
000fed	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000fee	43 00 00 00 20 00	Wait    4, Tc
000fef	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ff0	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ff1	33 00 00 00 20 00	Wait    3, Tc
000ff2	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000ff3	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000ff4	00 08 98 ed 05 00	Write   [0:0x3010] = bdb
000ff5	43 00 00 00 20 00	Wait    4, Tc
000ff6	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
000ff7	43 00 00 00 20 00	Wait    4, Tc
000ff8	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
000ff9	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
000ffa	33 00 00 00 20 00	Wait    3, Tc
000ffb	00 08 98 26 05 00	Write   [0:0x3010] = a4d
000ffc	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
000ffd	00 08 98 ee 05 00	Write   [0:0x3010] = bdd
000ffe	43 00 00 00 20 00	Wait    4, Tc
000fff	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
001000	43 00 00 00 20 00	Wait    4, Tc
001001	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001002	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001003	33 00 00 00 20 00	Wait    3, Tc
001004	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001005	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001006	00 08 98 ef 05 00	Write   [0:0x3010] = bdf
001007	43 00 00 00 20 00	Wait    4, Tc
001008	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
001009	43 00 00 00 20 00	Wait    4, Tc
00100a	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00100b	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00100c	33 00 00 00 20 00	Wait    3, Tc
00100d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00100e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00100f	00 08 98 f0 05 00	Write   [0:0x3010] = be1
001010	43 00 00 00 20 00	Wait    4, Tc
001011	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
001012	43 00 00 00 20 00	Wait    4, Tc
001013	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001014	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001015	33 00 00 00 20 00	Wait    3, Tc
001016	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001017	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001018	00 08 98 f1 05 00	Write   [0:0x3010] = be3
001019	43 00 00 00 20 00	Wait    4, Tc
00101a	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
00101b	43 00 00 00 20 00	Wait    4, Tc
00101c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00101d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00101e	33 00 00 00 20 00	Wait    3, Tc
00101f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001020	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001021	00 08 98 f2 05 00	Write   [0:0x3010] = be5
001022	43 00 00 00 20 00	Wait    4, Tc
001023	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
001024	43 00 00 00 20 00	Wait    4, Tc
001025	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001026	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001027	33 00 00 00 20 00	Wait    3, Tc
001028	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001029	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00102a	00 08 98 f3 05 00	Write   [0:0x3010] = be7
00102b	43 00 00 00 20 00	Wait    4, Tc
00102c	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
00102d	43 00 00 00 20 00	Wait    4, Tc
00102e	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00102f	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001030	33 00 00 00 20 00	Wait    3, Tc
001031	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001032	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001033	00 08 98 f4 05 00	Write   [0:0x3010] = be9
001034	43 00 00 00 20 00	Wait    4, Tc
001035	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
001036	43 00 00 00 20 00	Wait    4, Tc
001037	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001038	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001039	33 00 00 00 20 00	Wait    3, Tc
00103a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00103b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00103c	00 08 98 f5 05 00	Write   [0:0x3010] = beb
00103d	43 00 00 00 20 00	Wait    4, Tc
00103e	04 00 00 00 40 00	Branch  0x0, [RET]


pll_0 freq = 17920.000000
00103f	43 00 00 00 20 00	Wait    4, Tc
001040	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001041	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001042	33 00 00 00 20 00	Wait    3, Tc
001043	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001044	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001045	00 08 98 f6 05 00	Write   [0:0x3010] = bed
001046	43 00 00 00 20 00	Wait    4, Tc
001047	04 00 00 00 40 00	Branch  0x0, [RET]


InlineSwAbs_CallTable_1
001048	43 00 00 00 20 00	Wait    4, Tc
001049	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]		# InlineSwAbs_CallTable_1_ParentOfIndirect
00104a	00 71 18 01 00 00	Write   [0:0x30e2] = 2
00104b	43 00 00 00 20 00	Wait    4, Tc
00104c	91 81 04 d0 61 00	Copy    [1:0903] = [0:30e8]
00104d	01 70 18 20 60 00	Copy    [0:30e0] = [0:3010]
00104e	43 00 00 00 20 00	Wait    4, Tc
00104f	01 71 98 06 12 00	Copy    [0:30e2] = [1:0903]
001050	43 00 00 00 20 00	Wait    4, Tc
001051	01 08 18 c8 61 00	Copy    [0:3010] = [0:30e4]
001052	64 00 00 00 20 00	Branch  0x6, [CALL]
001053	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001054	43 00 00 00 20 00	Wait    4, Tc
001055	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
001056	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001057	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
001058	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001059	33 00 00 00 20 00	Wait    3, Tc
00105a	01 71 98 70 0c 00	Copy    [0:30e2] = [1:0638]
00105b	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00105c	73 00 00 00 20 00	Wait    7, Tc
00105d	11 8f 04 c8 61 00	Copy    [1:091e] = [0:30e4]
00105e	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00105f	33 00 00 00 20 00	Wait    3, Tc
001060	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &)
001061	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001062	44 05 01 00 20 00	Branch  0x1054, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001063	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
001064	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
001065	83 00 00 00 20 00	Wait    8, Tc
001066	51 00 80 18 12 00	Copy    [1:0000] = [1:090c], DestBase: A
001067	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
001068	83 00 00 00 20 00	Wait    8, Tc
001069	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00106a	43 00 00 00 20 00	Wait    4, Tc
00106b	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
00106c	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00106d	01 70 98 5e 00 00	Copy    [0:30e0] = [1:002f]
00106e	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00106f	33 00 00 00 20 00	Wait    3, Tc
001070	01 71 98 e2 0d 00	Copy    [0:30e2] = [1:06f1]
001071	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001072	73 00 00 00 20 00	Wait    7, Tc
001073	11 8f 04 c8 61 00	Copy    [1:091e] = [0:30e4]
001074	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001075	33 00 00 00 20 00	Wait    3, Tc
001076	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &)
001077	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001078	a4 06 01 00 20 00	Branch  0x106a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001079	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
00107a	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
00107b	83 00 00 00 20 00	Wait    8, Tc
00107c	51 00 80 3a 12 00	Copy    [1:0000] = [1:091d], DestBase: A
00107d	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
00107e	83 00 00 00 20 00	Wait    8, Tc
00107f	04 00 00 00 40 00	Branch  0x0, [RET]


__If_35_IsLocked
001080	14 06 01 00 20 00	Branch  0x1061, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &) >		# If_35_Func_Start
001081	74 07 01 00 20 00	Branch  0x1077, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &) >
001082	a4 c7 00 00 20 00	Branch  0xc7a, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,unsigned short) >
001083	d4 c8 00 00 20 00	Branch  0xc8d, [CALL] < Vayyar::ReadModifyWrite::UpdateFieldsAndWrite<class ILParamShortPtr,class ILParamShortPtr,class ILParamShort,class ILParamShort>(class ILParamShortPtr,class ILParamShortPtr,class ILParamShort,class ILParamShort) >
001084	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)
001085	43 00 00 00 20 00	Wait    4, Tc
001086	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001087	44 05 01 00 20 00	Branch  0x1054, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001088	00 08 98 3e 05 00	Write   [0:0x3010] = a7d
001089	43 00 00 00 20 00	Wait    4, Tc
00108a	34 ca 00 00 20 00	Branch  0xca3, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)_sub_7 >
00108b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)
00108c	43 00 00 00 20 00	Wait    4, Tc
00108d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00108e	a4 06 01 00 20 00	Branch  0x106a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00108f	00 08 98 3e 05 00	Write   [0:0x3010] = a7d
001090	43 00 00 00 20 00	Wait    4, Tc
001091	34 ca 00 00 20 00	Branch  0xca3, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short)_sub_7 >
001092	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_35_IsLocked
001093	00 08 98 3e 05 00	Write   [0:0x3010] = a7d		# Else_35_Func_Start
001094	54 08 01 00 20 00	Branch  0x1085, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short) >
001095	00 08 98 3e 05 00	Write   [0:0x3010] = a7d
001096	c4 08 01 00 20 00	Branch  0x108c, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,unsigned short) >
001097	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_LoFrequencies
001098	11 90 04 20 60 00	Copy    [1:0920] = [0:3010]		# While_6_Func_Start
001099	53 00 00 00 20 00	Wait    5, Tc
00109a	01 08 98 40 12 00	Copy    [0:3010] = [1:0920]		# While_6
00109b	01 4c 98 5e 00 00	Copy    [0:3098] = [1:002f]
00109c	33 00 00 00 20 00	Wait    3, Tc
00109d	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
00109e	33 00 00 00 20 00	Wait    3, Tc
00109f	00 4d 98 2d 00 00	Write   [0:0x309a] = 5b
0010a0	53 00 00 00 20 00	Wait    5, Tc
0010a1	02 00 08 00 00 00	Cond    0x00008000

0010a2	a4 0d 01 00 10 00	Branch  0x10da, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0010a3	10 84 04 00 00 00	Write   [1:0x0908] = 0
0010a4	90 84 04 00 00 00	Write   [1:0x0909] = 0
0010a5	00 08 18 40 05 00	Write   [0:0x3010] = a80
0010a6	84 04 01 00 20 00	Branch  0x1048, [CALL] < InlineSwAbs_CallTable_1 >
0010a7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0010a8	64 c3 00 00 20 00	Branch  0xc36, [CALL] < FindLock >
0010a9	53 00 00 00 20 00	Wait    5, Tc		# If_32
0010aa	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
0010ab	00 49 98 56 6f 00	Write   [0:0x3092] = dead
0010ac	53 00 00 00 20 00	Wait    5, Tc
0010ad	02 00 00 01 00 00	Cond    0x00100000

0010ae	14 0b 01 00 90 00	Branch  0x10b1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0010af	a4 c4 00 00 20 00	Branch  0xc4a, [CALL] < __If_28_NotLocked >
0010b0	14 0b 01 00 00 00	Branch  0x10b1, [JMP]
0010b1	53 00 00 00 20 00	Wait    5, Tc		# Else_32
0010b2	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
0010b3	00 49 98 56 6f 00	Write   [0:0x3092] = dead
0010b4	53 00 00 00 20 00	Wait    5, Tc
0010b5	02 00 00 01 00 00	Cond    0x00100000

0010b6	94 0b 01 00 90 00	Branch  0x10b9, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0010b7	a4 c4 00 00 20 00	Branch  0xc4a, [CALL] < __If_28_NotLocked >
0010b8	94 0b 01 00 00 00	Branch  0x10b9, [JMP]
0010b9	53 00 00 00 20 00	Wait    5, Tc		# Else_33
0010ba	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
0010bb	00 49 98 56 6f 00	Write   [0:0x3092] = dead
0010bc	53 00 00 00 20 00	Wait    5, Tc
0010bd	02 00 00 01 00 00	Cond    0x00100000

0010be	14 0c 01 00 90 00	Branch  0x10c1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0010bf	a4 c4 00 00 20 00	Branch  0xc4a, [CALL] < __If_28_NotLocked >
0010c0	14 0c 01 00 00 00	Branch  0x10c1, [JMP]
0010c1	53 00 00 00 20 00	Wait    5, Tc		# Else_34
0010c2	01 48 98 34 12 00	Copy    [0:3090] = [1:091a]
0010c3	00 49 98 56 6f 00	Write   [0:0x3092] = dead
0010c4	53 00 00 00 20 00	Wait    5, Tc
0010c5	02 00 00 01 00 00	Cond    0x00100000

0010c6	94 0c 01 00 10 00	Branch  0x10c9, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0010c7	04 08 01 00 20 00	Branch  0x1080, [CALL] < __If_35_IsLocked >
0010c8	a4 0c 01 00 00 00	Branch  0x10ca, [JMP]
0010c9	34 09 01 00 20 00	Branch  0x1093, [CALL] < __Else_35_IsLocked >		# Else_35
0010ca	01 48 98 0a 12 00	Copy    [0:3090] = [1:0905]		# EndIf_35
0010cb	80 48 98 00 00 00	Write   [0:0x3091] = 1
0010cc	53 00 00 00 20 00	Wait    5, Tc
0010cd	91 82 04 20 61 00	Copy    [1:0905] = [0:3090]
0010ce	53 00 00 00 20 00	Wait    5, Tc
0010cf	01 48 98 0c 12 00	Copy    [0:3090] = [1:0906]
0010d0	80 48 98 00 00 00	Write   [0:0x3091] = 1
0010d1	53 00 00 00 20 00	Wait    5, Tc
0010d2	11 83 04 20 61 00	Copy    [1:0906] = [0:3090]
0010d3	53 00 00 00 20 00	Wait    5, Tc
0010d4	01 48 98 5e 00 00	Copy    [0:3090] = [1:002f]
0010d5	80 48 98 00 00 00	Write   [0:0x3091] = 1
0010d6	53 00 00 00 20 00	Wait    5, Tc
0010d7	91 17 00 20 61 00	Copy    [1:002f] = [0:3090]
0010d8	53 00 00 00 20 00	Wait    5, Tc
0010d9	a4 09 01 00 00 00	Branch  0x109a, [JMP]
0010da	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_6

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeLockSweepBlockLib::InlineBuildSweep(unsigned short,class Vayyar::Centipede::ICentipedeAnalogSynthModule *)
0010db	43 00 00 00 20 00	Wait    4, Tc
0010dc	11 82 84 01 00 01	Copy    [1:0904] = [SF+0], SrcBase: AI
0010dd	43 00 00 00 20 00	Wait    4, Tc
0010de	91 82 84 54 0f 00	Copy    [1:0905] = [1:07aa]
0010df	93 00 00 00 20 00	Wait    9, Tc
0010e0	11 83 84 9c 03 00	Copy    [1:0906] = [1:01ce]
0010e1	43 00 00 00 20 00	Wait    4, Tc
0010e2	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0010e3	84 09 01 00 20 00	Branch  0x1098, [CALL] < _Loop_LoFrequencies >
0010e4	00 08 18 40 05 00	Write   [0:0x3010] = a80
0010e5	43 00 00 00 20 00	Wait    4, Tc
0010e6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int)
0010e7	43 00 00 00 20 00	Wait    4, Tc
0010e8	00 08 18 1d 05 00	Write   [0:0x3010] = a3a
0010e9	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0010ea	00 08 98 f6 05 00	Write   [0:0x3010] = bed
0010eb	43 00 00 00 20 00	Wait    4, Tc
0010ec	91 89 80 01 00 01	Copy    [1:0113] = [SF+0], SrcBase: AI
0010ed	11 8a 80 01 00 01	Copy    [1:0114] = [SF+1], SrcBase: AI
0010ee	33 00 00 00 20 00	Wait    3, Tc
0010ef	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0010f0	04 78 00 00 20 00	Branch  0x780, [CALL] < ReadModifyWrite_Indirect >
0010f1	00 08 98 f7 05 00	Write   [0:0x3010] = bef
0010f2	43 00 00 00 20 00	Wait    4, Tc
0010f3	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int)
0010f4	43 00 00 00 20 00	Wait    4, Tc
0010f5	00 08 98 1f 05 00	Write   [0:0x3010] = a3f
0010f6	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
0010f7	00 08 98 f6 05 00	Write   [0:0x3010] = bed
0010f8	43 00 00 00 20 00	Wait    4, Tc
0010f9	91 89 80 01 00 01	Copy    [1:0113] = [SF+0], SrcBase: AI
0010fa	11 8a 80 01 00 01	Copy    [1:0114] = [SF+1], SrcBase: AI
0010fb	33 00 00 00 20 00	Wait    3, Tc
0010fc	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
0010fd	04 78 00 00 20 00	Branch  0x780, [CALL] < ReadModifyWrite_Indirect >
0010fe	00 08 98 f7 05 00	Write   [0:0x3010] = bef
0010ff	43 00 00 00 20 00	Wait    4, Tc
001100	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001101	43 00 00 00 20 00	Wait    4, Tc
001102	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
001103	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
001104	33 00 00 00 20 00	Wait    3, Tc
001105	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001106	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001107	00 08 98 0c 05 00	Write   [0:0x3010] = a19
001108	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001109	00 08 18 59 06 00	Write   [0:0x3010] = cb2
00110a	43 00 00 00 20 00	Wait    4, Tc
00110b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00110c	43 00 00 00 20 00	Wait    4, Tc
00110d	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00110e	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00110f	33 00 00 00 20 00	Wait    3, Tc
001110	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001111	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001112	00 08 98 5c 06 00	Write   [0:0x3010] = cb9
001113	43 00 00 00 20 00	Wait    4, Tc
001114	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001115	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001116	33 00 00 00 20 00	Wait    3, Tc
001117	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001118	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001119	00 08 98 5d 06 00	Write   [0:0x3010] = cbb
00111a	43 00 00 00 20 00	Wait    4, Tc
00111b	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00111c	43 00 00 00 20 00	Wait    4, Tc
00111d	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00111e	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00111f	14 10 01 00 20 00	Branch  0x1101, [CALL] < IQCalTuneNco >
001120	00 08 98 5b 06 00	Write   [0:0x3010] = cb7
001121	c4 10 01 00 20 00	Branch  0x110c, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001122	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001123	53 64 00 00 20 00	Wait    1605, Tc
001124	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001125	43 00 00 00 20 00	Wait    4, Tc
001126	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001127	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001128	33 00 00 00 20 00	Wait    3, Tc
001129	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00112a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00112b	00 08 98 5e 06 00	Write   [0:0x3010] = cbd
00112c	43 00 00 00 20 00	Wait    4, Tc
00112d	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00112e	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00112f	33 00 00 00 20 00	Wait    3, Tc
001130	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001131	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001132	00 08 98 5f 06 00	Write   [0:0x3010] = cbf
001133	43 00 00 00 20 00	Wait    4, Tc
001134	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001135	43 00 00 00 20 00	Wait    4, Tc
001136	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001137	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001138	14 10 01 00 20 00	Branch  0x1101, [CALL] < IQCalTuneNco >
001139	00 08 98 5d 06 00	Write   [0:0x3010] = cbb
00113a	54 12 01 00 20 00	Branch  0x1125, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00113b	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00113c	53 64 00 00 20 00	Wait    1605, Tc
00113d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00113e	43 00 00 00 20 00	Wait    4, Tc
00113f	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001140	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001141	33 00 00 00 20 00	Wait    3, Tc
001142	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001143	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001144	00 08 98 60 06 00	Write   [0:0x3010] = cc1
001145	43 00 00 00 20 00	Wait    4, Tc
001146	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001147	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001148	33 00 00 00 20 00	Wait    3, Tc
001149	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00114a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00114b	00 08 98 61 06 00	Write   [0:0x3010] = cc3
00114c	43 00 00 00 20 00	Wait    4, Tc
00114d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00114e	43 00 00 00 20 00	Wait    4, Tc
00114f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001150	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001151	14 10 01 00 20 00	Branch  0x1101, [CALL] < IQCalTuneNco >
001152	00 08 98 5f 06 00	Write   [0:0x3010] = cbf
001153	e4 13 01 00 20 00	Branch  0x113e, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001154	00 08 18 3c 05 00	Write   [0:0x3010] = a78
001155	53 64 00 00 20 00	Wait    1605, Tc
001156	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001157	43 00 00 00 20 00	Wait    4, Tc
001158	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001159	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00115a	33 00 00 00 20 00	Wait    3, Tc
00115b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00115c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00115d	00 08 98 62 06 00	Write   [0:0x3010] = cc5
00115e	43 00 00 00 20 00	Wait    4, Tc
00115f	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001160	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001161	33 00 00 00 20 00	Wait    3, Tc
001162	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001163	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001164	00 08 98 63 06 00	Write   [0:0x3010] = cc7
001165	43 00 00 00 20 00	Wait    4, Tc
001166	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001167	43 00 00 00 20 00	Wait    4, Tc
001168	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001169	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00116a	14 10 01 00 20 00	Branch  0x1101, [CALL] < IQCalTuneNco >
00116b	00 08 98 61 06 00	Write   [0:0x3010] = cc3
00116c	74 15 01 00 20 00	Branch  0x1157, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00116d	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00116e	53 64 00 00 20 00	Wait    1605, Tc
00116f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001170	43 00 00 00 20 00	Wait    4, Tc
001171	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001172	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001173	33 00 00 00 20 00	Wait    3, Tc
001174	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001175	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001176	00 08 98 64 06 00	Write   [0:0x3010] = cc9
001177	43 00 00 00 20 00	Wait    4, Tc
001178	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001179	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00117a	33 00 00 00 20 00	Wait    3, Tc
00117b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00117c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00117d	00 08 98 65 06 00	Write   [0:0x3010] = ccb
00117e	43 00 00 00 20 00	Wait    4, Tc
00117f	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001180	43 00 00 00 20 00	Wait    4, Tc
001181	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001182	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001183	14 10 01 00 20 00	Branch  0x1101, [CALL] < IQCalTuneNco >
001184	00 08 98 63 06 00	Write   [0:0x3010] = cc7
001185	04 17 01 00 20 00	Branch  0x1170, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001186	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001187	53 64 00 00 20 00	Wait    1605, Tc
001188	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001189	43 00 00 00 20 00	Wait    4, Tc
00118a	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00118b	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00118c	33 00 00 00 20 00	Wait    3, Tc
00118d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00118e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00118f	00 08 98 66 06 00	Write   [0:0x3010] = ccd
001190	43 00 00 00 20 00	Wait    4, Tc
001191	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001192	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001193	33 00 00 00 20 00	Wait    3, Tc
001194	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001195	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001196	00 08 98 67 06 00	Write   [0:0x3010] = ccf
001197	43 00 00 00 20 00	Wait    4, Tc
001198	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001199	43 00 00 00 20 00	Wait    4, Tc
00119a	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00119b	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00119c	14 10 01 00 20 00	Branch  0x1101, [CALL] < IQCalTuneNco >
00119d	00 08 98 65 06 00	Write   [0:0x3010] = ccb
00119e	94 18 01 00 20 00	Branch  0x1189, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00119f	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0011a0	53 64 00 00 20 00	Wait    1605, Tc
0011a1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0011a2	43 00 00 00 20 00	Wait    4, Tc
0011a3	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0011a4	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0011a5	33 00 00 00 20 00	Wait    3, Tc
0011a6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0011a7	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0011a8	00 08 18 69 06 00	Write   [0:0x3010] = cd2
0011a9	43 00 00 00 20 00	Wait    4, Tc
0011aa	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0011ab	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0011ac	33 00 00 00 20 00	Wait    3, Tc
0011ad	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0011ae	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0011af	00 08 18 6a 06 00	Write   [0:0x3010] = cd4
0011b0	43 00 00 00 20 00	Wait    4, Tc
0011b1	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0011b2	43 00 00 00 20 00	Wait    4, Tc
0011b3	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0011b4	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0011b5	14 10 01 00 20 00	Branch  0x1101, [CALL] < IQCalTuneNco >
0011b6	00 08 18 68 06 00	Write   [0:0x3010] = cd0
0011b7	24 1a 01 00 20 00	Branch  0x11a2, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0011b8	00 08 18 68 06 00	Write   [0:0x3010] = cd0
0011b9	53 64 00 00 20 00	Wait    1605, Tc
0011ba	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0011bb	43 00 00 00 20 00	Wait    4, Tc
0011bc	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0011bd	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0011be	33 00 00 00 20 00	Wait    3, Tc
0011bf	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0011c0	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0011c1	00 08 18 6b 06 00	Write   [0:0x3010] = cd6
0011c2	43 00 00 00 20 00	Wait    4, Tc
0011c3	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0011c4	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0011c5	33 00 00 00 20 00	Wait    3, Tc
0011c6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0011c7	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0011c8	00 08 18 6c 06 00	Write   [0:0x3010] = cd8
0011c9	43 00 00 00 20 00	Wait    4, Tc
0011ca	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0011cb	43 00 00 00 20 00	Wait    4, Tc
0011cc	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0011cd	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0011ce	14 10 01 00 20 00	Branch  0x1101, [CALL] < IQCalTuneNco >
0011cf	00 08 18 6a 06 00	Write   [0:0x3010] = cd4
0011d0	b4 1b 01 00 20 00	Branch  0x11bb, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0011d1	00 08 18 68 06 00	Write   [0:0x3010] = cd0
0011d2	53 64 00 00 20 00	Wait    1605, Tc
0011d3	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0011d4	43 00 00 00 20 00	Wait    4, Tc
0011d5	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0011d6	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0011d7	33 00 00 00 20 00	Wait    3, Tc
0011d8	00 08 18 6c 06 00	Write   [0:0x3010] = cd8
0011d9	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0011da	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0011db	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0011dc	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0011dd	43 00 00 00 20 00	Wait    4, Tc
0011de	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0011df	43 00 00 00 20 00	Wait    4, Tc
0011e0	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0011e1	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0011e2	33 00 00 00 20 00	Wait    3, Tc
0011e3	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0011e4	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0011e5	00 08 98 6f 06 00	Write   [0:0x3010] = cdf
0011e6	43 00 00 00 20 00	Wait    4, Tc
0011e7	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0011e8	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0011e9	33 00 00 00 20 00	Wait    3, Tc
0011ea	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0011eb	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0011ec	00 08 98 70 06 00	Write   [0:0x3010] = ce1
0011ed	43 00 00 00 20 00	Wait    4, Tc
0011ee	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0011ef	43 00 00 00 20 00	Wait    4, Tc
0011f0	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0011f1	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0011f2	44 1d 01 00 20 00	Branch  0x11d4, [CALL] < IQCalTuneNco >
0011f3	00 08 98 6e 06 00	Write   [0:0x3010] = cdd
0011f4	f4 1d 01 00 20 00	Branch  0x11df, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0011f5	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0011f6	53 64 00 00 20 00	Wait    1605, Tc
0011f7	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0011f8	43 00 00 00 20 00	Wait    4, Tc
0011f9	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0011fa	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0011fb	33 00 00 00 20 00	Wait    3, Tc
0011fc	00 08 98 70 06 00	Write   [0:0x3010] = ce1
0011fd	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0011fe	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0011ff	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001200	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001201	43 00 00 00 20 00	Wait    4, Tc
001202	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001203	43 00 00 00 20 00	Wait    4, Tc
001204	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001205	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001206	33 00 00 00 20 00	Wait    3, Tc
001207	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001208	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001209	00 08 18 74 06 00	Write   [0:0x3010] = ce8
00120a	43 00 00 00 20 00	Wait    4, Tc
00120b	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00120c	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00120d	33 00 00 00 20 00	Wait    3, Tc
00120e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00120f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001210	00 08 18 75 06 00	Write   [0:0x3010] = cea
001211	43 00 00 00 20 00	Wait    4, Tc
001212	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001213	43 00 00 00 20 00	Wait    4, Tc
001214	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001215	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001216	84 1f 01 00 20 00	Branch  0x11f8, [CALL] < IQCalTuneNco >
001217	00 08 18 73 06 00	Write   [0:0x3010] = ce6
001218	34 20 01 00 20 00	Branch  0x1203, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001219	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00121a	53 64 00 00 20 00	Wait    1605, Tc
00121b	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00121c	43 00 00 00 20 00	Wait    4, Tc
00121d	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00121e	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00121f	33 00 00 00 20 00	Wait    3, Tc
001220	00 08 18 75 06 00	Write   [0:0x3010] = cea
001221	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001222	00 08 98 0c 05 00	Write   [0:0x3010] = a19
001223	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001224	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001225	43 00 00 00 20 00	Wait    4, Tc
001226	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001227	43 00 00 00 20 00	Wait    4, Tc
001228	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001229	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00122a	33 00 00 00 20 00	Wait    3, Tc
00122b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00122c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00122d	00 08 98 78 06 00	Write   [0:0x3010] = cf1
00122e	43 00 00 00 20 00	Wait    4, Tc
00122f	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001230	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001231	33 00 00 00 20 00	Wait    3, Tc
001232	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001233	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001234	00 08 98 79 06 00	Write   [0:0x3010] = cf3
001235	43 00 00 00 20 00	Wait    4, Tc
001236	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001237	43 00 00 00 20 00	Wait    4, Tc
001238	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001239	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00123a	c4 21 01 00 20 00	Branch  0x121c, [CALL] < IQCalTuneNco >
00123b	00 08 98 77 06 00	Write   [0:0x3010] = cef
00123c	74 22 01 00 20 00	Branch  0x1227, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00123d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00123e	53 64 00 00 20 00	Wait    1605, Tc
00123f	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001240	43 00 00 00 20 00	Wait    4, Tc
001241	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
001242	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
001243	33 00 00 00 20 00	Wait    3, Tc
001244	00 08 98 79 06 00	Write   [0:0x3010] = cf3
001245	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001246	00 08 98 0c 05 00	Write   [0:0x3010] = a19
001247	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001248	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001249	43 00 00 00 20 00	Wait    4, Tc
00124a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00124b	43 00 00 00 20 00	Wait    4, Tc
00124c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00124d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00124e	33 00 00 00 20 00	Wait    3, Tc
00124f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001250	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001251	00 08 18 7d 06 00	Write   [0:0x3010] = cfa
001252	43 00 00 00 20 00	Wait    4, Tc
001253	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001254	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001255	33 00 00 00 20 00	Wait    3, Tc
001256	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001257	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001258	00 08 18 7e 06 00	Write   [0:0x3010] = cfc
001259	43 00 00 00 20 00	Wait    4, Tc
00125a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00125b	43 00 00 00 20 00	Wait    4, Tc
00125c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00125d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00125e	04 24 01 00 20 00	Branch  0x1240, [CALL] < IQCalTuneNco >
00125f	00 08 18 7c 06 00	Write   [0:0x3010] = cf8
001260	b4 24 01 00 20 00	Branch  0x124b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001261	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001262	53 64 00 00 20 00	Wait    1605, Tc
001263	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001264	43 00 00 00 20 00	Wait    4, Tc
001265	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
001266	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
001267	33 00 00 00 20 00	Wait    3, Tc
001268	00 08 18 7e 06 00	Write   [0:0x3010] = cfc
001269	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00126a	00 08 98 0c 05 00	Write   [0:0x3010] = a19
00126b	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00126c	00 08 18 59 06 00	Write   [0:0x3010] = cb2
00126d	43 00 00 00 20 00	Wait    4, Tc
00126e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00126f	43 00 00 00 20 00	Wait    4, Tc
001270	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001271	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001272	33 00 00 00 20 00	Wait    3, Tc
001273	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001274	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001275	00 08 98 81 06 00	Write   [0:0x3010] = d03
001276	43 00 00 00 20 00	Wait    4, Tc
001277	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001278	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001279	33 00 00 00 20 00	Wait    3, Tc
00127a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00127b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00127c	00 08 98 82 06 00	Write   [0:0x3010] = d05
00127d	43 00 00 00 20 00	Wait    4, Tc
00127e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00127f	43 00 00 00 20 00	Wait    4, Tc
001280	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001281	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001282	44 26 01 00 20 00	Branch  0x1264, [CALL] < IQCalTuneNco >
001283	00 08 98 80 06 00	Write   [0:0x3010] = d01
001284	f4 26 01 00 20 00	Branch  0x126f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001285	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001286	53 64 00 00 20 00	Wait    1605, Tc
001287	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001288	43 00 00 00 20 00	Wait    4, Tc
001289	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00128a	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00128b	33 00 00 00 20 00	Wait    3, Tc
00128c	00 08 98 82 06 00	Write   [0:0x3010] = d05
00128d	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00128e	00 08 98 0c 05 00	Write   [0:0x3010] = a19
00128f	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001290	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001291	43 00 00 00 20 00	Wait    4, Tc
001292	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001293	43 00 00 00 20 00	Wait    4, Tc
001294	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001295	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001296	33 00 00 00 20 00	Wait    3, Tc
001297	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001298	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001299	00 08 18 86 06 00	Write   [0:0x3010] = d0c
00129a	43 00 00 00 20 00	Wait    4, Tc
00129b	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00129c	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00129d	33 00 00 00 20 00	Wait    3, Tc
00129e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00129f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0012a0	00 08 18 87 06 00	Write   [0:0x3010] = d0e
0012a1	43 00 00 00 20 00	Wait    4, Tc
0012a2	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0012a3	43 00 00 00 20 00	Wait    4, Tc
0012a4	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0012a5	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0012a6	84 28 01 00 20 00	Branch  0x1288, [CALL] < IQCalTuneNco >
0012a7	00 08 18 85 06 00	Write   [0:0x3010] = d0a
0012a8	34 29 01 00 20 00	Branch  0x1293, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0012a9	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0012aa	53 64 00 00 20 00	Wait    1605, Tc
0012ab	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0012ac	43 00 00 00 20 00	Wait    4, Tc
0012ad	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0012ae	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0012af	33 00 00 00 20 00	Wait    3, Tc
0012b0	00 08 18 87 06 00	Write   [0:0x3010] = d0e
0012b1	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0012b2	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0012b3	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0012b4	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0012b5	43 00 00 00 20 00	Wait    4, Tc
0012b6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0012b7	43 00 00 00 20 00	Wait    4, Tc
0012b8	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0012b9	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0012ba	33 00 00 00 20 00	Wait    3, Tc
0012bb	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0012bc	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0012bd	00 08 98 8a 06 00	Write   [0:0x3010] = d15
0012be	43 00 00 00 20 00	Wait    4, Tc
0012bf	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0012c0	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0012c1	33 00 00 00 20 00	Wait    3, Tc
0012c2	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0012c3	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0012c4	00 08 98 8b 06 00	Write   [0:0x3010] = d17
0012c5	43 00 00 00 20 00	Wait    4, Tc
0012c6	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0012c7	43 00 00 00 20 00	Wait    4, Tc
0012c8	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0012c9	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0012ca	c4 2a 01 00 20 00	Branch  0x12ac, [CALL] < IQCalTuneNco >
0012cb	00 08 98 89 06 00	Write   [0:0x3010] = d13
0012cc	74 2b 01 00 20 00	Branch  0x12b7, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0012cd	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0012ce	53 64 00 00 20 00	Wait    1605, Tc
0012cf	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0012d0	43 00 00 00 20 00	Wait    4, Tc
0012d1	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0012d2	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0012d3	33 00 00 00 20 00	Wait    3, Tc
0012d4	00 08 98 8b 06 00	Write   [0:0x3010] = d17
0012d5	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0012d6	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0012d7	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0012d8	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0012d9	43 00 00 00 20 00	Wait    4, Tc
0012da	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0012db	43 00 00 00 20 00	Wait    4, Tc
0012dc	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0012dd	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0012de	33 00 00 00 20 00	Wait    3, Tc
0012df	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0012e0	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0012e1	00 08 18 8f 06 00	Write   [0:0x3010] = d1e
0012e2	43 00 00 00 20 00	Wait    4, Tc
0012e3	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0012e4	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0012e5	33 00 00 00 20 00	Wait    3, Tc
0012e6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0012e7	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0012e8	00 08 18 90 06 00	Write   [0:0x3010] = d20
0012e9	43 00 00 00 20 00	Wait    4, Tc
0012ea	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0012eb	43 00 00 00 20 00	Wait    4, Tc
0012ec	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0012ed	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0012ee	04 2d 01 00 20 00	Branch  0x12d0, [CALL] < IQCalTuneNco >
0012ef	00 08 18 8e 06 00	Write   [0:0x3010] = d1c
0012f0	b4 2d 01 00 20 00	Branch  0x12db, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0012f1	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0012f2	53 64 00 00 20 00	Wait    1605, Tc
0012f3	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0012f4	43 00 00 00 20 00	Wait    4, Tc
0012f5	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0012f6	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0012f7	33 00 00 00 20 00	Wait    3, Tc
0012f8	00 08 18 90 06 00	Write   [0:0x3010] = d20
0012f9	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0012fa	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0012fb	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0012fc	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0012fd	43 00 00 00 20 00	Wait    4, Tc
0012fe	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0012ff	43 00 00 00 20 00	Wait    4, Tc
001300	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001301	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001302	33 00 00 00 20 00	Wait    3, Tc
001303	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001304	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001305	00 08 98 93 06 00	Write   [0:0x3010] = d27
001306	43 00 00 00 20 00	Wait    4, Tc
001307	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001308	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001309	33 00 00 00 20 00	Wait    3, Tc
00130a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00130b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00130c	00 08 98 94 06 00	Write   [0:0x3010] = d29
00130d	43 00 00 00 20 00	Wait    4, Tc
00130e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00130f	43 00 00 00 20 00	Wait    4, Tc
001310	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001311	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001312	44 2f 01 00 20 00	Branch  0x12f4, [CALL] < IQCalTuneNco >
001313	00 08 98 92 06 00	Write   [0:0x3010] = d25
001314	f4 2f 01 00 20 00	Branch  0x12ff, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001315	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001316	53 64 00 00 20 00	Wait    1605, Tc
001317	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001318	43 00 00 00 20 00	Wait    4, Tc
001319	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00131a	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00131b	33 00 00 00 20 00	Wait    3, Tc
00131c	00 08 98 94 06 00	Write   [0:0x3010] = d29
00131d	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00131e	00 08 98 0c 05 00	Write   [0:0x3010] = a19
00131f	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001320	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001321	43 00 00 00 20 00	Wait    4, Tc
001322	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001323	43 00 00 00 20 00	Wait    4, Tc
001324	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001325	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001326	33 00 00 00 20 00	Wait    3, Tc
001327	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001328	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001329	00 08 18 98 06 00	Write   [0:0x3010] = d30
00132a	43 00 00 00 20 00	Wait    4, Tc
00132b	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00132c	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00132d	33 00 00 00 20 00	Wait    3, Tc
00132e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00132f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001330	00 08 18 99 06 00	Write   [0:0x3010] = d32
001331	43 00 00 00 20 00	Wait    4, Tc
001332	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001333	43 00 00 00 20 00	Wait    4, Tc
001334	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001335	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001336	84 31 01 00 20 00	Branch  0x1318, [CALL] < IQCalTuneNco >
001337	00 08 18 97 06 00	Write   [0:0x3010] = d2e
001338	34 32 01 00 20 00	Branch  0x1323, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001339	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00133a	53 64 00 00 20 00	Wait    1605, Tc
00133b	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00133c	43 00 00 00 20 00	Wait    4, Tc
00133d	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00133e	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00133f	33 00 00 00 20 00	Wait    3, Tc
001340	00 08 18 99 06 00	Write   [0:0x3010] = d32
001341	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001342	00 08 98 0c 05 00	Write   [0:0x3010] = a19
001343	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001344	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001345	43 00 00 00 20 00	Wait    4, Tc
001346	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001347	43 00 00 00 20 00	Wait    4, Tc
001348	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001349	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00134a	33 00 00 00 20 00	Wait    3, Tc
00134b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00134c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00134d	00 08 98 9c 06 00	Write   [0:0x3010] = d39
00134e	43 00 00 00 20 00	Wait    4, Tc
00134f	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001350	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001351	33 00 00 00 20 00	Wait    3, Tc
001352	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001353	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001354	00 08 98 9d 06 00	Write   [0:0x3010] = d3b
001355	43 00 00 00 20 00	Wait    4, Tc
001356	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001357	43 00 00 00 20 00	Wait    4, Tc
001358	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001359	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00135a	c4 33 01 00 20 00	Branch  0x133c, [CALL] < IQCalTuneNco >
00135b	00 08 98 9b 06 00	Write   [0:0x3010] = d37
00135c	74 34 01 00 20 00	Branch  0x1347, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00135d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00135e	53 64 00 00 20 00	Wait    1605, Tc
00135f	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001360	43 00 00 00 20 00	Wait    4, Tc
001361	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
001362	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
001363	33 00 00 00 20 00	Wait    3, Tc
001364	00 08 98 9d 06 00	Write   [0:0x3010] = d3b
001365	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001366	00 08 98 0c 05 00	Write   [0:0x3010] = a19
001367	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001368	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001369	43 00 00 00 20 00	Wait    4, Tc
00136a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00136b	43 00 00 00 20 00	Wait    4, Tc
00136c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00136d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00136e	33 00 00 00 20 00	Wait    3, Tc
00136f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001370	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001371	00 08 18 a1 06 00	Write   [0:0x3010] = d42
001372	43 00 00 00 20 00	Wait    4, Tc
001373	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001374	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001375	33 00 00 00 20 00	Wait    3, Tc
001376	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001377	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001378	00 08 18 a2 06 00	Write   [0:0x3010] = d44
001379	43 00 00 00 20 00	Wait    4, Tc
00137a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00137b	43 00 00 00 20 00	Wait    4, Tc
00137c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00137d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00137e	04 36 01 00 20 00	Branch  0x1360, [CALL] < IQCalTuneNco >
00137f	00 08 18 a0 06 00	Write   [0:0x3010] = d40
001380	b4 36 01 00 20 00	Branch  0x136b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001381	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001382	53 64 00 00 20 00	Wait    1605, Tc
001383	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001384	43 00 00 00 20 00	Wait    4, Tc
001385	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
001386	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
001387	33 00 00 00 20 00	Wait    3, Tc
001388	00 08 18 a2 06 00	Write   [0:0x3010] = d44
001389	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00138a	00 08 98 0c 05 00	Write   [0:0x3010] = a19
00138b	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00138c	00 08 18 59 06 00	Write   [0:0x3010] = cb2
00138d	43 00 00 00 20 00	Wait    4, Tc
00138e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00138f	43 00 00 00 20 00	Wait    4, Tc
001390	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001391	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001392	33 00 00 00 20 00	Wait    3, Tc
001393	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001394	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001395	00 08 98 a5 06 00	Write   [0:0x3010] = d4b
001396	43 00 00 00 20 00	Wait    4, Tc
001397	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001398	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001399	33 00 00 00 20 00	Wait    3, Tc
00139a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00139b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00139c	00 08 98 a6 06 00	Write   [0:0x3010] = d4d
00139d	43 00 00 00 20 00	Wait    4, Tc
00139e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00139f	43 00 00 00 20 00	Wait    4, Tc
0013a0	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0013a1	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0013a2	44 38 01 00 20 00	Branch  0x1384, [CALL] < IQCalTuneNco >
0013a3	00 08 98 a4 06 00	Write   [0:0x3010] = d49
0013a4	f4 38 01 00 20 00	Branch  0x138f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0013a5	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0013a6	53 64 00 00 20 00	Wait    1605, Tc
0013a7	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0013a8	43 00 00 00 20 00	Wait    4, Tc
0013a9	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0013aa	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0013ab	33 00 00 00 20 00	Wait    3, Tc
0013ac	00 08 98 a6 06 00	Write   [0:0x3010] = d4d
0013ad	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0013ae	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0013af	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0013b0	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0013b1	43 00 00 00 20 00	Wait    4, Tc
0013b2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0013b3	43 00 00 00 20 00	Wait    4, Tc
0013b4	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0013b5	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0013b6	33 00 00 00 20 00	Wait    3, Tc
0013b7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0013b8	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0013b9	00 08 18 aa 06 00	Write   [0:0x3010] = d54
0013ba	43 00 00 00 20 00	Wait    4, Tc
0013bb	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0013bc	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0013bd	33 00 00 00 20 00	Wait    3, Tc
0013be	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0013bf	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0013c0	00 08 18 ab 06 00	Write   [0:0x3010] = d56
0013c1	43 00 00 00 20 00	Wait    4, Tc
0013c2	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0013c3	43 00 00 00 20 00	Wait    4, Tc
0013c4	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0013c5	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0013c6	84 3a 01 00 20 00	Branch  0x13a8, [CALL] < IQCalTuneNco >
0013c7	00 08 18 a9 06 00	Write   [0:0x3010] = d52
0013c8	34 3b 01 00 20 00	Branch  0x13b3, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0013c9	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0013ca	53 64 00 00 20 00	Wait    1605, Tc
0013cb	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0013cc	43 00 00 00 20 00	Wait    4, Tc
0013cd	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0013ce	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0013cf	33 00 00 00 20 00	Wait    3, Tc
0013d0	00 08 18 ab 06 00	Write   [0:0x3010] = d56
0013d1	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0013d2	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0013d3	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0013d4	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0013d5	43 00 00 00 20 00	Wait    4, Tc
0013d6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0013d7	43 00 00 00 20 00	Wait    4, Tc
0013d8	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0013d9	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0013da	33 00 00 00 20 00	Wait    3, Tc
0013db	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0013dc	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0013dd	00 08 98 ae 06 00	Write   [0:0x3010] = d5d
0013de	43 00 00 00 20 00	Wait    4, Tc
0013df	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0013e0	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0013e1	33 00 00 00 20 00	Wait    3, Tc
0013e2	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0013e3	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0013e4	00 08 98 af 06 00	Write   [0:0x3010] = d5f
0013e5	43 00 00 00 20 00	Wait    4, Tc
0013e6	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0013e7	43 00 00 00 20 00	Wait    4, Tc
0013e8	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0013e9	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0013ea	c4 3c 01 00 20 00	Branch  0x13cc, [CALL] < IQCalTuneNco >
0013eb	00 08 98 ad 06 00	Write   [0:0x3010] = d5b
0013ec	74 3d 01 00 20 00	Branch  0x13d7, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0013ed	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0013ee	53 64 00 00 20 00	Wait    1605, Tc
0013ef	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0013f0	43 00 00 00 20 00	Wait    4, Tc
0013f1	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0013f2	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0013f3	33 00 00 00 20 00	Wait    3, Tc
0013f4	00 08 98 af 06 00	Write   [0:0x3010] = d5f
0013f5	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0013f6	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0013f7	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0013f8	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0013f9	43 00 00 00 20 00	Wait    4, Tc
0013fa	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0013fb	43 00 00 00 20 00	Wait    4, Tc
0013fc	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0013fd	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0013fe	33 00 00 00 20 00	Wait    3, Tc
0013ff	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001400	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001401	00 08 18 b3 06 00	Write   [0:0x3010] = d66
001402	43 00 00 00 20 00	Wait    4, Tc
001403	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001404	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001405	33 00 00 00 20 00	Wait    3, Tc
001406	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001407	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001408	00 08 18 b4 06 00	Write   [0:0x3010] = d68
001409	43 00 00 00 20 00	Wait    4, Tc
00140a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00140b	43 00 00 00 20 00	Wait    4, Tc
00140c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00140d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00140e	04 3f 01 00 20 00	Branch  0x13f0, [CALL] < IQCalTuneNco >
00140f	00 08 18 b2 06 00	Write   [0:0x3010] = d64
001410	b4 3f 01 00 20 00	Branch  0x13fb, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001411	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001412	53 64 00 00 20 00	Wait    1605, Tc
001413	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001414	43 00 00 00 20 00	Wait    4, Tc
001415	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
001416	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
001417	33 00 00 00 20 00	Wait    3, Tc
001418	00 08 18 b4 06 00	Write   [0:0x3010] = d68
001419	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00141a	00 08 98 0c 05 00	Write   [0:0x3010] = a19
00141b	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00141c	00 08 18 59 06 00	Write   [0:0x3010] = cb2
00141d	43 00 00 00 20 00	Wait    4, Tc
00141e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00141f	43 00 00 00 20 00	Wait    4, Tc
001420	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001421	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001422	33 00 00 00 20 00	Wait    3, Tc
001423	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001424	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001425	00 08 98 b7 06 00	Write   [0:0x3010] = d6f
001426	43 00 00 00 20 00	Wait    4, Tc
001427	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001428	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001429	33 00 00 00 20 00	Wait    3, Tc
00142a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00142b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00142c	00 08 98 b8 06 00	Write   [0:0x3010] = d71
00142d	43 00 00 00 20 00	Wait    4, Tc
00142e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00142f	43 00 00 00 20 00	Wait    4, Tc
001430	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001431	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001432	44 41 01 00 20 00	Branch  0x1414, [CALL] < IQCalTuneNco >
001433	00 08 98 b6 06 00	Write   [0:0x3010] = d6d
001434	f4 41 01 00 20 00	Branch  0x141f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001435	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001436	53 64 00 00 20 00	Wait    1605, Tc
001437	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001438	43 00 00 00 20 00	Wait    4, Tc
001439	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00143a	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00143b	33 00 00 00 20 00	Wait    3, Tc
00143c	00 08 98 b8 06 00	Write   [0:0x3010] = d71
00143d	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00143e	00 08 98 0c 05 00	Write   [0:0x3010] = a19
00143f	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001440	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001441	43 00 00 00 20 00	Wait    4, Tc
001442	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001443	43 00 00 00 20 00	Wait    4, Tc
001444	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001445	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001446	33 00 00 00 20 00	Wait    3, Tc
001447	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001448	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001449	00 08 18 bc 06 00	Write   [0:0x3010] = d78
00144a	43 00 00 00 20 00	Wait    4, Tc
00144b	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00144c	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00144d	33 00 00 00 20 00	Wait    3, Tc
00144e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00144f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001450	00 08 18 bd 06 00	Write   [0:0x3010] = d7a
001451	43 00 00 00 20 00	Wait    4, Tc
001452	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001453	43 00 00 00 20 00	Wait    4, Tc
001454	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001455	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001456	84 43 01 00 20 00	Branch  0x1438, [CALL] < IQCalTuneNco >
001457	00 08 18 bb 06 00	Write   [0:0x3010] = d76
001458	34 44 01 00 20 00	Branch  0x1443, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001459	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00145a	53 64 00 00 20 00	Wait    1605, Tc
00145b	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00145c	43 00 00 00 20 00	Wait    4, Tc
00145d	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00145e	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00145f	33 00 00 00 20 00	Wait    3, Tc
001460	00 08 18 bd 06 00	Write   [0:0x3010] = d7a
001461	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001462	00 08 98 0c 05 00	Write   [0:0x3010] = a19
001463	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001464	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001465	43 00 00 00 20 00	Wait    4, Tc
001466	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001467	43 00 00 00 20 00	Wait    4, Tc
001468	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001469	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00146a	33 00 00 00 20 00	Wait    3, Tc
00146b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00146c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00146d	00 08 98 c0 06 00	Write   [0:0x3010] = d81
00146e	43 00 00 00 20 00	Wait    4, Tc
00146f	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001470	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001471	33 00 00 00 20 00	Wait    3, Tc
001472	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001473	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001474	00 08 98 c1 06 00	Write   [0:0x3010] = d83
001475	43 00 00 00 20 00	Wait    4, Tc
001476	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001477	43 00 00 00 20 00	Wait    4, Tc
001478	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001479	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00147a	c4 45 01 00 20 00	Branch  0x145c, [CALL] < IQCalTuneNco >
00147b	00 08 98 bf 06 00	Write   [0:0x3010] = d7f
00147c	74 46 01 00 20 00	Branch  0x1467, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00147d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00147e	53 64 00 00 20 00	Wait    1605, Tc
00147f	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
001480	43 00 00 00 20 00	Wait    4, Tc
001481	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
001482	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
001483	33 00 00 00 20 00	Wait    3, Tc
001484	00 08 98 c1 06 00	Write   [0:0x3010] = d83
001485	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001486	00 08 98 0c 05 00	Write   [0:0x3010] = a19
001487	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
001488	00 08 18 59 06 00	Write   [0:0x3010] = cb2
001489	43 00 00 00 20 00	Wait    4, Tc
00148a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00148b	43 00 00 00 20 00	Wait    4, Tc
00148c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00148d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00148e	33 00 00 00 20 00	Wait    3, Tc
00148f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001490	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001491	00 08 18 c5 06 00	Write   [0:0x3010] = d8a
001492	43 00 00 00 20 00	Wait    4, Tc
001493	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001494	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001495	33 00 00 00 20 00	Wait    3, Tc
001496	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001497	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001498	00 08 18 c6 06 00	Write   [0:0x3010] = d8c
001499	43 00 00 00 20 00	Wait    4, Tc
00149a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00149b	43 00 00 00 20 00	Wait    4, Tc
00149c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00149d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00149e	04 48 01 00 20 00	Branch  0x1480, [CALL] < IQCalTuneNco >
00149f	00 08 18 c4 06 00	Write   [0:0x3010] = d88
0014a0	b4 48 01 00 20 00	Branch  0x148b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0014a1	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0014a2	53 64 00 00 20 00	Wait    1605, Tc
0014a3	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0014a4	43 00 00 00 20 00	Wait    4, Tc
0014a5	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0014a6	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0014a7	33 00 00 00 20 00	Wait    3, Tc
0014a8	00 08 18 c6 06 00	Write   [0:0x3010] = d8c
0014a9	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0014aa	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0014ab	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0014ac	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0014ad	43 00 00 00 20 00	Wait    4, Tc
0014ae	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0014af	43 00 00 00 20 00	Wait    4, Tc
0014b0	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0014b1	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0014b2	33 00 00 00 20 00	Wait    3, Tc
0014b3	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0014b4	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0014b5	00 08 98 c9 06 00	Write   [0:0x3010] = d93
0014b6	43 00 00 00 20 00	Wait    4, Tc
0014b7	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0014b8	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0014b9	33 00 00 00 20 00	Wait    3, Tc
0014ba	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0014bb	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0014bc	00 08 98 ca 06 00	Write   [0:0x3010] = d95
0014bd	43 00 00 00 20 00	Wait    4, Tc
0014be	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0014bf	43 00 00 00 20 00	Wait    4, Tc
0014c0	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0014c1	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0014c2	44 4a 01 00 20 00	Branch  0x14a4, [CALL] < IQCalTuneNco >
0014c3	00 08 98 c8 06 00	Write   [0:0x3010] = d91
0014c4	f4 4a 01 00 20 00	Branch  0x14af, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0014c5	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0014c6	53 64 00 00 20 00	Wait    1605, Tc
0014c7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0014c8	43 00 00 00 20 00	Wait    4, Tc
0014c9	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0014ca	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0014cb	33 00 00 00 20 00	Wait    3, Tc
0014cc	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0014cd	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0014ce	00 08 98 cb 06 00	Write   [0:0x3010] = d97
0014cf	43 00 00 00 20 00	Wait    4, Tc
0014d0	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0014d1	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0014d2	33 00 00 00 20 00	Wait    3, Tc
0014d3	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0014d4	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0014d5	00 08 98 cc 06 00	Write   [0:0x3010] = d99
0014d6	43 00 00 00 20 00	Wait    4, Tc
0014d7	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0014d8	43 00 00 00 20 00	Wait    4, Tc
0014d9	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0014da	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0014db	44 1d 01 00 20 00	Branch  0x11d4, [CALL] < IQCalTuneNco >
0014dc	00 08 98 ca 06 00	Write   [0:0x3010] = d95
0014dd	84 4c 01 00 20 00	Branch  0x14c8, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0014de	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0014df	53 64 00 00 20 00	Wait    1605, Tc
0014e0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0014e1	43 00 00 00 20 00	Wait    4, Tc
0014e2	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0014e3	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0014e4	33 00 00 00 20 00	Wait    3, Tc
0014e5	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0014e6	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0014e7	00 08 98 cd 06 00	Write   [0:0x3010] = d9b
0014e8	43 00 00 00 20 00	Wait    4, Tc
0014e9	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0014ea	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0014eb	33 00 00 00 20 00	Wait    3, Tc
0014ec	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0014ed	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0014ee	00 08 98 ce 06 00	Write   [0:0x3010] = d9d
0014ef	43 00 00 00 20 00	Wait    4, Tc
0014f0	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0014f1	43 00 00 00 20 00	Wait    4, Tc
0014f2	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0014f3	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0014f4	84 1f 01 00 20 00	Branch  0x11f8, [CALL] < IQCalTuneNco >
0014f5	00 08 98 cc 06 00	Write   [0:0x3010] = d99
0014f6	14 4e 01 00 20 00	Branch  0x14e1, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0014f7	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0014f8	53 64 00 00 20 00	Wait    1605, Tc
0014f9	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0014fa	43 00 00 00 20 00	Wait    4, Tc
0014fb	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0014fc	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0014fd	33 00 00 00 20 00	Wait    3, Tc
0014fe	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0014ff	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001500	00 08 98 cf 06 00	Write   [0:0x3010] = d9f
001501	43 00 00 00 20 00	Wait    4, Tc
001502	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001503	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001504	33 00 00 00 20 00	Wait    3, Tc
001505	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001506	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001507	00 08 98 d0 06 00	Write   [0:0x3010] = da1
001508	43 00 00 00 20 00	Wait    4, Tc
001509	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00150a	43 00 00 00 20 00	Wait    4, Tc
00150b	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00150c	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00150d	c4 21 01 00 20 00	Branch  0x121c, [CALL] < IQCalTuneNco >
00150e	00 08 98 ce 06 00	Write   [0:0x3010] = d9d
00150f	a4 4f 01 00 20 00	Branch  0x14fa, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001510	00 08 18 3c 05 00	Write   [0:0x3010] = a78
001511	53 64 00 00 20 00	Wait    1605, Tc
001512	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001513	43 00 00 00 20 00	Wait    4, Tc
001514	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001515	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001516	33 00 00 00 20 00	Wait    3, Tc
001517	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001518	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001519	00 08 98 d1 06 00	Write   [0:0x3010] = da3
00151a	43 00 00 00 20 00	Wait    4, Tc
00151b	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00151c	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00151d	33 00 00 00 20 00	Wait    3, Tc
00151e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00151f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001520	00 08 98 d2 06 00	Write   [0:0x3010] = da5
001521	43 00 00 00 20 00	Wait    4, Tc
001522	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001523	43 00 00 00 20 00	Wait    4, Tc
001524	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001525	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001526	04 24 01 00 20 00	Branch  0x1240, [CALL] < IQCalTuneNco >
001527	00 08 98 d0 06 00	Write   [0:0x3010] = da1
001528	34 51 01 00 20 00	Branch  0x1513, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001529	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00152a	53 64 00 00 20 00	Wait    1605, Tc
00152b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00152c	43 00 00 00 20 00	Wait    4, Tc
00152d	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00152e	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00152f	33 00 00 00 20 00	Wait    3, Tc
001530	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001531	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001532	00 08 98 d3 06 00	Write   [0:0x3010] = da7
001533	43 00 00 00 20 00	Wait    4, Tc
001534	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001535	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001536	33 00 00 00 20 00	Wait    3, Tc
001537	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001538	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001539	00 08 98 d4 06 00	Write   [0:0x3010] = da9
00153a	43 00 00 00 20 00	Wait    4, Tc
00153b	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00153c	43 00 00 00 20 00	Wait    4, Tc
00153d	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00153e	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00153f	44 26 01 00 20 00	Branch  0x1264, [CALL] < IQCalTuneNco >
001540	00 08 98 d2 06 00	Write   [0:0x3010] = da5
001541	c4 52 01 00 20 00	Branch  0x152c, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001542	00 08 18 3c 05 00	Write   [0:0x3010] = a78
001543	53 64 00 00 20 00	Wait    1605, Tc
001544	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001545	43 00 00 00 20 00	Wait    4, Tc
001546	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001547	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001548	33 00 00 00 20 00	Wait    3, Tc
001549	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00154a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00154b	00 08 98 d5 06 00	Write   [0:0x3010] = dab
00154c	43 00 00 00 20 00	Wait    4, Tc
00154d	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00154e	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00154f	33 00 00 00 20 00	Wait    3, Tc
001550	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001551	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001552	00 08 98 d6 06 00	Write   [0:0x3010] = dad
001553	43 00 00 00 20 00	Wait    4, Tc
001554	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001555	43 00 00 00 20 00	Wait    4, Tc
001556	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001557	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001558	84 28 01 00 20 00	Branch  0x1288, [CALL] < IQCalTuneNco >
001559	00 08 98 d4 06 00	Write   [0:0x3010] = da9
00155a	54 54 01 00 20 00	Branch  0x1545, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00155b	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00155c	53 64 00 00 20 00	Wait    1605, Tc
00155d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00155e	43 00 00 00 20 00	Wait    4, Tc
00155f	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001560	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001561	33 00 00 00 20 00	Wait    3, Tc
001562	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001563	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001564	00 08 98 d7 06 00	Write   [0:0x3010] = daf
001565	43 00 00 00 20 00	Wait    4, Tc
001566	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001567	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001568	33 00 00 00 20 00	Wait    3, Tc
001569	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00156a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00156b	00 08 98 d8 06 00	Write   [0:0x3010] = db1
00156c	43 00 00 00 20 00	Wait    4, Tc
00156d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00156e	43 00 00 00 20 00	Wait    4, Tc
00156f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001570	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001571	c4 2a 01 00 20 00	Branch  0x12ac, [CALL] < IQCalTuneNco >
001572	00 08 98 d6 06 00	Write   [0:0x3010] = dad
001573	e4 55 01 00 20 00	Branch  0x155e, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001574	00 08 18 3c 05 00	Write   [0:0x3010] = a78
001575	53 64 00 00 20 00	Wait    1605, Tc
001576	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001577	43 00 00 00 20 00	Wait    4, Tc
001578	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001579	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00157a	33 00 00 00 20 00	Wait    3, Tc
00157b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00157c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00157d	00 08 98 d9 06 00	Write   [0:0x3010] = db3
00157e	43 00 00 00 20 00	Wait    4, Tc
00157f	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001580	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001581	33 00 00 00 20 00	Wait    3, Tc
001582	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001583	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001584	00 08 98 da 06 00	Write   [0:0x3010] = db5
001585	43 00 00 00 20 00	Wait    4, Tc
001586	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001587	43 00 00 00 20 00	Wait    4, Tc
001588	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001589	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00158a	04 2d 01 00 20 00	Branch  0x12d0, [CALL] < IQCalTuneNco >
00158b	00 08 98 d8 06 00	Write   [0:0x3010] = db1
00158c	74 57 01 00 20 00	Branch  0x1577, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00158d	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00158e	53 64 00 00 20 00	Wait    1605, Tc
00158f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001590	43 00 00 00 20 00	Wait    4, Tc
001591	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001592	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001593	33 00 00 00 20 00	Wait    3, Tc
001594	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001595	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001596	00 08 98 db 06 00	Write   [0:0x3010] = db7
001597	43 00 00 00 20 00	Wait    4, Tc
001598	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001599	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00159a	33 00 00 00 20 00	Wait    3, Tc
00159b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00159c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00159d	00 08 98 dc 06 00	Write   [0:0x3010] = db9
00159e	43 00 00 00 20 00	Wait    4, Tc
00159f	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0015a0	43 00 00 00 20 00	Wait    4, Tc
0015a1	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0015a2	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0015a3	44 2f 01 00 20 00	Branch  0x12f4, [CALL] < IQCalTuneNco >
0015a4	00 08 98 da 06 00	Write   [0:0x3010] = db5
0015a5	04 59 01 00 20 00	Branch  0x1590, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0015a6	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0015a7	53 64 00 00 20 00	Wait    1605, Tc
0015a8	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0015a9	43 00 00 00 20 00	Wait    4, Tc
0015aa	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0015ab	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0015ac	33 00 00 00 20 00	Wait    3, Tc
0015ad	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0015ae	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0015af	00 08 98 dd 06 00	Write   [0:0x3010] = dbb
0015b0	43 00 00 00 20 00	Wait    4, Tc
0015b1	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0015b2	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0015b3	33 00 00 00 20 00	Wait    3, Tc
0015b4	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0015b5	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0015b6	00 08 98 de 06 00	Write   [0:0x3010] = dbd
0015b7	43 00 00 00 20 00	Wait    4, Tc
0015b8	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0015b9	43 00 00 00 20 00	Wait    4, Tc
0015ba	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0015bb	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0015bc	84 31 01 00 20 00	Branch  0x1318, [CALL] < IQCalTuneNco >
0015bd	00 08 98 dc 06 00	Write   [0:0x3010] = db9
0015be	94 5a 01 00 20 00	Branch  0x15a9, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0015bf	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0015c0	53 64 00 00 20 00	Wait    1605, Tc
0015c1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0015c2	43 00 00 00 20 00	Wait    4, Tc
0015c3	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0015c4	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0015c5	33 00 00 00 20 00	Wait    3, Tc
0015c6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0015c7	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0015c8	00 08 98 df 06 00	Write   [0:0x3010] = dbf
0015c9	43 00 00 00 20 00	Wait    4, Tc
0015ca	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0015cb	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0015cc	33 00 00 00 20 00	Wait    3, Tc
0015cd	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0015ce	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0015cf	00 08 98 e0 06 00	Write   [0:0x3010] = dc1
0015d0	43 00 00 00 20 00	Wait    4, Tc
0015d1	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0015d2	43 00 00 00 20 00	Wait    4, Tc
0015d3	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0015d4	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0015d5	c4 33 01 00 20 00	Branch  0x133c, [CALL] < IQCalTuneNco >
0015d6	00 08 98 de 06 00	Write   [0:0x3010] = dbd
0015d7	24 5c 01 00 20 00	Branch  0x15c2, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0015d8	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0015d9	53 64 00 00 20 00	Wait    1605, Tc
0015da	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0015db	43 00 00 00 20 00	Wait    4, Tc
0015dc	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0015dd	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0015de	33 00 00 00 20 00	Wait    3, Tc
0015df	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0015e0	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0015e1	00 08 98 e1 06 00	Write   [0:0x3010] = dc3
0015e2	43 00 00 00 20 00	Wait    4, Tc
0015e3	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0015e4	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0015e5	33 00 00 00 20 00	Wait    3, Tc
0015e6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0015e7	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0015e8	00 08 98 e2 06 00	Write   [0:0x3010] = dc5
0015e9	43 00 00 00 20 00	Wait    4, Tc
0015ea	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0015eb	43 00 00 00 20 00	Wait    4, Tc
0015ec	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0015ed	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0015ee	04 36 01 00 20 00	Branch  0x1360, [CALL] < IQCalTuneNco >
0015ef	00 08 98 e0 06 00	Write   [0:0x3010] = dc1
0015f0	b4 5d 01 00 20 00	Branch  0x15db, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0015f1	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0015f2	53 64 00 00 20 00	Wait    1605, Tc
0015f3	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0015f4	43 00 00 00 20 00	Wait    4, Tc
0015f5	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0015f6	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0015f7	33 00 00 00 20 00	Wait    3, Tc
0015f8	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0015f9	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0015fa	00 08 98 e3 06 00	Write   [0:0x3010] = dc7
0015fb	43 00 00 00 20 00	Wait    4, Tc
0015fc	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0015fd	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0015fe	33 00 00 00 20 00	Wait    3, Tc
0015ff	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001600	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001601	00 08 98 e4 06 00	Write   [0:0x3010] = dc9
001602	43 00 00 00 20 00	Wait    4, Tc
001603	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001604	43 00 00 00 20 00	Wait    4, Tc
001605	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001606	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001607	44 38 01 00 20 00	Branch  0x1384, [CALL] < IQCalTuneNco >
001608	00 08 98 e2 06 00	Write   [0:0x3010] = dc5
001609	44 5f 01 00 20 00	Branch  0x15f4, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00160a	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00160b	53 64 00 00 20 00	Wait    1605, Tc
00160c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00160d	43 00 00 00 20 00	Wait    4, Tc
00160e	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00160f	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001610	33 00 00 00 20 00	Wait    3, Tc
001611	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001612	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001613	00 08 98 e5 06 00	Write   [0:0x3010] = dcb
001614	43 00 00 00 20 00	Wait    4, Tc
001615	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001616	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001617	33 00 00 00 20 00	Wait    3, Tc
001618	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001619	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00161a	00 08 98 e6 06 00	Write   [0:0x3010] = dcd
00161b	43 00 00 00 20 00	Wait    4, Tc
00161c	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00161d	43 00 00 00 20 00	Wait    4, Tc
00161e	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00161f	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001620	84 3a 01 00 20 00	Branch  0x13a8, [CALL] < IQCalTuneNco >
001621	00 08 98 e4 06 00	Write   [0:0x3010] = dc9
001622	d4 60 01 00 20 00	Branch  0x160d, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001623	00 08 18 3c 05 00	Write   [0:0x3010] = a78
001624	53 64 00 00 20 00	Wait    1605, Tc
001625	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001626	43 00 00 00 20 00	Wait    4, Tc
001627	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001628	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001629	33 00 00 00 20 00	Wait    3, Tc
00162a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00162b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00162c	00 08 98 e7 06 00	Write   [0:0x3010] = dcf
00162d	43 00 00 00 20 00	Wait    4, Tc
00162e	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00162f	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001630	33 00 00 00 20 00	Wait    3, Tc
001631	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001632	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001633	00 08 98 e8 06 00	Write   [0:0x3010] = dd1
001634	43 00 00 00 20 00	Wait    4, Tc
001635	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001636	43 00 00 00 20 00	Wait    4, Tc
001637	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001638	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001639	c4 3c 01 00 20 00	Branch  0x13cc, [CALL] < IQCalTuneNco >
00163a	00 08 98 e6 06 00	Write   [0:0x3010] = dcd
00163b	64 62 01 00 20 00	Branch  0x1626, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00163c	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00163d	53 64 00 00 20 00	Wait    1605, Tc
00163e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00163f	43 00 00 00 20 00	Wait    4, Tc
001640	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001641	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001642	33 00 00 00 20 00	Wait    3, Tc
001643	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001644	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001645	00 08 98 e9 06 00	Write   [0:0x3010] = dd3
001646	43 00 00 00 20 00	Wait    4, Tc
001647	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001648	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001649	33 00 00 00 20 00	Wait    3, Tc
00164a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00164b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00164c	00 08 98 ea 06 00	Write   [0:0x3010] = dd5
00164d	43 00 00 00 20 00	Wait    4, Tc
00164e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00164f	43 00 00 00 20 00	Wait    4, Tc
001650	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001651	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001652	04 3f 01 00 20 00	Branch  0x13f0, [CALL] < IQCalTuneNco >
001653	00 08 98 e8 06 00	Write   [0:0x3010] = dd1
001654	f4 63 01 00 20 00	Branch  0x163f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001655	00 08 18 3c 05 00	Write   [0:0x3010] = a78
001656	53 64 00 00 20 00	Wait    1605, Tc
001657	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001658	43 00 00 00 20 00	Wait    4, Tc
001659	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00165a	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00165b	33 00 00 00 20 00	Wait    3, Tc
00165c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00165d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00165e	00 08 98 eb 06 00	Write   [0:0x3010] = dd7
00165f	43 00 00 00 20 00	Wait    4, Tc
001660	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001661	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001662	33 00 00 00 20 00	Wait    3, Tc
001663	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001664	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001665	00 08 98 ec 06 00	Write   [0:0x3010] = dd9
001666	43 00 00 00 20 00	Wait    4, Tc
001667	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001668	43 00 00 00 20 00	Wait    4, Tc
001669	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00166a	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00166b	44 41 01 00 20 00	Branch  0x1414, [CALL] < IQCalTuneNco >
00166c	00 08 98 ea 06 00	Write   [0:0x3010] = dd5
00166d	84 65 01 00 20 00	Branch  0x1658, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00166e	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00166f	53 64 00 00 20 00	Wait    1605, Tc
001670	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001671	43 00 00 00 20 00	Wait    4, Tc
001672	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001673	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001674	33 00 00 00 20 00	Wait    3, Tc
001675	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001676	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001677	00 08 98 ed 06 00	Write   [0:0x3010] = ddb
001678	43 00 00 00 20 00	Wait    4, Tc
001679	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00167a	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00167b	33 00 00 00 20 00	Wait    3, Tc
00167c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00167d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00167e	00 08 98 ee 06 00	Write   [0:0x3010] = ddd
00167f	43 00 00 00 20 00	Wait    4, Tc
001680	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001681	43 00 00 00 20 00	Wait    4, Tc
001682	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001683	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001684	84 43 01 00 20 00	Branch  0x1438, [CALL] < IQCalTuneNco >
001685	00 08 98 ec 06 00	Write   [0:0x3010] = dd9
001686	14 67 01 00 20 00	Branch  0x1671, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001687	00 08 18 3c 05 00	Write   [0:0x3010] = a78
001688	53 64 00 00 20 00	Wait    1605, Tc
001689	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00168a	43 00 00 00 20 00	Wait    4, Tc
00168b	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00168c	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00168d	33 00 00 00 20 00	Wait    3, Tc
00168e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00168f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001690	00 08 98 ef 06 00	Write   [0:0x3010] = ddf
001691	43 00 00 00 20 00	Wait    4, Tc
001692	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001693	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001694	33 00 00 00 20 00	Wait    3, Tc
001695	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001696	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001697	00 08 98 f0 06 00	Write   [0:0x3010] = de1
001698	43 00 00 00 20 00	Wait    4, Tc
001699	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00169a	43 00 00 00 20 00	Wait    4, Tc
00169b	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00169c	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00169d	c4 45 01 00 20 00	Branch  0x145c, [CALL] < IQCalTuneNco >
00169e	00 08 98 ee 06 00	Write   [0:0x3010] = ddd
00169f	a4 68 01 00 20 00	Branch  0x168a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0016a0	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0016a1	53 64 00 00 20 00	Wait    1605, Tc
0016a2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0016a3	43 00 00 00 20 00	Wait    4, Tc
0016a4	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0016a5	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0016a6	33 00 00 00 20 00	Wait    3, Tc
0016a7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0016a8	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0016a9	00 08 98 f1 06 00	Write   [0:0x3010] = de3
0016aa	43 00 00 00 20 00	Wait    4, Tc
0016ab	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0016ac	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0016ad	33 00 00 00 20 00	Wait    3, Tc
0016ae	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0016af	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0016b0	00 08 98 f2 06 00	Write   [0:0x3010] = de5
0016b1	43 00 00 00 20 00	Wait    4, Tc
0016b2	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0016b3	43 00 00 00 20 00	Wait    4, Tc
0016b4	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0016b5	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0016b6	04 48 01 00 20 00	Branch  0x1480, [CALL] < IQCalTuneNco >
0016b7	00 08 98 f0 06 00	Write   [0:0x3010] = de1
0016b8	34 6a 01 00 20 00	Branch  0x16a3, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0016b9	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0016ba	53 64 00 00 20 00	Wait    1605, Tc
0016bb	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0016bc	43 00 00 00 20 00	Wait    4, Tc
0016bd	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0016be	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0016bf	33 00 00 00 20 00	Wait    3, Tc
0016c0	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0016c1	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0016c2	00 08 98 f3 06 00	Write   [0:0x3010] = de7
0016c3	43 00 00 00 20 00	Wait    4, Tc
0016c4	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0016c5	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0016c6	33 00 00 00 20 00	Wait    3, Tc
0016c7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0016c8	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0016c9	00 08 98 f4 06 00	Write   [0:0x3010] = de9
0016ca	43 00 00 00 20 00	Wait    4, Tc
0016cb	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0016cc	43 00 00 00 20 00	Wait    4, Tc
0016cd	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0016ce	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0016cf	44 4a 01 00 20 00	Branch  0x14a4, [CALL] < IQCalTuneNco >
0016d0	00 08 98 f2 06 00	Write   [0:0x3010] = de5
0016d1	c4 6b 01 00 20 00	Branch  0x16bc, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0016d2	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0016d3	53 64 00 00 20 00	Wait    1605, Tc
0016d4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0016d5	43 00 00 00 20 00	Wait    4, Tc
0016d6	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0016d7	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0016d8	33 00 00 00 20 00	Wait    3, Tc
0016d9	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0016da	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0016db	00 08 98 f5 06 00	Write   [0:0x3010] = deb
0016dc	43 00 00 00 20 00	Wait    4, Tc
0016dd	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0016de	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0016df	33 00 00 00 20 00	Wait    3, Tc
0016e0	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0016e1	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0016e2	00 08 98 f6 06 00	Write   [0:0x3010] = ded
0016e3	43 00 00 00 20 00	Wait    4, Tc
0016e4	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0016e5	43 00 00 00 20 00	Wait    4, Tc
0016e6	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0016e7	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0016e8	44 1d 01 00 20 00	Branch  0x11d4, [CALL] < IQCalTuneNco >
0016e9	00 08 98 f4 06 00	Write   [0:0x3010] = de9
0016ea	54 6d 01 00 20 00	Branch  0x16d5, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0016eb	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0016ec	53 64 00 00 20 00	Wait    1605, Tc
0016ed	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0016ee	43 00 00 00 20 00	Wait    4, Tc
0016ef	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0016f0	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0016f1	33 00 00 00 20 00	Wait    3, Tc
0016f2	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0016f3	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0016f4	00 08 98 f7 06 00	Write   [0:0x3010] = def
0016f5	43 00 00 00 20 00	Wait    4, Tc
0016f6	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0016f7	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0016f8	33 00 00 00 20 00	Wait    3, Tc
0016f9	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0016fa	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0016fb	00 08 98 f8 06 00	Write   [0:0x3010] = df1
0016fc	43 00 00 00 20 00	Wait    4, Tc
0016fd	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0016fe	43 00 00 00 20 00	Wait    4, Tc
0016ff	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001700	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001701	84 1f 01 00 20 00	Branch  0x11f8, [CALL] < IQCalTuneNco >
001702	00 08 98 f6 06 00	Write   [0:0x3010] = ded
001703	e4 6e 01 00 20 00	Branch  0x16ee, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001704	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001705	53 64 00 00 20 00	Wait    1605, Tc
001706	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001707	43 00 00 00 20 00	Wait    4, Tc
001708	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001709	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00170a	33 00 00 00 20 00	Wait    3, Tc
00170b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00170c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00170d	00 08 98 f9 06 00	Write   [0:0x3010] = df3
00170e	43 00 00 00 20 00	Wait    4, Tc
00170f	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001710	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001711	33 00 00 00 20 00	Wait    3, Tc
001712	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001713	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001714	00 08 98 fa 06 00	Write   [0:0x3010] = df5
001715	43 00 00 00 20 00	Wait    4, Tc
001716	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001717	43 00 00 00 20 00	Wait    4, Tc
001718	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001719	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00171a	c4 21 01 00 20 00	Branch  0x121c, [CALL] < IQCalTuneNco >
00171b	00 08 98 f8 06 00	Write   [0:0x3010] = df1
00171c	74 70 01 00 20 00	Branch  0x1707, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00171d	00 08 98 3c 05 00	Write   [0:0x3010] = a79
00171e	53 64 00 00 20 00	Wait    1605, Tc
00171f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001720	43 00 00 00 20 00	Wait    4, Tc
001721	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001722	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001723	33 00 00 00 20 00	Wait    3, Tc
001724	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001725	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001726	00 08 98 fb 06 00	Write   [0:0x3010] = df7
001727	43 00 00 00 20 00	Wait    4, Tc
001728	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001729	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00172a	33 00 00 00 20 00	Wait    3, Tc
00172b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00172c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00172d	00 08 98 fc 06 00	Write   [0:0x3010] = df9
00172e	43 00 00 00 20 00	Wait    4, Tc
00172f	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001730	43 00 00 00 20 00	Wait    4, Tc
001731	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001732	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001733	04 24 01 00 20 00	Branch  0x1240, [CALL] < IQCalTuneNco >
001734	00 08 98 fa 06 00	Write   [0:0x3010] = df5
001735	04 72 01 00 20 00	Branch  0x1720, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001736	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001737	53 64 00 00 20 00	Wait    1605, Tc
001738	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001739	43 00 00 00 20 00	Wait    4, Tc
00173a	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00173b	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00173c	33 00 00 00 20 00	Wait    3, Tc
00173d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00173e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00173f	00 08 98 fd 06 00	Write   [0:0x3010] = dfb
001740	43 00 00 00 20 00	Wait    4, Tc
001741	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001742	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001743	33 00 00 00 20 00	Wait    3, Tc
001744	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001745	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001746	00 08 98 fe 06 00	Write   [0:0x3010] = dfd
001747	43 00 00 00 20 00	Wait    4, Tc
001748	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001749	43 00 00 00 20 00	Wait    4, Tc
00174a	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00174b	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00174c	44 26 01 00 20 00	Branch  0x1264, [CALL] < IQCalTuneNco >
00174d	00 08 98 fc 06 00	Write   [0:0x3010] = df9
00174e	94 73 01 00 20 00	Branch  0x1739, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00174f	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001750	53 64 00 00 20 00	Wait    1605, Tc
001751	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001752	43 00 00 00 20 00	Wait    4, Tc
001753	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001754	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001755	33 00 00 00 20 00	Wait    3, Tc
001756	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001757	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001758	00 08 98 ff 06 00	Write   [0:0x3010] = dff
001759	43 00 00 00 20 00	Wait    4, Tc
00175a	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00175b	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00175c	33 00 00 00 20 00	Wait    3, Tc
00175d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00175e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00175f	00 08 98 00 07 00	Write   [0:0x3010] = e01
001760	43 00 00 00 20 00	Wait    4, Tc
001761	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001762	43 00 00 00 20 00	Wait    4, Tc
001763	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001764	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001765	84 28 01 00 20 00	Branch  0x1288, [CALL] < IQCalTuneNco >
001766	00 08 98 fe 06 00	Write   [0:0x3010] = dfd
001767	24 75 01 00 20 00	Branch  0x1752, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001768	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001769	53 64 00 00 20 00	Wait    1605, Tc
00176a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00176b	43 00 00 00 20 00	Wait    4, Tc
00176c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00176d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00176e	33 00 00 00 20 00	Wait    3, Tc
00176f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001770	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001771	00 08 98 01 07 00	Write   [0:0x3010] = e03
001772	43 00 00 00 20 00	Wait    4, Tc
001773	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001774	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001775	33 00 00 00 20 00	Wait    3, Tc
001776	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001777	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001778	00 08 98 02 07 00	Write   [0:0x3010] = e05
001779	43 00 00 00 20 00	Wait    4, Tc
00177a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00177b	43 00 00 00 20 00	Wait    4, Tc
00177c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00177d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00177e	c4 2a 01 00 20 00	Branch  0x12ac, [CALL] < IQCalTuneNco >
00177f	00 08 98 00 07 00	Write   [0:0x3010] = e01
001780	b4 76 01 00 20 00	Branch  0x176b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001781	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001782	53 64 00 00 20 00	Wait    1605, Tc
001783	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001784	43 00 00 00 20 00	Wait    4, Tc
001785	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001786	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001787	33 00 00 00 20 00	Wait    3, Tc
001788	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001789	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00178a	00 08 98 03 07 00	Write   [0:0x3010] = e07
00178b	43 00 00 00 20 00	Wait    4, Tc
00178c	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00178d	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00178e	33 00 00 00 20 00	Wait    3, Tc
00178f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001790	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001791	00 08 98 04 07 00	Write   [0:0x3010] = e09
001792	43 00 00 00 20 00	Wait    4, Tc
001793	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001794	43 00 00 00 20 00	Wait    4, Tc
001795	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001796	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001797	04 2d 01 00 20 00	Branch  0x12d0, [CALL] < IQCalTuneNco >
001798	00 08 98 02 07 00	Write   [0:0x3010] = e05
001799	44 78 01 00 20 00	Branch  0x1784, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00179a	00 08 98 3c 05 00	Write   [0:0x3010] = a79
00179b	53 64 00 00 20 00	Wait    1605, Tc
00179c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00179d	43 00 00 00 20 00	Wait    4, Tc
00179e	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00179f	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0017a0	33 00 00 00 20 00	Wait    3, Tc
0017a1	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0017a2	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0017a3	00 08 98 05 07 00	Write   [0:0x3010] = e0b
0017a4	43 00 00 00 20 00	Wait    4, Tc
0017a5	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0017a6	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0017a7	33 00 00 00 20 00	Wait    3, Tc
0017a8	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0017a9	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0017aa	00 08 98 06 07 00	Write   [0:0x3010] = e0d
0017ab	43 00 00 00 20 00	Wait    4, Tc
0017ac	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0017ad	43 00 00 00 20 00	Wait    4, Tc
0017ae	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0017af	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0017b0	44 2f 01 00 20 00	Branch  0x12f4, [CALL] < IQCalTuneNco >
0017b1	00 08 98 04 07 00	Write   [0:0x3010] = e09
0017b2	d4 79 01 00 20 00	Branch  0x179d, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0017b3	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0017b4	53 64 00 00 20 00	Wait    1605, Tc
0017b5	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0017b6	43 00 00 00 20 00	Wait    4, Tc
0017b7	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0017b8	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0017b9	33 00 00 00 20 00	Wait    3, Tc
0017ba	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0017bb	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0017bc	00 08 98 07 07 00	Write   [0:0x3010] = e0f
0017bd	43 00 00 00 20 00	Wait    4, Tc
0017be	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0017bf	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0017c0	33 00 00 00 20 00	Wait    3, Tc
0017c1	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0017c2	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0017c3	00 08 98 08 07 00	Write   [0:0x3010] = e11
0017c4	43 00 00 00 20 00	Wait    4, Tc
0017c5	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0017c6	43 00 00 00 20 00	Wait    4, Tc
0017c7	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0017c8	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0017c9	84 31 01 00 20 00	Branch  0x1318, [CALL] < IQCalTuneNco >
0017ca	00 08 98 06 07 00	Write   [0:0x3010] = e0d
0017cb	64 7b 01 00 20 00	Branch  0x17b6, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0017cc	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0017cd	53 64 00 00 20 00	Wait    1605, Tc
0017ce	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0017cf	43 00 00 00 20 00	Wait    4, Tc
0017d0	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0017d1	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0017d2	33 00 00 00 20 00	Wait    3, Tc
0017d3	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0017d4	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0017d5	00 08 98 09 07 00	Write   [0:0x3010] = e13
0017d6	43 00 00 00 20 00	Wait    4, Tc
0017d7	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0017d8	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0017d9	33 00 00 00 20 00	Wait    3, Tc
0017da	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0017db	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0017dc	00 08 98 0a 07 00	Write   [0:0x3010] = e15
0017dd	43 00 00 00 20 00	Wait    4, Tc
0017de	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0017df	43 00 00 00 20 00	Wait    4, Tc
0017e0	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0017e1	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0017e2	c4 33 01 00 20 00	Branch  0x133c, [CALL] < IQCalTuneNco >
0017e3	00 08 98 08 07 00	Write   [0:0x3010] = e11
0017e4	f4 7c 01 00 20 00	Branch  0x17cf, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0017e5	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0017e6	53 64 00 00 20 00	Wait    1605, Tc
0017e7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0017e8	43 00 00 00 20 00	Wait    4, Tc
0017e9	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0017ea	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0017eb	33 00 00 00 20 00	Wait    3, Tc
0017ec	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0017ed	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0017ee	00 08 98 0b 07 00	Write   [0:0x3010] = e17
0017ef	43 00 00 00 20 00	Wait    4, Tc
0017f0	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0017f1	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0017f2	33 00 00 00 20 00	Wait    3, Tc
0017f3	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0017f4	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0017f5	00 08 98 0c 07 00	Write   [0:0x3010] = e19
0017f6	43 00 00 00 20 00	Wait    4, Tc
0017f7	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0017f8	43 00 00 00 20 00	Wait    4, Tc
0017f9	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0017fa	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0017fb	04 36 01 00 20 00	Branch  0x1360, [CALL] < IQCalTuneNco >
0017fc	00 08 98 0a 07 00	Write   [0:0x3010] = e15
0017fd	84 7e 01 00 20 00	Branch  0x17e8, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0017fe	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0017ff	53 64 00 00 20 00	Wait    1605, Tc
001800	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001801	43 00 00 00 20 00	Wait    4, Tc
001802	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001803	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001804	33 00 00 00 20 00	Wait    3, Tc
001805	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001806	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001807	00 08 98 0d 07 00	Write   [0:0x3010] = e1b
001808	43 00 00 00 20 00	Wait    4, Tc
001809	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00180a	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00180b	33 00 00 00 20 00	Wait    3, Tc
00180c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00180d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00180e	00 08 98 0e 07 00	Write   [0:0x3010] = e1d
00180f	43 00 00 00 20 00	Wait    4, Tc
001810	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001811	43 00 00 00 20 00	Wait    4, Tc
001812	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001813	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001814	44 38 01 00 20 00	Branch  0x1384, [CALL] < IQCalTuneNco >
001815	00 08 98 0c 07 00	Write   [0:0x3010] = e19
001816	14 80 01 00 20 00	Branch  0x1801, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001817	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001818	53 64 00 00 20 00	Wait    1605, Tc
001819	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00181a	43 00 00 00 20 00	Wait    4, Tc
00181b	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00181c	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00181d	33 00 00 00 20 00	Wait    3, Tc
00181e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00181f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001820	00 08 98 0f 07 00	Write   [0:0x3010] = e1f
001821	43 00 00 00 20 00	Wait    4, Tc
001822	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001823	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001824	33 00 00 00 20 00	Wait    3, Tc
001825	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001826	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001827	00 08 98 10 07 00	Write   [0:0x3010] = e21
001828	43 00 00 00 20 00	Wait    4, Tc
001829	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00182a	43 00 00 00 20 00	Wait    4, Tc
00182b	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00182c	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00182d	84 3a 01 00 20 00	Branch  0x13a8, [CALL] < IQCalTuneNco >
00182e	00 08 98 0e 07 00	Write   [0:0x3010] = e1d
00182f	a4 81 01 00 20 00	Branch  0x181a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001830	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001831	53 64 00 00 20 00	Wait    1605, Tc
001832	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001833	43 00 00 00 20 00	Wait    4, Tc
001834	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001835	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001836	33 00 00 00 20 00	Wait    3, Tc
001837	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001838	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001839	00 08 98 11 07 00	Write   [0:0x3010] = e23
00183a	43 00 00 00 20 00	Wait    4, Tc
00183b	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00183c	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00183d	33 00 00 00 20 00	Wait    3, Tc
00183e	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00183f	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001840	00 08 98 12 07 00	Write   [0:0x3010] = e25
001841	43 00 00 00 20 00	Wait    4, Tc
001842	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001843	43 00 00 00 20 00	Wait    4, Tc
001844	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001845	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001846	c4 3c 01 00 20 00	Branch  0x13cc, [CALL] < IQCalTuneNco >
001847	00 08 98 10 07 00	Write   [0:0x3010] = e21
001848	34 83 01 00 20 00	Branch  0x1833, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001849	00 08 98 3c 05 00	Write   [0:0x3010] = a79
00184a	53 64 00 00 20 00	Wait    1605, Tc
00184b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00184c	43 00 00 00 20 00	Wait    4, Tc
00184d	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00184e	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00184f	33 00 00 00 20 00	Wait    3, Tc
001850	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001851	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001852	00 08 98 13 07 00	Write   [0:0x3010] = e27
001853	43 00 00 00 20 00	Wait    4, Tc
001854	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001855	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001856	33 00 00 00 20 00	Wait    3, Tc
001857	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001858	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001859	00 08 98 14 07 00	Write   [0:0x3010] = e29
00185a	43 00 00 00 20 00	Wait    4, Tc
00185b	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00185c	43 00 00 00 20 00	Wait    4, Tc
00185d	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00185e	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00185f	04 3f 01 00 20 00	Branch  0x13f0, [CALL] < IQCalTuneNco >
001860	00 08 98 12 07 00	Write   [0:0x3010] = e25
001861	c4 84 01 00 20 00	Branch  0x184c, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001862	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001863	53 64 00 00 20 00	Wait    1605, Tc
001864	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001865	43 00 00 00 20 00	Wait    4, Tc
001866	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001867	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001868	33 00 00 00 20 00	Wait    3, Tc
001869	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00186a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00186b	00 08 98 15 07 00	Write   [0:0x3010] = e2b
00186c	43 00 00 00 20 00	Wait    4, Tc
00186d	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00186e	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00186f	33 00 00 00 20 00	Wait    3, Tc
001870	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001871	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001872	00 08 98 16 07 00	Write   [0:0x3010] = e2d
001873	43 00 00 00 20 00	Wait    4, Tc
001874	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001875	43 00 00 00 20 00	Wait    4, Tc
001876	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001877	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001878	44 41 01 00 20 00	Branch  0x1414, [CALL] < IQCalTuneNco >
001879	00 08 98 14 07 00	Write   [0:0x3010] = e29
00187a	54 86 01 00 20 00	Branch  0x1865, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00187b	00 08 98 3c 05 00	Write   [0:0x3010] = a79
00187c	53 64 00 00 20 00	Wait    1605, Tc
00187d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00187e	43 00 00 00 20 00	Wait    4, Tc
00187f	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001880	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001881	33 00 00 00 20 00	Wait    3, Tc
001882	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001883	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001884	00 08 98 17 07 00	Write   [0:0x3010] = e2f
001885	43 00 00 00 20 00	Wait    4, Tc
001886	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001887	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001888	33 00 00 00 20 00	Wait    3, Tc
001889	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00188a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00188b	00 08 98 18 07 00	Write   [0:0x3010] = e31
00188c	43 00 00 00 20 00	Wait    4, Tc
00188d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00188e	43 00 00 00 20 00	Wait    4, Tc
00188f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001890	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001891	84 43 01 00 20 00	Branch  0x1438, [CALL] < IQCalTuneNco >
001892	00 08 98 16 07 00	Write   [0:0x3010] = e2d
001893	e4 87 01 00 20 00	Branch  0x187e, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001894	00 08 98 3c 05 00	Write   [0:0x3010] = a79
001895	53 64 00 00 20 00	Wait    1605, Tc
001896	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001897	43 00 00 00 20 00	Wait    4, Tc
001898	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001899	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00189a	33 00 00 00 20 00	Wait    3, Tc
00189b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00189c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00189d	00 08 98 19 07 00	Write   [0:0x3010] = e33
00189e	43 00 00 00 20 00	Wait    4, Tc
00189f	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0018a0	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0018a1	33 00 00 00 20 00	Wait    3, Tc
0018a2	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0018a3	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0018a4	00 08 98 1a 07 00	Write   [0:0x3010] = e35
0018a5	43 00 00 00 20 00	Wait    4, Tc
0018a6	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0018a7	43 00 00 00 20 00	Wait    4, Tc
0018a8	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0018a9	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0018aa	c4 45 01 00 20 00	Branch  0x145c, [CALL] < IQCalTuneNco >
0018ab	00 08 98 18 07 00	Write   [0:0x3010] = e31
0018ac	74 89 01 00 20 00	Branch  0x1897, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0018ad	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0018ae	53 64 00 00 20 00	Wait    1605, Tc
0018af	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0018b0	43 00 00 00 20 00	Wait    4, Tc
0018b1	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0018b2	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0018b3	33 00 00 00 20 00	Wait    3, Tc
0018b4	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0018b5	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0018b6	00 08 98 1b 07 00	Write   [0:0x3010] = e37
0018b7	43 00 00 00 20 00	Wait    4, Tc
0018b8	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0018b9	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0018ba	33 00 00 00 20 00	Wait    3, Tc
0018bb	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0018bc	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0018bd	00 08 98 1c 07 00	Write   [0:0x3010] = e39
0018be	43 00 00 00 20 00	Wait    4, Tc
0018bf	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0018c0	43 00 00 00 20 00	Wait    4, Tc
0018c1	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0018c2	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0018c3	04 48 01 00 20 00	Branch  0x1480, [CALL] < IQCalTuneNco >
0018c4	00 08 98 1a 07 00	Write   [0:0x3010] = e35
0018c5	04 8b 01 00 20 00	Branch  0x18b0, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0018c6	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0018c7	53 64 00 00 20 00	Wait    1605, Tc
0018c8	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0018c9	43 00 00 00 20 00	Wait    4, Tc
0018ca	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0018cb	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0018cc	33 00 00 00 20 00	Wait    3, Tc
0018cd	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0018ce	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0018cf	00 08 98 1d 07 00	Write   [0:0x3010] = e3b
0018d0	43 00 00 00 20 00	Wait    4, Tc
0018d1	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0018d2	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0018d3	33 00 00 00 20 00	Wait    3, Tc
0018d4	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0018d5	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0018d6	00 08 98 1e 07 00	Write   [0:0x3010] = e3d
0018d7	43 00 00 00 20 00	Wait    4, Tc
0018d8	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0018d9	43 00 00 00 20 00	Wait    4, Tc
0018da	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0018db	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0018dc	44 4a 01 00 20 00	Branch  0x14a4, [CALL] < IQCalTuneNco >
0018dd	00 08 98 1c 07 00	Write   [0:0x3010] = e39
0018de	94 8c 01 00 20 00	Branch  0x18c9, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0018df	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0018e0	53 64 00 00 20 00	Wait    1605, Tc
0018e1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0018e2	43 00 00 00 20 00	Wait    4, Tc
0018e3	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0018e4	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0018e5	33 00 00 00 20 00	Wait    3, Tc
0018e6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0018e7	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0018e8	00 08 98 1f 07 00	Write   [0:0x3010] = e3f
0018e9	43 00 00 00 20 00	Wait    4, Tc
0018ea	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0018eb	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0018ec	33 00 00 00 20 00	Wait    3, Tc
0018ed	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0018ee	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0018ef	00 08 98 20 07 00	Write   [0:0x3010] = e41
0018f0	43 00 00 00 20 00	Wait    4, Tc
0018f1	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0018f2	43 00 00 00 20 00	Wait    4, Tc
0018f3	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0018f4	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0018f5	44 1d 01 00 20 00	Branch  0x11d4, [CALL] < IQCalTuneNco >
0018f6	00 08 98 1e 07 00	Write   [0:0x3010] = e3d
0018f7	24 8e 01 00 20 00	Branch  0x18e2, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0018f8	00 08 18 68 06 00	Write   [0:0x3010] = cd0
0018f9	53 64 00 00 20 00	Wait    1605, Tc
0018fa	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0018fb	43 00 00 00 20 00	Wait    4, Tc
0018fc	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0018fd	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0018fe	33 00 00 00 20 00	Wait    3, Tc
0018ff	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001900	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001901	00 08 98 21 07 00	Write   [0:0x3010] = e43
001902	43 00 00 00 20 00	Wait    4, Tc
001903	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001904	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001905	33 00 00 00 20 00	Wait    3, Tc
001906	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001907	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001908	00 08 98 22 07 00	Write   [0:0x3010] = e45
001909	43 00 00 00 20 00	Wait    4, Tc
00190a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00190b	43 00 00 00 20 00	Wait    4, Tc
00190c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00190d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00190e	84 1f 01 00 20 00	Branch  0x11f8, [CALL] < IQCalTuneNco >
00190f	00 08 98 20 07 00	Write   [0:0x3010] = e41
001910	b4 8f 01 00 20 00	Branch  0x18fb, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001911	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001912	53 64 00 00 20 00	Wait    1605, Tc
001913	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001914	43 00 00 00 20 00	Wait    4, Tc
001915	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001916	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001917	33 00 00 00 20 00	Wait    3, Tc
001918	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001919	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00191a	00 08 98 23 07 00	Write   [0:0x3010] = e47
00191b	43 00 00 00 20 00	Wait    4, Tc
00191c	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00191d	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00191e	33 00 00 00 20 00	Wait    3, Tc
00191f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001920	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001921	00 08 98 24 07 00	Write   [0:0x3010] = e49
001922	43 00 00 00 20 00	Wait    4, Tc
001923	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001924	43 00 00 00 20 00	Wait    4, Tc
001925	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001926	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001927	c4 21 01 00 20 00	Branch  0x121c, [CALL] < IQCalTuneNco >
001928	00 08 98 22 07 00	Write   [0:0x3010] = e45
001929	44 91 01 00 20 00	Branch  0x1914, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00192a	00 08 18 68 06 00	Write   [0:0x3010] = cd0
00192b	53 64 00 00 20 00	Wait    1605, Tc
00192c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00192d	43 00 00 00 20 00	Wait    4, Tc
00192e	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00192f	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001930	33 00 00 00 20 00	Wait    3, Tc
001931	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001932	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001933	00 08 98 25 07 00	Write   [0:0x3010] = e4b
001934	43 00 00 00 20 00	Wait    4, Tc
001935	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001936	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001937	33 00 00 00 20 00	Wait    3, Tc
001938	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001939	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00193a	00 08 98 26 07 00	Write   [0:0x3010] = e4d
00193b	43 00 00 00 20 00	Wait    4, Tc
00193c	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00193d	43 00 00 00 20 00	Wait    4, Tc
00193e	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00193f	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001940	04 24 01 00 20 00	Branch  0x1240, [CALL] < IQCalTuneNco >
001941	00 08 98 24 07 00	Write   [0:0x3010] = e49
001942	d4 92 01 00 20 00	Branch  0x192d, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001943	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001944	53 64 00 00 20 00	Wait    1605, Tc
001945	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001946	43 00 00 00 20 00	Wait    4, Tc
001947	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001948	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001949	33 00 00 00 20 00	Wait    3, Tc
00194a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00194b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00194c	00 08 98 27 07 00	Write   [0:0x3010] = e4f
00194d	43 00 00 00 20 00	Wait    4, Tc
00194e	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00194f	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001950	33 00 00 00 20 00	Wait    3, Tc
001951	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001952	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001953	00 08 98 28 07 00	Write   [0:0x3010] = e51
001954	43 00 00 00 20 00	Wait    4, Tc
001955	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001956	43 00 00 00 20 00	Wait    4, Tc
001957	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001958	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001959	44 26 01 00 20 00	Branch  0x1264, [CALL] < IQCalTuneNco >
00195a	00 08 98 26 07 00	Write   [0:0x3010] = e4d
00195b	64 94 01 00 20 00	Branch  0x1946, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00195c	00 08 18 68 06 00	Write   [0:0x3010] = cd0
00195d	53 64 00 00 20 00	Wait    1605, Tc
00195e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
00195f	43 00 00 00 20 00	Wait    4, Tc
001960	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001961	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001962	33 00 00 00 20 00	Wait    3, Tc
001963	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001964	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001965	00 08 98 29 07 00	Write   [0:0x3010] = e53
001966	43 00 00 00 20 00	Wait    4, Tc
001967	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001968	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001969	33 00 00 00 20 00	Wait    3, Tc
00196a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00196b	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00196c	00 08 98 2a 07 00	Write   [0:0x3010] = e55
00196d	43 00 00 00 20 00	Wait    4, Tc
00196e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00196f	43 00 00 00 20 00	Wait    4, Tc
001970	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001971	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001972	84 28 01 00 20 00	Branch  0x1288, [CALL] < IQCalTuneNco >
001973	00 08 98 28 07 00	Write   [0:0x3010] = e51
001974	f4 95 01 00 20 00	Branch  0x195f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001975	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001976	53 64 00 00 20 00	Wait    1605, Tc
001977	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001978	43 00 00 00 20 00	Wait    4, Tc
001979	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
00197a	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
00197b	33 00 00 00 20 00	Wait    3, Tc
00197c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00197d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00197e	00 08 98 2b 07 00	Write   [0:0x3010] = e57
00197f	43 00 00 00 20 00	Wait    4, Tc
001980	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001981	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001982	33 00 00 00 20 00	Wait    3, Tc
001983	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001984	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001985	00 08 98 2c 07 00	Write   [0:0x3010] = e59
001986	43 00 00 00 20 00	Wait    4, Tc
001987	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001988	43 00 00 00 20 00	Wait    4, Tc
001989	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00198a	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00198b	c4 2a 01 00 20 00	Branch  0x12ac, [CALL] < IQCalTuneNco >
00198c	00 08 98 2a 07 00	Write   [0:0x3010] = e55
00198d	84 97 01 00 20 00	Branch  0x1978, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00198e	00 08 18 68 06 00	Write   [0:0x3010] = cd0
00198f	53 64 00 00 20 00	Wait    1605, Tc
001990	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001991	43 00 00 00 20 00	Wait    4, Tc
001992	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001993	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001994	33 00 00 00 20 00	Wait    3, Tc
001995	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001996	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001997	00 08 98 2d 07 00	Write   [0:0x3010] = e5b
001998	43 00 00 00 20 00	Wait    4, Tc
001999	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
00199a	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
00199b	33 00 00 00 20 00	Wait    3, Tc
00199c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00199d	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
00199e	00 08 98 2e 07 00	Write   [0:0x3010] = e5d
00199f	43 00 00 00 20 00	Wait    4, Tc
0019a0	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0019a1	43 00 00 00 20 00	Wait    4, Tc
0019a2	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0019a3	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0019a4	04 2d 01 00 20 00	Branch  0x12d0, [CALL] < IQCalTuneNco >
0019a5	00 08 98 2c 07 00	Write   [0:0x3010] = e59
0019a6	14 99 01 00 20 00	Branch  0x1991, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0019a7	00 08 18 68 06 00	Write   [0:0x3010] = cd0
0019a8	53 64 00 00 20 00	Wait    1605, Tc
0019a9	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0019aa	43 00 00 00 20 00	Wait    4, Tc
0019ab	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0019ac	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0019ad	33 00 00 00 20 00	Wait    3, Tc
0019ae	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0019af	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0019b0	00 08 98 2f 07 00	Write   [0:0x3010] = e5f
0019b1	43 00 00 00 20 00	Wait    4, Tc
0019b2	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0019b3	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0019b4	33 00 00 00 20 00	Wait    3, Tc
0019b5	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0019b6	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0019b7	00 08 98 30 07 00	Write   [0:0x3010] = e61
0019b8	43 00 00 00 20 00	Wait    4, Tc
0019b9	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0019ba	43 00 00 00 20 00	Wait    4, Tc
0019bb	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0019bc	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0019bd	44 2f 01 00 20 00	Branch  0x12f4, [CALL] < IQCalTuneNco >
0019be	00 08 98 2e 07 00	Write   [0:0x3010] = e5d
0019bf	a4 9a 01 00 20 00	Branch  0x19aa, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0019c0	00 08 18 68 06 00	Write   [0:0x3010] = cd0
0019c1	53 64 00 00 20 00	Wait    1605, Tc
0019c2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0019c3	43 00 00 00 20 00	Wait    4, Tc
0019c4	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0019c5	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0019c6	33 00 00 00 20 00	Wait    3, Tc
0019c7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0019c8	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0019c9	00 08 98 31 07 00	Write   [0:0x3010] = e63
0019ca	43 00 00 00 20 00	Wait    4, Tc
0019cb	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0019cc	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0019cd	33 00 00 00 20 00	Wait    3, Tc
0019ce	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0019cf	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0019d0	00 08 98 32 07 00	Write   [0:0x3010] = e65
0019d1	43 00 00 00 20 00	Wait    4, Tc
0019d2	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0019d3	43 00 00 00 20 00	Wait    4, Tc
0019d4	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0019d5	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0019d6	84 31 01 00 20 00	Branch  0x1318, [CALL] < IQCalTuneNco >
0019d7	00 08 98 30 07 00	Write   [0:0x3010] = e61
0019d8	34 9c 01 00 20 00	Branch  0x19c3, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0019d9	00 08 18 68 06 00	Write   [0:0x3010] = cd0
0019da	53 64 00 00 20 00	Wait    1605, Tc
0019db	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0019dc	43 00 00 00 20 00	Wait    4, Tc
0019dd	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0019de	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0019df	33 00 00 00 20 00	Wait    3, Tc
0019e0	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0019e1	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0019e2	00 08 98 33 07 00	Write   [0:0x3010] = e67
0019e3	43 00 00 00 20 00	Wait    4, Tc
0019e4	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0019e5	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0019e6	33 00 00 00 20 00	Wait    3, Tc
0019e7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0019e8	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0019e9	00 08 98 34 07 00	Write   [0:0x3010] = e69
0019ea	43 00 00 00 20 00	Wait    4, Tc
0019eb	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0019ec	43 00 00 00 20 00	Wait    4, Tc
0019ed	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0019ee	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0019ef	c4 33 01 00 20 00	Branch  0x133c, [CALL] < IQCalTuneNco >
0019f0	00 08 98 32 07 00	Write   [0:0x3010] = e65
0019f1	c4 9d 01 00 20 00	Branch  0x19dc, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0019f2	00 08 18 68 06 00	Write   [0:0x3010] = cd0
0019f3	53 64 00 00 20 00	Wait    1605, Tc
0019f4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
0019f5	43 00 00 00 20 00	Wait    4, Tc
0019f6	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
0019f7	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
0019f8	33 00 00 00 20 00	Wait    3, Tc
0019f9	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0019fa	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
0019fb	00 08 98 35 07 00	Write   [0:0x3010] = e6b
0019fc	43 00 00 00 20 00	Wait    4, Tc
0019fd	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
0019fe	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
0019ff	33 00 00 00 20 00	Wait    3, Tc
001a00	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a01	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a02	00 08 98 36 07 00	Write   [0:0x3010] = e6d
001a03	43 00 00 00 20 00	Wait    4, Tc
001a04	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001a05	43 00 00 00 20 00	Wait    4, Tc
001a06	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001a07	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001a08	04 36 01 00 20 00	Branch  0x1360, [CALL] < IQCalTuneNco >
001a09	00 08 98 34 07 00	Write   [0:0x3010] = e69
001a0a	54 9f 01 00 20 00	Branch  0x19f5, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001a0b	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001a0c	53 64 00 00 20 00	Wait    1605, Tc
001a0d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001a0e	43 00 00 00 20 00	Wait    4, Tc
001a0f	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001a10	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001a11	33 00 00 00 20 00	Wait    3, Tc
001a12	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a13	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a14	00 08 98 37 07 00	Write   [0:0x3010] = e6f
001a15	43 00 00 00 20 00	Wait    4, Tc
001a16	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001a17	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001a18	33 00 00 00 20 00	Wait    3, Tc
001a19	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a1a	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a1b	00 08 98 38 07 00	Write   [0:0x3010] = e71
001a1c	43 00 00 00 20 00	Wait    4, Tc
001a1d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001a1e	43 00 00 00 20 00	Wait    4, Tc
001a1f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001a20	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001a21	44 38 01 00 20 00	Branch  0x1384, [CALL] < IQCalTuneNco >
001a22	00 08 98 36 07 00	Write   [0:0x3010] = e6d
001a23	e4 a0 01 00 20 00	Branch  0x1a0e, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001a24	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001a25	53 64 00 00 20 00	Wait    1605, Tc
001a26	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001a27	43 00 00 00 20 00	Wait    4, Tc
001a28	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001a29	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001a2a	33 00 00 00 20 00	Wait    3, Tc
001a2b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a2c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a2d	00 08 98 39 07 00	Write   [0:0x3010] = e73
001a2e	43 00 00 00 20 00	Wait    4, Tc
001a2f	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001a30	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001a31	33 00 00 00 20 00	Wait    3, Tc
001a32	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a33	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a34	00 08 98 3a 07 00	Write   [0:0x3010] = e75
001a35	43 00 00 00 20 00	Wait    4, Tc
001a36	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001a37	43 00 00 00 20 00	Wait    4, Tc
001a38	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001a39	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001a3a	84 3a 01 00 20 00	Branch  0x13a8, [CALL] < IQCalTuneNco >
001a3b	00 08 98 38 07 00	Write   [0:0x3010] = e71
001a3c	74 a2 01 00 20 00	Branch  0x1a27, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001a3d	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001a3e	53 64 00 00 20 00	Wait    1605, Tc
001a3f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001a40	43 00 00 00 20 00	Wait    4, Tc
001a41	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001a42	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001a43	33 00 00 00 20 00	Wait    3, Tc
001a44	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a45	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a46	00 08 98 3b 07 00	Write   [0:0x3010] = e77
001a47	43 00 00 00 20 00	Wait    4, Tc
001a48	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001a49	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001a4a	33 00 00 00 20 00	Wait    3, Tc
001a4b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a4c	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a4d	00 08 98 3c 07 00	Write   [0:0x3010] = e79
001a4e	43 00 00 00 20 00	Wait    4, Tc
001a4f	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001a50	43 00 00 00 20 00	Wait    4, Tc
001a51	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001a52	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001a53	c4 3c 01 00 20 00	Branch  0x13cc, [CALL] < IQCalTuneNco >
001a54	00 08 98 3a 07 00	Write   [0:0x3010] = e75
001a55	04 a4 01 00 20 00	Branch  0x1a40, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001a56	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001a57	53 64 00 00 20 00	Wait    1605, Tc
001a58	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001a59	43 00 00 00 20 00	Wait    4, Tc
001a5a	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001a5b	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001a5c	33 00 00 00 20 00	Wait    3, Tc
001a5d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a5e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a5f	00 08 98 3d 07 00	Write   [0:0x3010] = e7b
001a60	43 00 00 00 20 00	Wait    4, Tc
001a61	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001a62	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001a63	33 00 00 00 20 00	Wait    3, Tc
001a64	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a65	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a66	00 08 98 3e 07 00	Write   [0:0x3010] = e7d
001a67	43 00 00 00 20 00	Wait    4, Tc
001a68	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001a69	43 00 00 00 20 00	Wait    4, Tc
001a6a	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001a6b	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001a6c	04 3f 01 00 20 00	Branch  0x13f0, [CALL] < IQCalTuneNco >
001a6d	00 08 98 3c 07 00	Write   [0:0x3010] = e79
001a6e	94 a5 01 00 20 00	Branch  0x1a59, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001a6f	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001a70	53 64 00 00 20 00	Wait    1605, Tc
001a71	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001a72	43 00 00 00 20 00	Wait    4, Tc
001a73	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001a74	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001a75	33 00 00 00 20 00	Wait    3, Tc
001a76	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a77	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a78	00 08 98 3f 07 00	Write   [0:0x3010] = e7f
001a79	43 00 00 00 20 00	Wait    4, Tc
001a7a	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001a7b	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001a7c	33 00 00 00 20 00	Wait    3, Tc
001a7d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a7e	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a7f	00 08 98 40 07 00	Write   [0:0x3010] = e81
001a80	43 00 00 00 20 00	Wait    4, Tc
001a81	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001a82	43 00 00 00 20 00	Wait    4, Tc
001a83	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001a84	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001a85	44 41 01 00 20 00	Branch  0x1414, [CALL] < IQCalTuneNco >
001a86	00 08 98 3e 07 00	Write   [0:0x3010] = e7d
001a87	24 a7 01 00 20 00	Branch  0x1a72, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001a88	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001a89	53 64 00 00 20 00	Wait    1605, Tc
001a8a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001a8b	43 00 00 00 20 00	Wait    4, Tc
001a8c	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001a8d	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001a8e	33 00 00 00 20 00	Wait    3, Tc
001a8f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a90	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a91	00 08 98 41 07 00	Write   [0:0x3010] = e83
001a92	43 00 00 00 20 00	Wait    4, Tc
001a93	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001a94	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001a95	33 00 00 00 20 00	Wait    3, Tc
001a96	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001a97	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001a98	00 08 98 42 07 00	Write   [0:0x3010] = e85
001a99	43 00 00 00 20 00	Wait    4, Tc
001a9a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001a9b	43 00 00 00 20 00	Wait    4, Tc
001a9c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001a9d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001a9e	84 43 01 00 20 00	Branch  0x1438, [CALL] < IQCalTuneNco >
001a9f	00 08 98 40 07 00	Write   [0:0x3010] = e81
001aa0	b4 a8 01 00 20 00	Branch  0x1a8b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001aa1	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001aa2	53 64 00 00 20 00	Wait    1605, Tc
001aa3	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001aa4	43 00 00 00 20 00	Wait    4, Tc
001aa5	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001aa6	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001aa7	33 00 00 00 20 00	Wait    3, Tc
001aa8	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001aa9	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001aaa	00 08 98 43 07 00	Write   [0:0x3010] = e87
001aab	43 00 00 00 20 00	Wait    4, Tc
001aac	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001aad	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001aae	33 00 00 00 20 00	Wait    3, Tc
001aaf	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001ab0	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001ab1	00 08 98 44 07 00	Write   [0:0x3010] = e89
001ab2	43 00 00 00 20 00	Wait    4, Tc
001ab3	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001ab4	43 00 00 00 20 00	Wait    4, Tc
001ab5	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001ab6	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001ab7	c4 45 01 00 20 00	Branch  0x145c, [CALL] < IQCalTuneNco >
001ab8	00 08 98 42 07 00	Write   [0:0x3010] = e85
001ab9	44 aa 01 00 20 00	Branch  0x1aa4, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001aba	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001abb	53 64 00 00 20 00	Wait    1605, Tc
001abc	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001abd	43 00 00 00 20 00	Wait    4, Tc
001abe	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001abf	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001ac0	33 00 00 00 20 00	Wait    3, Tc
001ac1	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001ac2	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001ac3	00 08 98 45 07 00	Write   [0:0x3010] = e8b
001ac4	43 00 00 00 20 00	Wait    4, Tc
001ac5	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001ac6	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001ac7	33 00 00 00 20 00	Wait    3, Tc
001ac8	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001ac9	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001aca	00 08 98 46 07 00	Write   [0:0x3010] = e8d
001acb	43 00 00 00 20 00	Wait    4, Tc
001acc	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001acd	43 00 00 00 20 00	Wait    4, Tc
001ace	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001acf	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001ad0	04 48 01 00 20 00	Branch  0x1480, [CALL] < IQCalTuneNco >
001ad1	00 08 98 44 07 00	Write   [0:0x3010] = e89
001ad2	d4 ab 01 00 20 00	Branch  0x1abd, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001ad3	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001ad4	53 64 00 00 20 00	Wait    1605, Tc
001ad5	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64)
001ad6	43 00 00 00 20 00	Wait    4, Tc
001ad7	11 17 80 01 00 01	Copy    [1:002e] = [SF+0], SrcBase: AI
001ad8	91 17 80 01 00 01	Copy    [1:002f] = [SF+1], SrcBase: AI
001ad9	33 00 00 00 20 00	Wait    3, Tc
001ada	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001adb	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001adc	00 08 98 47 07 00	Write   [0:0x3010] = e8f
001add	43 00 00 00 20 00	Wait    4, Tc
001ade	11 17 80 01 00 01	Copy    [1:002e] = [SF+2], SrcBase: AI
001adf	91 17 80 01 00 01	Copy    [1:002f] = [SF+3], SrcBase: AI
001ae0	33 00 00 00 20 00	Wait    3, Tc
001ae1	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001ae2	34 97 00 00 20 00	Branch  0x973, [CALL] < ManualTuneWithIdx >
001ae3	00 08 98 48 07 00	Write   [0:0x3010] = e91
001ae4	43 00 00 00 20 00	Wait    4, Tc
001ae5	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
001ae6	43 00 00 00 20 00	Wait    4, Tc
001ae7	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
001ae8	00 08 18 58 06 00	Write   [0:0x3010] = cb0
001ae9	44 4a 01 00 20 00	Branch  0x14a4, [CALL] < IQCalTuneNco >
001aea	00 08 98 46 07 00	Write   [0:0x3010] = e8d
001aeb	64 ad 01 00 20 00	Branch  0x1ad6, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
001aec	00 08 18 68 06 00	Write   [0:0x3010] = cd0
001aed	53 64 00 00 20 00	Wait    1605, Tc
001aee	04 00 00 00 40 00	Branch  0x0, [RET]


TuneFreq_SwitchCase_LO_0
001aef	43 00 00 00 20 00	Wait    4, Tc
001af0	01 70 98 42 12 00	Copy    [0:30e0] = [1:0921]		# TuneFreq_SwitchCase_LO_0_ParentOfIndirect
001af1	00 71 18 01 00 00	Write   [0:0x30e2] = 2
001af2	43 00 00 00 20 00	Wait    4, Tc
001af3	91 81 04 d0 61 00	Copy    [1:0903] = [0:30e8]
001af4	01 70 18 20 60 00	Copy    [0:30e0] = [0:3010]
001af5	43 00 00 00 20 00	Wait    4, Tc
001af6	01 71 98 06 12 00	Copy    [0:30e2] = [1:0903]
001af7	43 00 00 00 20 00	Wait    4, Tc
001af8	01 08 18 c8 61 00	Copy    [0:3010] = [0:30e4]
001af9	64 00 00 00 20 00	Branch  0x6, [CALL]
001afa	04 00 00 00 40 00	Branch  0x0, [RET]


Calibration_InlineSwAbs
001afb	00 08 18 1c 05 00	Write   [0:0x3010] = a38
001afc	a4 7a 00 00 20 00	Branch  0x7aa, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
001afd	00 08 18 1c 05 00	Write   [0:0x3010] = a38
001afe	74 7b 00 00 20 00	Branch  0x7b7, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
001aff	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001b00	04 d0 00 00 20 00	Branch  0xd00, [CALL] < Vayyar::Centipede::CentipedeLockSweepBlockLib::InlineBuildSweep(unsigned short,class Vayyar::Centipede::ICentipedeAnalogSynthModule *) >
001b01	00 08 18 3f 05 00	Write   [0:0x3010] = a7e
001b02	b4 0d 01 00 20 00	Branch  0x10db, [CALL] < Vayyar::Centipede::CentipedeLockSweepBlockLib::InlineBuildSweep(unsigned short,class Vayyar::Centipede::ICentipedeAnalogSynthModule *) >
001b03	00 08 98 f6 05 00	Write   [0:0x3010] = bed
001b04	74 0e 01 00 20 00	Branch  0x10e7, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
001b05	00 08 98 f6 05 00	Write   [0:0x3010] = bed
001b06	44 0f 01 00 20 00	Branch  0x10f4, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
001b07	00 08 18 1c 05 00	Write   [0:0x3010] = a38
001b08	a4 7a 00 00 20 00	Branch  0x7aa, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
001b09	00 08 18 1c 05 00	Write   [0:0x3010] = a38
001b0a	74 7b 00 00 20 00	Branch  0x7b7, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
001b0b	00 08 98 f7 05 00	Write   [0:0x3010] = bef
001b0c	f4 ae 01 00 20 00	Branch  0x1aef, [CALL] < TuneFreq_SwitchCase_LO_0 >
001b0d	00 08 98 f6 05 00	Write   [0:0x3010] = bed
001b0e	74 0e 01 00 20 00	Branch  0x10e7, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
001b0f	00 08 98 f6 05 00	Write   [0:0x3010] = bed
001b10	44 0f 01 00 20 00	Branch  0x10f4, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
001b11	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)
001b12	01 71 98 56 00 00	Copy    [0:30e2] = [1:002b]
001b13	80 71 18 00 00 00	Write   [0:0x30e3] = 0
001b14	00 70 18 2c 00 00	Write   [0:0x30e0] = 58
001b15	80 70 18 00 00 00	Write   [0:0x30e1] = 0
001b16	33 00 00 00 20 00	Wait    3, Tc
001b17	91 15 00 c8 61 00	Copy    [1:002b] = [0:30e4]
001b18	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMemoryAccessCentipede::CopyToDsp(const class ILParamShort &,const class ILParamShort &)
001b19	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
001b1a	01 09 98 54 00 00	Copy    [0:3012] = [1:002a]
001b1b	83 00 00 00 20 00	Wait    8, Tc
001b1c	61 00 80 56 00 00	Copy    [2:0000] = [1:002b], DestBase: A
001b1d	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
001b1e	83 00 00 00 20 00	Wait    8, Tc
001b1f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001b20	43 00 00 00 20 00	Wait    4, Tc
001b21	01 70 98 5a 00 00	Copy    [0:30e0] = [1:002d]
001b22	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001b23	01 70 98 5a 00 00	Copy    [0:30e0] = [1:002d]
001b24	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001b25	33 00 00 00 20 00	Wait    3, Tc
001b26	01 71 98 c6 10 00	Copy    [0:30e2] = [1:0863]
001b27	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001b28	73 00 00 00 20 00	Wait    7, Tc
001b29	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
001b2a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001b2b	33 00 00 00 20 00	Wait    3, Tc
001b2c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
001b2d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001b2e	04 b2 01 00 20 00	Branch  0x1b20, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001b2f	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
001b30	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
001b31	83 00 00 00 20 00	Wait    8, Tc
001b32	91 93 84 01 00 00	Copy    [1:0927] = [1:0000], SrcBase: A
001b33	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
001b34	83 00 00 00 20 00	Wait    8, Tc
001b35	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001b36	43 00 00 00 20 00	Wait    4, Tc
001b37	01 70 98 5a 00 00	Copy    [0:30e0] = [1:002d]
001b38	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001b39	01 70 98 5a 00 00	Copy    [0:30e0] = [1:002d]
001b3a	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001b3b	33 00 00 00 20 00	Wait    3, Tc
001b3c	01 71 98 d0 10 00	Copy    [0:30e2] = [1:0868]
001b3d	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001b3e	73 00 00 00 20 00	Wait    7, Tc
001b3f	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
001b40	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001b41	33 00 00 00 20 00	Wait    3, Tc
001b42	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
001b43	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001b44	64 b3 01 00 20 00	Branch  0x1b36, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001b45	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
001b46	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
001b47	83 00 00 00 20 00	Wait    8, Tc
001b48	11 94 84 01 00 00	Copy    [1:0928] = [1:0000], SrcBase: A
001b49	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
001b4a	83 00 00 00 20 00	Wait    8, Tc
001b4b	04 00 00 00 40 00	Branch  0x0, [RET]


__If_37_LO::TX_LO
001b4c	d4 b2 01 00 20 00	Branch  0x1b2d, [CALL] < Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >		# If_37_Func_Start
001b4d	34 b4 01 00 20 00	Branch  0x1b43, [CALL] < Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
001b4e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001b4f	43 00 00 00 20 00	Wait    4, Tc
001b50	01 70 98 5a 00 00	Copy    [0:30e0] = [1:002d]
001b51	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001b52	01 70 98 5a 00 00	Copy    [0:30e0] = [1:002d]
001b53	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001b54	33 00 00 00 20 00	Wait    3, Tc
001b55	01 71 98 66 11 00	Copy    [0:30e2] = [1:08b3]
001b56	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001b57	73 00 00 00 20 00	Wait    7, Tc
001b58	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
001b59	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001b5a	33 00 00 00 20 00	Wait    3, Tc
001b5b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
001b5c	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001b5d	f4 b4 01 00 20 00	Branch  0x1b4f, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001b5e	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
001b5f	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
001b60	83 00 00 00 20 00	Wait    8, Tc
001b61	91 93 84 01 00 00	Copy    [1:0927] = [1:0000], SrcBase: A
001b62	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
001b63	83 00 00 00 20 00	Wait    8, Tc
001b64	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001b65	43 00 00 00 20 00	Wait    4, Tc
001b66	01 70 98 5a 00 00	Copy    [0:30e0] = [1:002d]
001b67	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001b68	01 70 98 5a 00 00	Copy    [0:30e0] = [1:002d]
001b69	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001b6a	33 00 00 00 20 00	Wait    3, Tc
001b6b	01 71 98 70 11 00	Copy    [0:30e2] = [1:08b8]
001b6c	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001b6d	73 00 00 00 20 00	Wait    7, Tc
001b6e	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
001b6f	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001b70	33 00 00 00 20 00	Wait    3, Tc
001b71	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
001b72	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001b73	54 b6 01 00 20 00	Branch  0x1b65, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001b74	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
001b75	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
001b76	83 00 00 00 20 00	Wait    8, Tc
001b77	11 94 84 01 00 00	Copy    [1:0928] = [1:0000], SrcBase: A
001b78	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
001b79	83 00 00 00 20 00	Wait    8, Tc
001b7a	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_37_LO::TX_LO
001b7b	c4 b5 01 00 20 00	Branch  0x1b5c, [CALL] < Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >		# Else_37_Func_Start
001b7c	24 b7 01 00 20 00	Branch  0x1b72, [CALL] < Vayyar::operator <<(const class IILParam &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
001b7d	04 00 00 00 40 00	Branch  0x0, [RET]


__If_36_SPURS::IQ
001b7e	a3 00 00 00 20 00	Wait    10, Tc
001b7f	01 48 98 44 12 00	Copy    [0:3090] = [1:0922]		# If_36_Func_Start
001b80	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001b81	93 00 00 00 20 00	Wait    9, Tc
001b82	02 00 00 01 00 00	Cond    0x00100000

001b83	84 b8 01 00 90 00	Branch  0x1b88, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001b84	c4 b4 01 00 20 00	Branch  0x1b4c, [CALL] < __If_37_LO::TX_LO >
001b85	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001b86	43 00 00 00 20 00	Wait    4, Tc
001b87	b4 b8 01 00 00 00	Branch  0x1b8b, [JMP]
001b88	b4 b7 01 00 20 00	Branch  0x1b7b, [CALL] < __Else_37_LO::TX_LO >		# Else_37
001b89	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001b8a	43 00 00 00 20 00	Wait    4, Tc
001b8b	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_37

__Else_36_SPURS::IQ
001b8c	43 00 00 00 20 00	Wait    4, Tc		# Else_36_Func_Start
001b8d	91 93 84 52 12 00	Copy    [1:0927] = [1:0929]
001b8e	93 00 00 00 20 00	Wait    9, Tc
001b8f	11 94 84 52 12 00	Copy    [1:0928] = [1:0929]
001b90	43 00 00 00 20 00	Wait    4, Tc
001b91	04 00 00 00 40 00	Branch  0x0, [RET]


ResetIQVariables
001b92	53 00 00 00 20 00	Wait    5, Tc		# If_36
001b93	01 48 98 46 12 00	Copy    [0:3090] = [1:0923]
001b94	00 49 98 00 00 00	Write   [0:0x3092] = 1
001b95	53 00 00 00 20 00	Wait    5, Tc
001b96	02 00 00 01 00 00	Cond    0x00100000

001b97	b4 b9 01 00 90 00	Branch  0x1b9b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001b98	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001b99	e4 b7 01 00 20 00	Branch  0x1b7e, [CALL] < __If_36_SPURS::IQ >
001b9a	c4 b9 01 00 00 00	Branch  0x1b9c, [JMP]
001b9b	c4 b8 01 00 20 00	Branch  0x1b8c, [CALL] < __Else_36_SPURS::IQ >		# Else_36
001b9c	43 00 00 00 20 00	Wait    4, Tc		# EndIf_36
001b9d	11 95 84 56 12 00	Copy    [1:092a] = [1:092b]
001b9e	93 00 00 00 20 00	Wait    9, Tc
001b9f	11 96 84 5a 12 00	Copy    [1:092c] = [1:092d]
001ba0	43 00 00 00 20 00	Wait    4, Tc
001ba1	10 97 04 00 00 00	Write   [1:0x092e] = 0
001ba2	90 97 04 00 00 00	Write   [1:0x092f] = 0
001ba3	10 98 04 00 00 00	Write   [1:0x0930] = 0
001ba4	90 98 04 00 00 00	Write   [1:0x0931] = 0
001ba5	04 00 00 00 40 00	Branch  0x0, [RET]


ResetPowerAccumVariables
001ba6	10 99 84 ff 7f 00	Write   [1:0x0932] = ffff
001ba7	90 99 84 ff 7f 00	Write   [1:0x0933] = ffff
001ba8	10 9a 84 ff 7f 00	Write   [1:0x0934] = ffff
001ba9	90 9a 84 ff 7f 00	Write   [1:0x0935] = ffff
001baa	10 9b 84 ff 7f 00	Write   [1:0x0936] = ffff
001bab	90 9b 84 ff 7f 00	Write   [1:0x0937] = ffff
001bac	04 00 00 00 40 00	Branch  0x0, [RET]


SetIQAncor
001bad	43 00 00 00 20 00	Wait    4, Tc
001bae	11 9d 84 4e 12 00	Copy    [1:093a] = [1:0927]
001baf	93 00 00 00 20 00	Wait    9, Tc
001bb0	91 9d 84 50 12 00	Copy    [1:093b] = [1:0928]
001bb1	93 00 00 00 20 00	Wait    9, Tc
001bb2	11 9e 84 54 12 00	Copy    [1:093c] = [1:092a]
001bb3	93 00 00 00 20 00	Wait    9, Tc
001bb4	91 9e 84 58 12 00	Copy    [1:093d] = [1:092c]
001bb5	43 00 00 00 20 00	Wait    4, Tc
001bb6	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateStageFunc_sub_8
001bb7	91 9c 84 01 00 01	Copy    [1:0939] = [SF+0], SrcBase: AI
001bb8	d4 ba 01 00 20 00	Branch  0x1bad, [CALL] < SetIQAncor >
001bb9	43 00 00 00 20 00	Wait    4, Tc
001bba	91 90 84 70 12 00	Copy    [1:0921] = [1:0938]
001bbb	43 00 00 00 20 00	Wait    4, Tc
001bbc	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateSpurFunc_sub_4
001bbd	01 48 98 42 12 00	Copy    [0:3090] = [1:0921]
001bbe	81 48 98 01 00 01	Copy    [0:3091] = [SF+0], SrcBase: AI
001bbf	93 00 00 00 20 00	Wait    9, Tc
001bc0	91 90 04 20 61 00	Copy    [1:0921] = [0:3090]
001bc1	53 00 00 00 20 00	Wait    5, Tc
001bc2	04 00 00 00 40 00	Branch  0x0, [RET]


__If_38_WaitForFirstFreqBug
001bc3	53 80 38 01 20 00	Wait    1280005, Tc
001bc4	11 92 84 01 00 01	Copy    [1:0924] = [SF+0], SrcBase: AI		# If_38_Func_Start
001bc5	06 00 00 00 00 00	Nop     		# Else_38_Func_Start
001bc6	04 00 00 00 40 00	Branch  0x0, [RET]


__If_40_SPURS::LO
001bc7	43 00 00 00 20 00	Wait    4, Tc
001bc8	91 9f 84 01 00 01	Copy    [1:093f] = [SF+0], SrcBase: AI		# If_40_Func_Start
001bc9	11 a0 84 01 00 01	Copy    [1:0940] = [SF+1], SrcBase: AI
001bca	33 00 00 00 20 00	Wait    3, Tc
001bcb	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_40_SPURS::LO
001bcc	43 00 00 00 20 00	Wait    4, Tc
001bcd	91 9f 84 01 00 01	Copy    [1:093f] = [SF+0], SrcBase: AI		# Else_40_Func_Start
001bce	11 a0 84 01 00 01	Copy    [1:0940] = [SF+1], SrcBase: AI
001bcf	33 00 00 00 20 00	Wait    3, Tc
001bd0	04 00 00 00 40 00	Branch  0x0, [RET]


__If_39_CalibStage::CRS
001bd1	a3 00 00 00 20 00	Wait    10, Tc
001bd2	01 48 98 7c 12 00	Copy    [0:3090] = [1:093e]		# If_39_Func_Start
001bd3	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001bd4	93 00 00 00 20 00	Wait    9, Tc
001bd5	02 00 00 01 00 00	Cond    0x00100000

001bd6	c4 bd 01 00 90 00	Branch  0x1bdc, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001bd7	00 08 18 4c 07 00	Write   [0:0x3010] = e98
001bd8	74 bc 01 00 20 00	Branch  0x1bc7, [CALL] < __If_40_SPURS::LO >
001bd9	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001bda	43 00 00 00 20 00	Wait    4, Tc
001bdb	04 be 01 00 00 00	Branch  0x1be0, [JMP]
001bdc	00 08 98 a0 05 00	Write   [0:0x3010] = b41		# Else_40
001bdd	c4 bc 01 00 20 00	Branch  0x1bcc, [CALL] < __Else_40_SPURS::LO >
001bde	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001bdf	43 00 00 00 20 00	Wait    4, Tc
001be0	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_40

__Else_39_CalibStage::CRS
001be1	a3 00 00 00 20 00	Wait    10, Tc
001be2	01 48 98 7c 12 00	Copy    [0:3090] = [1:093e]		# Else_39_Func_Start
001be3	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001be4	93 00 00 00 20 00	Wait    9, Tc
001be5	02 00 00 01 00 00	Cond    0x00100000

001be6	c4 be 01 00 90 00	Branch  0x1bec, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001be7	00 08 18 4d 07 00	Write   [0:0x3010] = e9a
001be8	74 bc 01 00 20 00	Branch  0x1bc7, [CALL] < __If_40_SPURS::LO >
001be9	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001bea	43 00 00 00 20 00	Wait    4, Tc
001beb	04 bf 01 00 00 00	Branch  0x1bf0, [JMP]
001bec	00 08 18 4e 07 00	Write   [0:0x3010] = e9c		# Else_41
001bed	c4 bc 01 00 20 00	Branch  0x1bcc, [CALL] < __Else_40_SPURS::LO >
001bee	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001bef	43 00 00 00 20 00	Wait    4, Tc
001bf0	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_41

SetStageSpurSelector
001bf1	a3 00 00 00 20 00	Wait    10, Tc
001bf2	01 48 98 72 12 00	Copy    [0:3090] = [1:0939]		# If_39
001bf3	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001bf4	93 00 00 00 20 00	Wait    9, Tc
001bf5	02 00 00 01 00 00	Cond    0x00100000

001bf6	c4 bf 01 00 90 00	Branch  0x1bfc, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001bf7	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001bf8	14 bd 01 00 20 00	Branch  0x1bd1, [CALL] < __If_39_CalibStage::CRS >
001bf9	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001bfa	43 00 00 00 20 00	Wait    4, Tc
001bfb	04 c0 01 00 00 00	Branch  0x1c00, [JMP]
001bfc	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_39
001bfd	14 be 01 00 20 00	Branch  0x1be1, [CALL] < __Else_39_CalibStage::CRS >
001bfe	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001bff	43 00 00 00 20 00	Wait    4, Tc
001c00	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_39

class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c01	43 00 00 00 20 00	Wait    4, Tc
001c02	01 70 98 5c 12 00	Copy    [0:30e0] = [1:092e]
001c03	01 71 98 8e 12 00	Copy    [0:30e2] = [1:0947]
001c04	33 00 00 00 20 00	Wait    3, Tc
001c05	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
001c06	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
001c07	73 00 00 00 20 00	Wait    7, Tc
001c08	11 97 04 d0 61 00	Copy    [1:092e] = [0:30e8]
001c09	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_1
001c0a	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001c0b	01 71 98 5c 12 00	Copy    [0:30e2] = [1:092e]
001c0c	33 00 00 00 20 00	Wait    3, Tc
001c0d	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001c0e	33 00 00 00 20 00	Wait    3, Tc
001c0f	11 97 04 c8 61 00	Copy    [1:092e] = [0:30e4]
001c10	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001c11	33 00 00 00 20 00	Wait    3, Tc
001c12	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c13	43 00 00 00 20 00	Wait    4, Tc
001c14	01 70 98 74 12 00	Copy    [0:30e0] = [1:093a]
001c15	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001c16	01 70 98 74 12 00	Copy    [0:30e0] = [1:093a]
001c17	a4 c0 01 00 20 00	Branch  0x1c0a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_1 >
001c18	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c19	43 00 00 00 20 00	Wait    4, Tc
001c1a	01 70 98 90 12 00	Copy    [0:30e0] = [1:0948]
001c1b	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001c1c	01 70 98 90 12 00	Copy    [0:30e0] = [1:0948]
001c1d	a4 c0 01 00 20 00	Branch  0x1c0a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_1 >
001c1e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c1f	43 00 00 00 20 00	Wait    4, Tc
001c20	01 70 98 5e 12 00	Copy    [0:30e0] = [1:092f]
001c21	01 71 98 8e 12 00	Copy    [0:30e2] = [1:0947]
001c22	33 00 00 00 20 00	Wait    3, Tc
001c23	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
001c24	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
001c25	73 00 00 00 20 00	Wait    7, Tc
001c26	91 97 04 d0 61 00	Copy    [1:092f] = [0:30e8]
001c27	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_2
001c28	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001c29	01 71 98 5e 12 00	Copy    [0:30e2] = [1:092f]
001c2a	33 00 00 00 20 00	Wait    3, Tc
001c2b	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001c2c	33 00 00 00 20 00	Wait    3, Tc
001c2d	91 97 04 c8 61 00	Copy    [1:092f] = [0:30e4]
001c2e	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001c2f	33 00 00 00 20 00	Wait    3, Tc
001c30	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c31	43 00 00 00 20 00	Wait    4, Tc
001c32	01 70 98 76 12 00	Copy    [0:30e0] = [1:093b]
001c33	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001c34	01 70 98 76 12 00	Copy    [0:30e0] = [1:093b]
001c35	84 c2 01 00 20 00	Branch  0x1c28, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_2 >
001c36	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c37	43 00 00 00 20 00	Wait    4, Tc
001c38	01 70 98 90 12 00	Copy    [0:30e0] = [1:0948]
001c39	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001c3a	01 70 98 90 12 00	Copy    [0:30e0] = [1:0948]
001c3b	84 c2 01 00 20 00	Branch  0x1c28, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_2 >
001c3c	04 00 00 00 40 00	Branch  0x0, [RET]


__If_42_LO_CRS
001c3d	43 00 00 00 20 00	Wait    4, Tc		# If_42_Func_Start
001c3e	11 97 84 86 12 00	Copy    [1:092e] = [1:0943]
001c3f	43 00 00 00 20 00	Wait    4, Tc
001c40	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001c41	14 c0 01 00 20 00	Branch  0x1c01, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c42	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001c43	34 c1 01 00 20 00	Branch  0x1c13, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c44	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001c45	94 c1 01 00 20 00	Branch  0x1c19, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c46	43 00 00 00 20 00	Wait    4, Tc
001c47	91 97 84 8c 12 00	Copy    [1:092f] = [1:0946]
001c48	43 00 00 00 20 00	Wait    4, Tc
001c49	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001c4a	f4 c1 01 00 20 00	Branch  0x1c1f, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c4b	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001c4c	14 c3 01 00 20 00	Branch  0x1c31, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c4d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001c4e	74 c3 01 00 20 00	Branch  0x1c37, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c4f	06 00 00 00 00 00	Nop     		# Else_42_Func_Start
001c50	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c51	43 00 00 00 20 00	Wait    4, Tc
001c52	01 70 98 60 12 00	Copy    [0:30e0] = [1:0930]
001c53	01 71 98 92 12 00	Copy    [0:30e2] = [1:0949]
001c54	33 00 00 00 20 00	Wait    3, Tc
001c55	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
001c56	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
001c57	73 00 00 00 20 00	Wait    7, Tc
001c58	11 98 04 d0 61 00	Copy    [1:0930] = [0:30e8]
001c59	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_3
001c5a	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001c5b	01 71 98 60 12 00	Copy    [0:30e2] = [1:0930]
001c5c	33 00 00 00 20 00	Wait    3, Tc
001c5d	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001c5e	33 00 00 00 20 00	Wait    3, Tc
001c5f	11 98 04 c8 61 00	Copy    [1:0930] = [0:30e4]
001c60	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001c61	33 00 00 00 20 00	Wait    3, Tc
001c62	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c63	43 00 00 00 20 00	Wait    4, Tc
001c64	01 70 98 78 12 00	Copy    [0:30e0] = [1:093c]
001c65	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001c66	01 70 98 78 12 00	Copy    [0:30e0] = [1:093c]
001c67	a4 c5 01 00 20 00	Branch  0x1c5a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_3 >
001c68	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c69	43 00 00 00 20 00	Wait    4, Tc
001c6a	01 70 98 94 12 00	Copy    [0:30e0] = [1:094a]
001c6b	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001c6c	01 70 98 94 12 00	Copy    [0:30e0] = [1:094a]
001c6d	a4 c5 01 00 20 00	Branch  0x1c5a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_3 >
001c6e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c6f	43 00 00 00 20 00	Wait    4, Tc
001c70	01 70 98 62 12 00	Copy    [0:30e0] = [1:0931]
001c71	01 71 98 96 12 00	Copy    [0:30e2] = [1:094b]
001c72	33 00 00 00 20 00	Wait    3, Tc
001c73	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
001c74	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
001c75	73 00 00 00 20 00	Wait    7, Tc
001c76	91 98 04 d0 61 00	Copy    [1:0931] = [0:30e8]
001c77	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_4
001c78	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001c79	01 71 98 62 12 00	Copy    [0:30e2] = [1:0931]
001c7a	33 00 00 00 20 00	Wait    3, Tc
001c7b	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001c7c	33 00 00 00 20 00	Wait    3, Tc
001c7d	91 98 04 c8 61 00	Copy    [1:0931] = [0:30e4]
001c7e	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001c7f	33 00 00 00 20 00	Wait    3, Tc
001c80	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c81	43 00 00 00 20 00	Wait    4, Tc
001c82	01 70 98 7a 12 00	Copy    [0:30e0] = [1:093d]
001c83	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001c84	01 70 98 7a 12 00	Copy    [0:30e0] = [1:093d]
001c85	84 c7 01 00 20 00	Branch  0x1c78, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_4 >
001c86	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001c87	43 00 00 00 20 00	Wait    4, Tc
001c88	01 70 98 98 12 00	Copy    [0:30e0] = [1:094c]
001c89	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001c8a	01 70 98 98 12 00	Copy    [0:30e0] = [1:094c]
001c8b	84 c7 01 00 20 00	Branch  0x1c78, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_4 >
001c8c	04 00 00 00 40 00	Branch  0x0, [RET]


__If_43_IQ_CRS
001c8d	43 00 00 00 20 00	Wait    4, Tc		# If_43_Func_Start
001c8e	11 98 84 86 12 00	Copy    [1:0930] = [1:0943]
001c8f	43 00 00 00 20 00	Wait    4, Tc
001c90	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001c91	14 c5 01 00 20 00	Branch  0x1c51, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c92	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001c93	34 c6 01 00 20 00	Branch  0x1c63, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c94	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001c95	94 c6 01 00 20 00	Branch  0x1c69, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c96	43 00 00 00 20 00	Wait    4, Tc
001c97	91 98 84 8c 12 00	Copy    [1:0931] = [1:0946]
001c98	43 00 00 00 20 00	Wait    4, Tc
001c99	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001c9a	f4 c6 01 00 20 00	Branch  0x1c6f, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c9b	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001c9c	14 c8 01 00 20 00	Branch  0x1c81, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c9d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001c9e	74 c8 01 00 20 00	Branch  0x1c87, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001c9f	06 00 00 00 00 00	Nop     		# Else_43_Func_Start
001ca0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &)
001ca1	43 00 00 00 20 00	Wait    4, Tc
001ca2	01 70 98 5c 12 00	Copy    [0:30e0] = [1:092e]
001ca3	01 71 98 9a 12 00	Copy    [0:30e2] = [1:094d]
001ca4	33 00 00 00 20 00	Wait    3, Tc
001ca5	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
001ca6	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
001ca7	73 00 00 00 20 00	Wait    7, Tc
001ca8	11 97 04 d0 61 00	Copy    [1:092e] = [0:30e8]
001ca9	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001caa	43 00 00 00 20 00	Wait    4, Tc
001cab	01 70 98 9c 12 00	Copy    [0:30e0] = [1:094e]
001cac	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001cad	01 70 98 9c 12 00	Copy    [0:30e0] = [1:094e]
001cae	a4 c0 01 00 20 00	Branch  0x1c0a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_1 >
001caf	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &)
001cb0	43 00 00 00 20 00	Wait    4, Tc
001cb1	01 70 98 5e 12 00	Copy    [0:30e0] = [1:092f]
001cb2	01 71 98 9a 12 00	Copy    [0:30e2] = [1:094d]
001cb3	33 00 00 00 20 00	Wait    3, Tc
001cb4	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
001cb5	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
001cb6	73 00 00 00 20 00	Wait    7, Tc
001cb7	91 97 04 d0 61 00	Copy    [1:092f] = [0:30e8]
001cb8	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001cb9	43 00 00 00 20 00	Wait    4, Tc
001cba	01 70 98 9c 12 00	Copy    [0:30e0] = [1:094e]
001cbb	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001cbc	01 70 98 9c 12 00	Copy    [0:30e0] = [1:094e]
001cbd	84 c2 01 00 20 00	Branch  0x1c28, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_2 >
001cbe	04 00 00 00 40 00	Branch  0x0, [RET]


__If_44_LO_FIN
001cbf	43 00 00 00 20 00	Wait    4, Tc		# If_44_Func_Start
001cc0	11 97 84 86 12 00	Copy    [1:092e] = [1:0943]
001cc1	43 00 00 00 20 00	Wait    4, Tc
001cc2	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001cc3	14 ca 01 00 20 00	Branch  0x1ca1, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001cc4	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001cc5	34 c1 01 00 20 00	Branch  0x1c13, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001cc6	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001cc7	a4 ca 01 00 20 00	Branch  0x1caa, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001cc8	43 00 00 00 20 00	Wait    4, Tc
001cc9	91 97 84 8c 12 00	Copy    [1:092f] = [1:0946]
001cca	43 00 00 00 20 00	Wait    4, Tc
001ccb	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001ccc	04 cb 01 00 20 00	Branch  0x1cb0, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001ccd	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001cce	14 c3 01 00 20 00	Branch  0x1c31, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001ccf	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001cd0	94 cb 01 00 20 00	Branch  0x1cb9, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001cd1	06 00 00 00 00 00	Nop     		# Else_44_Func_Start
001cd2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &)
001cd3	43 00 00 00 20 00	Wait    4, Tc
001cd4	01 70 98 60 12 00	Copy    [0:30e0] = [1:0930]
001cd5	01 71 98 9e 12 00	Copy    [0:30e2] = [1:094f]
001cd6	33 00 00 00 20 00	Wait    3, Tc
001cd7	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
001cd8	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
001cd9	73 00 00 00 20 00	Wait    7, Tc
001cda	11 98 04 d0 61 00	Copy    [1:0930] = [0:30e8]
001cdb	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001cdc	43 00 00 00 20 00	Wait    4, Tc
001cdd	01 70 98 a0 12 00	Copy    [0:30e0] = [1:0950]
001cde	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001cdf	01 70 98 a0 12 00	Copy    [0:30e0] = [1:0950]
001ce0	a4 c5 01 00 20 00	Branch  0x1c5a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_3 >
001ce1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &)
001ce2	43 00 00 00 20 00	Wait    4, Tc
001ce3	01 70 98 62 12 00	Copy    [0:30e0] = [1:0931]
001ce4	01 71 98 9e 12 00	Copy    [0:30e2] = [1:094f]
001ce5	33 00 00 00 20 00	Wait    3, Tc
001ce6	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
001ce7	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
001ce8	73 00 00 00 20 00	Wait    7, Tc
001ce9	91 98 04 d0 61 00	Copy    [1:0931] = [0:30e8]
001cea	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001ceb	43 00 00 00 20 00	Wait    4, Tc
001cec	01 70 98 a0 12 00	Copy    [0:30e0] = [1:0950]
001ced	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001cee	01 70 98 a0 12 00	Copy    [0:30e0] = [1:0950]
001cef	84 c7 01 00 20 00	Branch  0x1c78, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_4 >
001cf0	04 00 00 00 40 00	Branch  0x0, [RET]


__If_45_IQ_FIN
001cf1	43 00 00 00 20 00	Wait    4, Tc		# If_45_Func_Start
001cf2	11 98 84 86 12 00	Copy    [1:0930] = [1:0943]
001cf3	43 00 00 00 20 00	Wait    4, Tc
001cf4	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001cf5	34 cd 01 00 20 00	Branch  0x1cd3, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001cf6	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001cf7	34 c6 01 00 20 00	Branch  0x1c63, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001cf8	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001cf9	c4 cd 01 00 20 00	Branch  0x1cdc, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001cfa	43 00 00 00 20 00	Wait    4, Tc
001cfb	91 98 84 8c 12 00	Copy    [1:0931] = [1:0946]
001cfc	43 00 00 00 20 00	Wait    4, Tc
001cfd	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
001cfe	24 ce 01 00 20 00	Branch  0x1ce2, [CALL] < Vayyar::SequencerMath::UnsignedMultiplyShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001cff	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001d00	14 c8 01 00 20 00	Branch  0x1c81, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001d01	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001d02	b4 ce 01 00 20 00	Branch  0x1ceb, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001d03	06 00 00 00 00 00	Nop     		# Else_45_Func_Start
001d04	04 00 00 00 40 00	Branch  0x0, [RET]


__If_47_SPURS::LO
001d05	01 23 90 5c 12 00	Copy    [0:2046] = [1:092e]		# If_47_Func_Start
001d06	81 23 90 5e 12 00	Copy    [0:2047] = [1:092f]
001d07	33 00 00 00 20 00	Wait    3, Tc
001d08	81 20 90 54 12 00	Copy    [0:2041] = [1:092a]
001d09	01 22 90 58 12 00	Copy    [0:2044] = [1:092c]
001d0a	33 00 00 00 20 00	Wait    3, Tc
001d0b	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_47_SPURS::LO
001d0c	01 23 90 4e 12 00	Copy    [0:2046] = [1:0927]		# Else_47_Func_Start
001d0d	81 23 90 50 12 00	Copy    [0:2047] = [1:0928]
001d0e	33 00 00 00 20 00	Wait    3, Tc
001d0f	81 20 90 60 12 00	Copy    [0:2041] = [1:0930]
001d10	01 22 90 62 12 00	Copy    [0:2044] = [1:0931]
001d11	33 00 00 00 20 00	Wait    3, Tc
001d12	04 00 00 00 40 00	Branch  0x0, [RET]


__If_46_LO::TX_LO
001d13	a3 00 00 00 20 00	Wait    10, Tc
001d14	01 48 98 7c 12 00	Copy    [0:3090] = [1:093e]		# If_46_Func_Start
001d15	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001d16	93 00 00 00 20 00	Wait    9, Tc
001d17	02 00 00 01 00 00	Cond    0x00100000

001d18	d4 d1 01 00 90 00	Branch  0x1d1d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001d19	54 d0 01 00 20 00	Branch  0x1d05, [CALL] < __If_47_SPURS::LO >
001d1a	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001d1b	43 00 00 00 20 00	Wait    4, Tc
001d1c	04 d2 01 00 00 00	Branch  0x1d20, [JMP]
001d1d	c4 d0 01 00 20 00	Branch  0x1d0c, [CALL] < __Else_47_SPURS::LO >		# Else_47
001d1e	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001d1f	43 00 00 00 20 00	Wait    4, Tc
001d20	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_47

__If_48_SPURS::LO
001d21	01 2b 90 5c 12 00	Copy    [0:2056] = [1:092e]		# If_48_Func_Start
001d22	81 2b 90 5e 12 00	Copy    [0:2057] = [1:092f]
001d23	33 00 00 00 20 00	Wait    3, Tc
001d24	81 28 90 54 12 00	Copy    [0:2051] = [1:092a]
001d25	01 2a 90 58 12 00	Copy    [0:2054] = [1:092c]
001d26	33 00 00 00 20 00	Wait    3, Tc
001d27	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_48_SPURS::LO
001d28	01 2b 90 4e 12 00	Copy    [0:2056] = [1:0927]		# Else_48_Func_Start
001d29	81 2b 90 50 12 00	Copy    [0:2057] = [1:0928]
001d2a	33 00 00 00 20 00	Wait    3, Tc
001d2b	81 28 90 60 12 00	Copy    [0:2051] = [1:0930]
001d2c	01 2a 90 62 12 00	Copy    [0:2054] = [1:0931]
001d2d	33 00 00 00 20 00	Wait    3, Tc
001d2e	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_46_LO::TX_LO
001d2f	a3 00 00 00 20 00	Wait    10, Tc
001d30	01 48 98 7c 12 00	Copy    [0:3090] = [1:093e]		# Else_46_Func_Start
001d31	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001d32	93 00 00 00 20 00	Wait    9, Tc
001d33	02 00 00 01 00 00	Cond    0x00100000

001d34	94 d3 01 00 90 00	Branch  0x1d39, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001d35	14 d2 01 00 20 00	Branch  0x1d21, [CALL] < __If_48_SPURS::LO >
001d36	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001d37	43 00 00 00 20 00	Wait    4, Tc
001d38	c4 d3 01 00 00 00	Branch  0x1d3c, [JMP]
001d39	84 d2 01 00 20 00	Branch  0x1d28, [CALL] < __Else_48_SPURS::LO >		# Else_48
001d3a	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001d3b	43 00 00 00 20 00	Wait    4, Tc
001d3c	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_48

PreRecordRxCalibFunction
001d3d	53 00 00 00 20 00	Wait    5, Tc		# If_42
001d3e	01 48 98 7e 12 00	Copy    [0:3090] = [1:093f]
001d3f	00 49 18 00 00 00	Write   [0:0x3092] = 0
001d40	53 00 00 00 20 00	Wait    5, Tc
001d41	02 00 00 01 00 00	Cond    0x00100000

001d42	54 d4 01 00 90 00	Branch  0x1d45, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001d43	d4 c3 01 00 20 00	Branch  0x1c3d, [CALL] < __If_42_LO_CRS >
001d44	54 d4 01 00 00 00	Branch  0x1d45, [JMP]
001d45	53 00 00 00 20 00	Wait    5, Tc		# Else_42
001d46	01 48 98 7e 12 00	Copy    [0:3090] = [1:093f]
001d47	00 49 98 00 00 00	Write   [0:0x3092] = 1
001d48	53 00 00 00 20 00	Wait    5, Tc
001d49	02 00 00 01 00 00	Cond    0x00100000

001d4a	d4 d4 01 00 90 00	Branch  0x1d4d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001d4b	d4 c8 01 00 20 00	Branch  0x1c8d, [CALL] < __If_43_IQ_CRS >
001d4c	d4 d4 01 00 00 00	Branch  0x1d4d, [JMP]
001d4d	53 00 00 00 20 00	Wait    5, Tc		# Else_43
001d4e	01 48 98 7e 12 00	Copy    [0:3090] = [1:093f]
001d4f	00 49 18 01 00 00	Write   [0:0x3092] = 2
001d50	53 00 00 00 20 00	Wait    5, Tc
001d51	02 00 00 01 00 00	Cond    0x00100000

001d52	54 d5 01 00 90 00	Branch  0x1d55, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001d53	f4 cb 01 00 20 00	Branch  0x1cbf, [CALL] < __If_44_LO_FIN >
001d54	54 d5 01 00 00 00	Branch  0x1d55, [JMP]
001d55	53 00 00 00 20 00	Wait    5, Tc		# Else_44
001d56	01 48 98 7e 12 00	Copy    [0:3090] = [1:093f]
001d57	00 49 98 01 00 00	Write   [0:0x3092] = 3
001d58	53 00 00 00 20 00	Wait    5, Tc
001d59	02 00 00 01 00 00	Cond    0x00100000

001d5a	d4 d5 01 00 90 00	Branch  0x1d5d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001d5b	14 cf 01 00 20 00	Branch  0x1cf1, [CALL] < __If_45_IQ_FIN >
001d5c	d4 d5 01 00 00 00	Branch  0x1d5d, [JMP]
001d5d	53 00 00 00 20 00	Wait    5, Tc		# Else_45
001d5e	01 48 98 44 12 00	Copy    [0:3090] = [1:0922]
001d5f	00 49 18 00 00 00	Write   [0:0x3092] = 0
001d60	53 00 00 00 20 00	Wait    5, Tc
001d61	02 00 00 01 00 00	Cond    0x00100000

001d62	64 d6 01 00 90 00	Branch  0x1d66, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001d63	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001d64	34 d1 01 00 20 00	Branch  0x1d13, [CALL] < __If_46_LO::TX_LO >
001d65	84 d6 01 00 00 00	Branch  0x1d68, [JMP]
001d66	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_46
001d67	f4 d2 01 00 20 00	Branch  0x1d2f, [CALL] < __Else_46_LO::TX_LO >
001d68	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_46

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeDmaModule::StartDma(class ILVariable &,unsigned int,unsigned int,unsigned int,unsigned int,enum Vayyar::Centipede::DMA_MODE,bool)_sub_1
001d69	01 b6 80 01 00 01	Copy    [0:016c] = [SF+0], SrcBase: AI
001d6a	01 b6 80 01 00 01	Copy    [0:016c] = [SF+1], SrcBase: AI
001d6b	33 00 00 00 20 00	Wait    3, Tc
001d6c	01 b0 80 a2 12 00	Copy    [0:0160] = [1:0951]
001d6d	81 b0 80 a4 12 00	Copy    [0:0161] = [1:0952]
001d6e	33 00 00 00 20 00	Wait    3, Tc
001d6f	01 b4 80 01 00 01	Copy    [0:0168] = [SF+2], SrcBase: AI
001d70	81 b4 80 01 00 01	Copy    [0:0169] = [SF+3], SrcBase: AI
001d71	33 00 00 00 20 00	Wait    3, Tc
001d72	01 b2 80 01 00 01	Copy    [0:0164] = [SF+4], SrcBase: AI
001d73	81 b2 80 01 00 01	Copy    [0:0165] = [SF+5], SrcBase: AI
001d74	33 00 00 00 20 00	Wait    3, Tc
001d75	01 b3 80 01 00 01	Copy    [0:0166] = [SF+6], SrcBase: AI
001d76	81 b3 80 01 00 01	Copy    [0:0167] = [SF+7], SrcBase: AI
001d77	33 00 00 00 20 00	Wait    3, Tc
001d78	01 b6 80 01 00 01	Copy    [0:016c] = [SF+8], SrcBase: AI
001d79	04 00 00 00 40 00	Branch  0x0, [RET]


__If_50_WritingToRxMemFlag
001d7a	43 00 00 00 20 00	Wait    4, Tc
001d7b	01 b7 80 01 00 01	Copy    [0:016e] = [SF+0], SrcBase: AI		# If_50_Func_Start
001d7c	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_50_WritingToRxMemFlag
001d7d	43 00 00 00 20 00	Wait    4, Tc
001d7e	01 b7 80 01 00 01	Copy    [0:016e] = [SF+0], SrcBase: AI		# Else_50_Func_Start
001d7f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeDmaModule::StartDma(class ILVariable &,unsigned int,unsigned int,unsigned int,unsigned int,enum Vayyar::Centipede::DMA_MODE,bool)
001d80	43 00 00 00 20 00	Wait    4, Tc
001d81	94 d6 01 00 20 00	Branch  0x1d69, [CALL] < Vayyar::Centipede::CentipedeDmaModule::StartDma(class ILVariable &,unsigned int,unsigned int,unsigned int,unsigned int,enum Vayyar::Centipede::DMA_MODE,bool)_sub_1 >
001d82	53 00 00 00 20 00	Wait    5, Tc		# If_50
001d83	01 48 98 a6 12 00	Copy    [0:3090] = [1:0953]
001d84	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001d85	93 00 00 00 20 00	Wait    9, Tc
001d86	02 00 00 01 00 00	Cond    0x00100000

001d87	d4 d8 01 00 90 00	Branch  0x1d8d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001d88	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001d89	a4 d7 01 00 20 00	Branch  0x1d7a, [CALL] < __If_50_WritingToRxMemFlag >
001d8a	00 08 18 5a 07 00	Write   [0:0x3010] = eb4
001d8b	43 00 00 00 20 00	Wait    4, Tc
001d8c	14 d9 01 00 00 00	Branch  0x1d91, [JMP]
001d8d	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_50
001d8e	d4 d7 01 00 20 00	Branch  0x1d7d, [CALL] < __Else_50_WritingToRxMemFlag >
001d8f	00 08 18 5a 07 00	Write   [0:0x3010] = eb4
001d90	43 00 00 00 20 00	Wait    4, Tc
001d91	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_50

Rec_0_21744_12_0_1_0
001d92	43 00 00 00 20 00	Wait    4, Tc
001d93	01 00 88 01 00 01	Copy    [0:1000] = [SF+0], SrcBase: AI
001d94	01 00 88 01 00 01	Copy    [0:1000] = [SF+1], SrcBase: AI
001d95	33 00 00 00 20 00	Wait    3, Tc
001d96	01 02 88 01 00 01	Copy    [0:1004] = [SF+2], SrcBase: AI
001d97	81 02 88 01 00 01	Copy    [0:1005] = [SF+3], SrcBase: AI
001d98	33 00 00 00 20 00	Wait    3, Tc
001d99	01 34 88 01 00 01	Copy    [0:1068] = [SF+4], SrcBase: AI
001d9a	01 35 88 01 00 01	Copy    [0:106a] = [SF+5], SrcBase: AI
001d9b	33 00 00 00 20 00	Wait    3, Tc
001d9c	01 36 88 01 00 01	Copy    [0:106c] = [SF+6], SrcBase: AI
001d9d	81 36 88 01 00 01	Copy    [0:106d] = [SF+7], SrcBase: AI
001d9e	33 00 00 00 20 00	Wait    3, Tc
001d9f	02 00 00 40 00 00	Cond    0x04000000

001da0	03 00 00 00 10 00	Wait    0, tC  ******** Conditional Wait. Check code if running MC
001da1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeDmaModule::WaitForDmaCompletion(void)
001da2	80 c8 00 08 00 00	Write   [0:0x0191] = 10
001da3	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001da4	13 01 00 00 20 00	Wait    17, Tc
001da5	80 c8 00 08 00 00	Write   [0:0x0191] = 10
001da6	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001da7	13 01 00 00 20 00	Wait    17, Tc
001da8	80 c8 00 08 00 00	Write   [0:0x0191] = 10
001da9	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001daa	13 01 00 00 20 00	Wait    17, Tc
001dab	80 c8 00 08 00 00	Write   [0:0x0191] = 10
001dac	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001dad	13 01 00 00 20 00	Wait    17, Tc
001dae	80 c8 00 08 00 00	Write   [0:0x0191] = 10
001daf	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001db0	13 01 00 00 20 00	Wait    17, Tc
001db1	80 c8 00 08 00 00	Write   [0:0x0191] = 10
001db2	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001db3	13 01 00 00 20 00	Wait    17, Tc
001db4	80 c8 00 08 00 00	Write   [0:0x0191] = 10
001db5	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001db6	13 01 00 00 20 00	Wait    17, Tc
001db7	80 c8 00 08 00 00	Write   [0:0x0191] = 10
001db8	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001db9	13 01 00 00 20 00	Wait    17, Tc
001dba	80 c8 00 06 00 00	Write   [0:0x0191] = c
001dbb	00 c8 80 00 00 00	Write   [0:0x0190] = 1
001dbc	13 01 00 00 20 00	Wait    17, Tc
001dbd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >)
001dbe	43 00 00 00 20 00	Wait    4, Tc
001dbf	00 08 18 55 07 00	Write   [0:0x3010] = eaa
001dc0	04 d8 01 00 20 00	Branch  0x1d80, [CALL] < Vayyar::Centipede::CentipedeDmaModule::StartDma(class ILVariable &,unsigned int,unsigned int,unsigned int,unsigned int,enum Vayyar::Centipede::DMA_MODE,bool) >
001dc1	00 08 18 5a 07 00	Write   [0:0x3010] = eb4
001dc2	24 d9 01 00 20 00	Branch  0x1d92, [CALL] < Rec_0_21744_12_0_1_0 >
001dc3	00 08 18 4f 07 00	Write   [0:0x3010] = e9e
001dc4	63 00 00 00 20 00	Wait    6, Tc
001dc5	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
001dc6	01 00 90 01 00 01	Copy    [0:2000] = [SF+0], SrcBase: AI
001dc7	01 8a 88 01 00 01	Copy    [0:1114] = [SF+1], SrcBase: AI
001dc8	33 00 00 00 20 00	Wait    3, Tc
001dc9	81 8a 88 01 00 01	Copy    [0:1115] = [SF+2], SrcBase: AI
001dca	01 95 88 01 00 01	Copy    [0:112a] = [SF+3], SrcBase: AI
001dcb	33 00 00 00 20 00	Wait    3, Tc
001dcc	81 95 88 01 00 01	Copy    [0:112b] = [SF+4], SrcBase: AI
001dcd	81 12 90 01 00 01	Copy    [0:2025] = [SF+5], SrcBase: AI
001dce	33 00 00 00 20 00	Wait    3, Tc
001dcf	01 12 90 01 00 01	Copy    [0:2024] = [SF+6], SrcBase: AI
001dd0	81 15 90 01 00 01	Copy    [0:202b] = [SF+7], SrcBase: AI
001dd1	33 00 00 00 20 00	Wait    3, Tc
001dd2	01 15 90 01 00 01	Copy    [0:202a] = [SF+8], SrcBase: AI
001dd3	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
001dd4	01 00 90 01 00 01	Copy    [0:2000] = [SF+9], SrcBase: AI
001dd5	01 09 88 01 00 01	Copy    [0:1012] = [SF+10], SrcBase: AI
001dd6	33 53 05 00 20 00	Wait    21811, Tc
001dd7	01 09 88 01 00 01	Copy    [0:1012] = [SF+11], SrcBase: AI
001dd8	24 da 01 00 20 00	Branch  0x1da2, [CALL] < Vayyar::Centipede::CentipedeDmaModule::WaitForDmaCompletion(void) >
001dd9	00 08 18 55 07 00	Write   [0:0x3010] = eaa
001dda	43 00 00 00 20 00	Wait    4, Tc
001ddb	91 a8 04 d4 02 00	Copy    [1:0951] = [0:016a]
001ddc	11 a9 04 d6 02 00	Copy    [1:0952] = [0:016b]
001ddd	33 00 00 00 20 00	Wait    3, Tc
001dde	04 00 00 00 40 00	Branch  0x0, [RET]


__If_49_SPURS::LO
001ddf	00 08 18 4f 07 00	Write   [0:0x3010] = e9e		# If_49_Func_Start
001de0	e4 db 01 00 20 00	Branch  0x1dbe, [CALL] < Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >) >
001de1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >)
001de2	43 00 00 00 20 00	Wait    4, Tc
001de3	00 08 18 55 07 00	Write   [0:0x3010] = eaa
001de4	04 d8 01 00 20 00	Branch  0x1d80, [CALL] < Vayyar::Centipede::CentipedeDmaModule::StartDma(class ILVariable &,unsigned int,unsigned int,unsigned int,unsigned int,enum Vayyar::Centipede::DMA_MODE,bool) >
001de5	00 08 18 5e 07 00	Write   [0:0x3010] = ebc
001de6	24 d9 01 00 20 00	Branch  0x1d92, [CALL] < Rec_0_21744_12_0_1_0 >
001de7	00 08 18 4f 07 00	Write   [0:0x3010] = e9e
001de8	63 00 00 00 20 00	Wait    6, Tc
001de9	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
001dea	01 00 90 01 00 01	Copy    [0:2000] = [SF+0], SrcBase: AI
001deb	01 8a 88 01 00 01	Copy    [0:1114] = [SF+1], SrcBase: AI
001dec	33 00 00 00 20 00	Wait    3, Tc
001ded	81 8a 88 01 00 01	Copy    [0:1115] = [SF+2], SrcBase: AI
001dee	01 95 88 01 00 01	Copy    [0:112a] = [SF+3], SrcBase: AI
001def	33 00 00 00 20 00	Wait    3, Tc
001df0	81 95 88 01 00 01	Copy    [0:112b] = [SF+4], SrcBase: AI
001df1	81 12 90 01 00 01	Copy    [0:2025] = [SF+5], SrcBase: AI
001df2	33 00 00 00 20 00	Wait    3, Tc
001df3	01 12 90 01 00 01	Copy    [0:2024] = [SF+6], SrcBase: AI
001df4	81 15 90 01 00 01	Copy    [0:202b] = [SF+7], SrcBase: AI
001df5	33 00 00 00 20 00	Wait    3, Tc
001df6	01 15 90 01 00 01	Copy    [0:202a] = [SF+8], SrcBase: AI
001df7	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
001df8	01 00 90 01 00 01	Copy    [0:2000] = [SF+9], SrcBase: AI
001df9	01 09 88 01 00 01	Copy    [0:1012] = [SF+10], SrcBase: AI
001dfa	33 af 00 00 20 00	Wait    2803, Tc
001dfb	01 09 88 01 00 01	Copy    [0:1012] = [SF+11], SrcBase: AI
001dfc	24 da 01 00 20 00	Branch  0x1da2, [CALL] < Vayyar::Centipede::CentipedeDmaModule::WaitForDmaCompletion(void) >
001dfd	00 08 18 55 07 00	Write   [0:0x3010] = eaa
001dfe	43 00 00 00 20 00	Wait    4, Tc
001dff	91 a8 04 d4 02 00	Copy    [1:0951] = [0:016a]
001e00	11 a9 04 d6 02 00	Copy    [1:0952] = [0:016b]
001e01	33 00 00 00 20 00	Wait    3, Tc
001e02	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_49_SPURS::LO
001e03	00 08 18 4f 07 00	Write   [0:0x3010] = e9e		# Else_49_Func_Start
001e04	24 de 01 00 20 00	Branch  0x1de2, [CALL] < Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >) >
001e05	04 00 00 00 40 00	Branch  0x0, [RET]


IqCal_RecordRx
001e06	a3 00 00 00 20 00	Wait    10, Tc
001e07	01 48 98 46 12 00	Copy    [0:3090] = [1:0923]		# If_49
001e08	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001e09	93 00 00 00 20 00	Wait    9, Tc
001e0a	02 00 00 01 00 00	Cond    0x00100000

001e0b	04 e1 01 00 90 00	Branch  0x1e10, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e0c	f4 dd 01 00 20 00	Branch  0x1ddf, [CALL] < __If_49_SPURS::LO >
001e0d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001e0e	43 00 00 00 20 00	Wait    4, Tc
001e0f	34 e1 01 00 00 00	Branch  0x1e13, [JMP]
001e10	34 e0 01 00 20 00	Branch  0x1e03, [CALL] < __Else_49_SPURS::LO >		# Else_49
001e11	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001e12	43 00 00 00 20 00	Wait    4, Tc
001e13	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_49

PostRecordRxCalibFunction
001e14	10 aa 04 00 00 00	Write   [1:0x0954] = 0
001e15	53 00 00 00 20 00	Wait    5, Tc		# If_52
001e16	01 48 98 7c 12 00	Copy    [0:3090] = [1:093e]
001e17	00 49 18 00 00 00	Write   [0:0x3092] = 0
001e18	53 00 00 00 20 00	Wait    5, Tc
001e19	02 00 00 01 00 00	Cond    0x00100000

001e1a	84 e4 01 00 90 00	Branch  0x1e48, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e1b	01 4c 98 68 12 00	Copy    [0:3098] = [1:0934]		# If_52_Func_Start
001e1c	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001e1d	33 00 00 00 20 00	Wait    3, Tc
001e1e	01 4d 18 e4 20 00	Copy    [0:309a] = [0:1072]
001e1f	53 00 00 00 20 00	Wait    5, Tc
001e20	02 00 08 00 00 00	Cond    0x00008000

001e21	44 e2 01 00 90 00	Branch  0x1e24, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e22	10 aa 84 00 00 00	Write   [1:0x0954] = 1
001e23	74 e4 01 00 00 00	Branch  0x1e47, [JMP]
001e24	53 00 00 00 20 00	Wait    5, Tc		# Else_53
001e25	01 48 18 e4 20 00	Copy    [0:3090] = [0:1072]
001e26	01 49 98 68 12 00	Copy    [0:3092] = [1:0934]
001e27	93 00 00 00 20 00	Wait    9, Tc
001e28	02 00 00 01 00 00	Cond    0x00100000

001e29	74 e4 01 00 90 00	Branch  0x1e47, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e2a	01 4c 98 66 12 00	Copy    [0:3098] = [1:0933]		# If_54_Func_Start
001e2b	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001e2c	33 00 00 00 20 00	Wait    3, Tc
001e2d	01 4d 18 e2 20 00	Copy    [0:309a] = [0:1071]
001e2e	53 00 00 00 20 00	Wait    5, Tc
001e2f	02 00 08 00 00 00	Cond    0x00008000

001e30	34 e3 01 00 90 00	Branch  0x1e33, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e31	10 aa 84 00 00 00	Write   [1:0x0954] = 1
001e32	54 e4 01 00 00 00	Branch  0x1e45, [JMP]
001e33	53 00 00 00 20 00	Wait    5, Tc		# Else_55
001e34	01 48 18 e2 20 00	Copy    [0:3090] = [0:1071]
001e35	01 49 98 66 12 00	Copy    [0:3092] = [1:0933]
001e36	93 00 00 00 20 00	Wait    9, Tc
001e37	02 00 00 01 00 00	Cond    0x00100000

001e38	54 e4 01 00 90 00	Branch  0x1e45, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e39	01 4c 98 64 12 00	Copy    [0:3098] = [1:0932]		# If_56_Func_Start
001e3a	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001e3b	33 00 00 00 20 00	Wait    3, Tc
001e3c	01 4d 18 e0 20 00	Copy    [0:309a] = [0:1070]
001e3d	53 00 00 00 20 00	Wait    5, Tc
001e3e	02 00 08 00 00 00	Cond    0x00008000

001e3f	34 e4 01 00 90 00	Branch  0x1e43, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e40	10 aa 84 00 00 00	Write   [1:0x0954] = 1
001e41	06 00 00 00 00 00	Nop     
001e42	34 e4 01 00 00 00	Branch  0x1e43, [JMP]
001e43	06 00 00 00 00 00	Nop     		# Else_57
001e44	54 e4 01 00 00 00	Branch  0x1e45, [JMP]
001e45	06 00 00 00 00 00	Nop     		# Else_56
001e46	74 e4 01 00 00 00	Branch  0x1e47, [JMP]
001e47	44 e7 01 00 00 00	Branch  0x1e74, [JMP]		# Else_54
001e48	01 4c 98 6e 12 00	Copy    [0:3098] = [1:0937]		# Else_52
001e49	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001e4a	33 00 00 00 20 00	Wait    3, Tc
001e4b	01 4d 18 e4 20 00	Copy    [0:309a] = [0:1072]
001e4c	53 00 00 00 20 00	Wait    5, Tc
001e4d	02 00 08 00 00 00	Cond    0x00008000

001e4e	14 e5 01 00 90 00	Branch  0x1e51, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e4f	10 aa 84 00 00 00	Write   [1:0x0954] = 1
001e50	44 e7 01 00 00 00	Branch  0x1e74, [JMP]
001e51	53 00 00 00 20 00	Wait    5, Tc		# Else_58
001e52	01 48 18 e4 20 00	Copy    [0:3090] = [0:1072]
001e53	01 49 98 6e 12 00	Copy    [0:3092] = [1:0937]
001e54	93 00 00 00 20 00	Wait    9, Tc
001e55	02 00 00 01 00 00	Cond    0x00100000

001e56	44 e7 01 00 90 00	Branch  0x1e74, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e57	01 4c 98 6c 12 00	Copy    [0:3098] = [1:0936]		# If_59_Func_Start
001e58	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001e59	33 00 00 00 20 00	Wait    3, Tc
001e5a	01 4d 18 e2 20 00	Copy    [0:309a] = [0:1071]
001e5b	53 00 00 00 20 00	Wait    5, Tc
001e5c	02 00 08 00 00 00	Cond    0x00008000

001e5d	04 e6 01 00 90 00	Branch  0x1e60, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e5e	10 aa 84 00 00 00	Write   [1:0x0954] = 1		# If_55_Func_Start
001e5f	24 e7 01 00 00 00	Branch  0x1e72, [JMP]
001e60	53 00 00 00 20 00	Wait    5, Tc		# Else_60
001e61	01 48 18 e2 20 00	Copy    [0:3090] = [0:1071]
001e62	01 49 98 6c 12 00	Copy    [0:3092] = [1:0936]
001e63	93 00 00 00 20 00	Wait    9, Tc
001e64	02 00 00 01 00 00	Cond    0x00100000

001e65	24 e7 01 00 90 00	Branch  0x1e72, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e66	01 4c 98 6a 12 00	Copy    [0:3098] = [1:0935]		# If_61_Func_Start
001e67	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001e68	33 00 00 00 20 00	Wait    3, Tc
001e69	01 4d 18 e0 20 00	Copy    [0:309a] = [0:1070]
001e6a	53 00 00 00 20 00	Wait    5, Tc
001e6b	02 00 08 00 00 00	Cond    0x00008000

001e6c	04 e7 01 00 90 00	Branch  0x1e70, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e6d	10 aa 84 00 00 00	Write   [1:0x0954] = 1		# If_57_Func_Start
001e6e	06 00 00 00 00 00	Nop     		# Else_57_Func_Start
001e6f	04 e7 01 00 00 00	Branch  0x1e70, [JMP]
001e70	06 00 00 00 00 00	Nop     		# Else_62
001e71	24 e7 01 00 00 00	Branch  0x1e72, [JMP]
001e72	06 00 00 00 00 00	Nop     		# Else_61
001e73	44 e7 01 00 00 00	Branch  0x1e74, [JMP]
001e74	01 4c 98 a8 12 00	Copy    [0:3098] = [1:0954]		# Else_59
001e75	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001e76	33 00 00 00 20 00	Wait    3, Tc
001e77	00 4d 18 00 00 00	Write   [0:0x309a] = 0
001e78	53 00 00 00 20 00	Wait    5, Tc
001e79	02 00 08 00 00 00	Cond    0x00008000

001e7a	64 e9 01 00 90 00	Branch  0x1e96, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e7b	53 00 00 00 20 00	Wait    5, Tc		# If_63_Func_Start
001e7c	01 48 98 7c 12 00	Copy    [0:3090] = [1:093e]
001e7d	00 49 18 00 00 00	Write   [0:0x3092] = 0
001e7e	53 00 00 00 20 00	Wait    5, Tc
001e7f	02 00 00 01 00 00	Cond    0x00100000

001e80	b4 e8 01 00 90 00	Branch  0x1e8b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e81	11 99 04 e0 20 00	Copy    [1:0932] = [0:1070]		# If_64_Func_Start
001e82	91 99 04 e2 20 00	Copy    [1:0933] = [0:1071]
001e83	33 00 00 00 20 00	Wait    3, Tc
001e84	11 9a 04 e4 20 00	Copy    [1:0934] = [0:1072]
001e85	43 00 00 00 20 00	Wait    4, Tc
001e86	91 93 84 5c 12 00	Copy    [1:0927] = [1:092e]
001e87	93 00 00 00 20 00	Wait    9, Tc
001e88	11 94 84 5e 12 00	Copy    [1:0928] = [1:092f]
001e89	43 00 00 00 20 00	Wait    4, Tc
001e8a	44 e9 01 00 00 00	Branch  0x1e94, [JMP]
001e8b	91 9a 04 e0 20 00	Copy    [1:0935] = [0:1070]		# Else_64
001e8c	11 9b 04 e2 20 00	Copy    [1:0936] = [0:1071]
001e8d	33 00 00 00 20 00	Wait    3, Tc
001e8e	91 9b 04 e4 20 00	Copy    [1:0937] = [0:1072]
001e8f	43 00 00 00 20 00	Wait    4, Tc
001e90	11 95 84 60 12 00	Copy    [1:092a] = [1:0930]
001e91	93 00 00 00 20 00	Wait    9, Tc
001e92	11 96 84 62 12 00	Copy    [1:092c] = [1:0931]
001e93	43 00 00 00 20 00	Wait    4, Tc
001e94	06 00 00 00 00 00	Nop     		# EndIf_64
001e95	64 e9 01 00 00 00	Branch  0x1e96, [JMP]
001e96	90 aa 04 00 00 00	Write   [1:0x0955] = 0		# Else_63
001e97	01 4c 98 3a 00 00	Copy    [0:3098] = [1:001d]		# If_65
001e98	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001e99	33 00 00 00 20 00	Wait    3, Tc
001e9a	01 4d 18 e4 20 00	Copy    [0:309a] = [0:1072]
001e9b	53 00 00 00 20 00	Wait    5, Tc
001e9c	02 00 08 00 00 00	Cond    0x00008000

001e9d	04 ea 01 00 90 00	Branch  0x1ea0, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001e9e	90 aa 84 00 00 00	Write   [1:0x0955] = 1
001e9f	34 ec 01 00 00 00	Branch  0x1ec3, [JMP]
001ea0	53 00 00 00 20 00	Wait    5, Tc		# Else_65
001ea1	01 48 18 e4 20 00	Copy    [0:3090] = [0:1072]
001ea2	01 49 98 3a 00 00	Copy    [0:3092] = [1:001d]
001ea3	93 00 00 00 20 00	Wait    9, Tc
001ea4	02 00 00 01 00 00	Cond    0x00100000

001ea5	34 ec 01 00 90 00	Branch  0x1ec3, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001ea6	01 4c 98 38 00 00	Copy    [0:3098] = [1:001c]		# If_66_Func_Start
001ea7	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001ea8	33 00 00 00 20 00	Wait    3, Tc
001ea9	01 4d 18 e2 20 00	Copy    [0:309a] = [0:1071]
001eaa	53 00 00 00 20 00	Wait    5, Tc
001eab	02 00 08 00 00 00	Cond    0x00008000

001eac	f4 ea 01 00 90 00	Branch  0x1eaf, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001ead	90 aa 84 00 00 00	Write   [1:0x0955] = 1		# If_67_Func_Start
001eae	14 ec 01 00 00 00	Branch  0x1ec1, [JMP]
001eaf	53 00 00 00 20 00	Wait    5, Tc		# Else_67
001eb0	01 48 18 e2 20 00	Copy    [0:3090] = [0:1071]
001eb1	01 49 98 38 00 00	Copy    [0:3092] = [1:001c]
001eb2	93 00 00 00 20 00	Wait    9, Tc
001eb3	02 00 00 01 00 00	Cond    0x00100000

001eb4	14 ec 01 00 90 00	Branch  0x1ec1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001eb5	01 4c 98 36 00 00	Copy    [0:3098] = [1:001b]		# If_68_Func_Start
001eb6	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001eb7	33 00 00 00 20 00	Wait    3, Tc
001eb8	01 4d 18 e0 20 00	Copy    [0:309a] = [0:1070]
001eb9	53 00 00 00 20 00	Wait    5, Tc
001eba	02 00 08 00 00 00	Cond    0x00008000

001ebb	f4 eb 01 00 90 00	Branch  0x1ebf, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001ebc	90 aa 84 00 00 00	Write   [1:0x0955] = 1		# If_69_Func_Start
001ebd	06 00 00 00 00 00	Nop     		# Else_69_Func_Start
001ebe	f4 eb 01 00 00 00	Branch  0x1ebf, [JMP]
001ebf	06 00 00 00 00 00	Nop     		# Else_69
001ec0	14 ec 01 00 00 00	Branch  0x1ec1, [JMP]
001ec1	06 00 00 00 00 00	Nop     		# Else_68
001ec2	34 ec 01 00 00 00	Branch  0x1ec3, [JMP]
001ec3	10 ab 04 00 00 00	Write   [1:0x0956] = 0		# Else_66
001ec4	01 4c 18 e4 20 00	Copy    [0:3098] = [0:1072]		# If_70
001ec5	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001ec6	33 00 00 00 20 00	Wait    3, Tc
001ec7	01 4d 98 40 00 00	Copy    [0:309a] = [1:0020]
001ec8	53 00 00 00 20 00	Wait    5, Tc
001ec9	02 00 08 00 00 00	Cond    0x00008000

001eca	d4 ec 01 00 90 00	Branch  0x1ecd, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001ecb	10 ab 84 00 00 00	Write   [1:0x0956] = 1
001ecc	04 ef 01 00 00 00	Branch  0x1ef0, [JMP]
001ecd	53 00 00 00 20 00	Wait    5, Tc		# Else_70
001ece	01 48 18 e4 20 00	Copy    [0:3090] = [0:1072]
001ecf	01 49 98 40 00 00	Copy    [0:3092] = [1:0020]
001ed0	93 00 00 00 20 00	Wait    9, Tc
001ed1	02 00 00 01 00 00	Cond    0x00100000

001ed2	04 ef 01 00 90 00	Branch  0x1ef0, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001ed3	01 4c 18 e2 20 00	Copy    [0:3098] = [0:1071]		# If_71_Func_Start
001ed4	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001ed5	33 00 00 00 20 00	Wait    3, Tc
001ed6	01 4d 98 3e 00 00	Copy    [0:309a] = [1:001f]
001ed7	53 00 00 00 20 00	Wait    5, Tc
001ed8	02 00 08 00 00 00	Cond    0x00008000

001ed9	c4 ed 01 00 90 00	Branch  0x1edc, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001eda	10 ab 84 00 00 00	Write   [1:0x0956] = 1		# If_72_Func_Start
001edb	e4 ee 01 00 00 00	Branch  0x1eee, [JMP]
001edc	53 00 00 00 20 00	Wait    5, Tc		# Else_72
001edd	01 48 18 e2 20 00	Copy    [0:3090] = [0:1071]
001ede	01 49 98 3e 00 00	Copy    [0:3092] = [1:001f]
001edf	93 00 00 00 20 00	Wait    9, Tc
001ee0	02 00 00 01 00 00	Cond    0x00100000

001ee1	e4 ee 01 00 90 00	Branch  0x1eee, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001ee2	01 4c 18 e0 20 00	Copy    [0:3098] = [0:1070]		# If_73_Func_Start
001ee3	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001ee4	33 00 00 00 20 00	Wait    3, Tc
001ee5	01 4d 98 3c 00 00	Copy    [0:309a] = [1:001e]
001ee6	53 00 00 00 20 00	Wait    5, Tc
001ee7	02 00 08 00 00 00	Cond    0x00008000

001ee8	c4 ee 01 00 90 00	Branch  0x1eec, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001ee9	10 ab 84 00 00 00	Write   [1:0x0956] = 1		# If_74_Func_Start
001eea	06 00 00 00 00 00	Nop     		# Else_74_Func_Start
001eeb	c4 ee 01 00 00 00	Branch  0x1eec, [JMP]
001eec	06 00 00 00 00 00	Nop     		# Else_74
001eed	e4 ee 01 00 00 00	Branch  0x1eee, [JMP]
001eee	06 00 00 00 00 00	Nop     		# Else_73
001eef	04 ef 01 00 00 00	Branch  0x1ef0, [JMP]
001ef0	53 00 00 00 20 00	Wait    5, Tc		# Else_71
001ef1	01 48 98 aa 12 00	Copy    [0:3090] = [1:0955]
001ef2	00 49 98 00 00 00	Write   [0:0x3092] = 1
001ef3	53 00 00 00 20 00	Wait    5, Tc
001ef4	02 00 00 01 00 00	Cond    0x00100000

001ef5	c4 ef 01 00 90 00	Branch  0x1efc, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001ef6	91 0d 00 e0 20 00	Copy    [1:001b] = [0:1070]		# If_75_Func_Start
001ef7	11 0e 00 e2 20 00	Copy    [1:001c] = [0:1071]
001ef8	33 00 00 00 20 00	Wait    3, Tc
001ef9	91 0e 00 e4 20 00	Copy    [1:001d] = [0:1072]
001efa	06 00 00 00 00 00	Nop     		# Else_75_Func_Start
001efb	c4 ef 01 00 00 00	Branch  0x1efc, [JMP]
001efc	53 00 00 00 20 00	Wait    5, Tc		# Else_75
001efd	01 48 98 ac 12 00	Copy    [0:3090] = [1:0956]
001efe	00 49 98 00 00 00	Write   [0:0x3092] = 1
001eff	53 00 00 00 20 00	Wait    5, Tc
001f00	02 00 00 01 00 00	Cond    0x00100000

001f01	84 f0 01 00 90 00	Branch  0x1f08, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001f02	11 0f 00 e0 20 00	Copy    [1:001e] = [0:1070]		# If_76_Func_Start
001f03	91 0f 00 e2 20 00	Copy    [1:001f] = [0:1071]
001f04	33 00 00 00 20 00	Wait    3, Tc
001f05	11 10 00 e4 20 00	Copy    [1:0020] = [0:1072]
001f06	06 00 00 00 00 00	Nop     		# Else_76_Func_Start
001f07	84 f0 01 00 00 00	Branch  0x1f08, [JMP]
001f08	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_76

_Loop_SearchIQ_Q
001f09	91 a2 04 20 60 00	Copy    [1:0945] = [0:3010]		# While_9_Func_Start
001f0a	53 00 00 00 20 00	Wait    5, Tc
001f0b	01 08 98 8a 12 00	Copy    [0:3010] = [1:0945]		# While_9
001f0c	01 4c 98 80 12 00	Copy    [0:3098] = [1:0940]
001f0d	33 00 00 00 20 00	Wait    3, Tc
001f0e	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001f0f	33 00 00 00 20 00	Wait    3, Tc
001f10	01 4d 98 88 12 00	Copy    [0:309a] = [1:0944]
001f11	53 00 00 00 20 00	Wait    5, Tc
001f12	02 00 08 00 00 00	Cond    0x00008000

001f13	14 f2 01 00 90 00	Branch  0x1f21, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001f14	43 00 00 00 20 00	Wait    4, Tc
001f15	11 a3 84 88 12 00	Copy    [1:0946] = [1:0944]
001f16	43 00 00 00 20 00	Wait    4, Tc
001f17	d4 d3 01 00 20 00	Branch  0x1d3d, [CALL] < PreRecordRxCalibFunction >
001f18	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001f19	64 e0 01 00 20 00	Branch  0x1e06, [CALL] < IqCal_RecordRx >
001f1a	44 e1 01 00 20 00	Branch  0x1e14, [CALL] < PostRecordRxCalibFunction >
001f1b	01 48 98 88 12 00	Copy    [0:3090] = [1:0944]
001f1c	80 48 98 00 00 00	Write   [0:0x3091] = 1
001f1d	53 00 00 00 20 00	Wait    5, Tc
001f1e	11 a2 04 20 61 00	Copy    [1:0944] = [0:3090]
001f1f	53 00 00 00 20 00	Wait    5, Tc
001f20	b4 f0 01 00 00 00	Branch  0x1f0b, [JMP]
001f21	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_9

_Loop_SearchIQ_I
001f22	11 a1 04 20 60 00	Copy    [1:0942] = [0:3010]		# While_8_Func_Start
001f23	53 00 00 00 20 00	Wait    5, Tc
001f24	01 08 98 84 12 00	Copy    [0:3010] = [1:0942]		# While_8
001f25	01 4c 98 80 12 00	Copy    [0:3098] = [1:0940]
001f26	33 00 00 00 20 00	Wait    3, Tc
001f27	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
001f28	33 00 00 00 20 00	Wait    3, Tc
001f29	01 4d 98 82 12 00	Copy    [0:309a] = [1:0941]
001f2a	53 00 00 00 20 00	Wait    5, Tc
001f2b	02 00 08 00 00 00	Cond    0x00008000

001f2c	84 f3 01 00 90 00	Branch  0x1f38, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001f2d	43 00 00 00 20 00	Wait    4, Tc
001f2e	91 a1 84 82 12 00	Copy    [1:0943] = [1:0941]
001f2f	43 00 00 00 20 00	Wait    4, Tc
001f30	10 a2 04 00 00 00	Write   [1:0x0944] = 0
001f31	94 f0 01 00 20 00	Branch  0x1f09, [CALL] < _Loop_SearchIQ_Q >
001f32	01 48 98 82 12 00	Copy    [0:3090] = [1:0941]
001f33	80 48 98 00 00 00	Write   [0:0x3091] = 1
001f34	53 00 00 00 20 00	Wait    5, Tc
001f35	91 a0 04 20 61 00	Copy    [1:0941] = [0:3090]
001f36	53 00 00 00 20 00	Wait    5, Tc
001f37	44 f2 01 00 00 00	Branch  0x1f24, [JMP]
001f38	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_8

Calibrate_calibrateSpurFunc
001f39	43 00 00 00 20 00	Wait    4, Tc
001f3a	11 9f 84 01 00 01	Copy    [1:093e] = [SF+0], SrcBase: AI
001f3b	00 08 98 f7 05 00	Write   [0:0x3010] = bef
001f3c	f4 ae 01 00 20 00	Branch  0x1aef, [CALL] < TuneFreq_SwitchCase_LO_0 >
001f3d	00 08 98 4a 07 00	Write   [0:0x3010] = e95
001f3e	43 00 00 00 20 00	Wait    4, Tc
001f3f	d4 bb 01 00 20 00	Branch  0x1bbd, [CALL] < Calibrate_calibrateSpurFunc_sub_4 >
001f40	53 00 00 00 20 00	Wait    5, Tc
001f41	01 48 98 48 12 00	Copy    [0:3090] = [1:0924]
001f42	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
001f43	93 00 00 00 20 00	Wait    9, Tc
001f44	02 00 00 01 00 00	Cond    0x00100000

001f45	64 f6 01 00 90 00	Branch  0x1f66, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001f46	00 08 98 3b 05 00	Write   [0:0x3010] = a77
001f47	34 bc 01 00 20 00	Branch  0x1bc3, [CALL] < __If_38_WaitForFirstFreqBug >
001f48	00 08 98 4b 07 00	Write   [0:0x3010] = e97
001f49	43 00 00 00 20 00	Wait    4, Tc
001f4a	64 f6 01 00 00 00	Branch  0x1f66, [JMP]
001f4b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
001f4c	14 bf 01 00 20 00	Branch  0x1bf1, [CALL] < SetStageSpurSelector >
001f4d	00 08 98 4b 07 00	Write   [0:0x3010] = e97
001f4e	43 00 00 00 20 00	Wait    4, Tc
001f4f	91 a0 84 01 00 01	Copy    [1:0941] = [SF+2], SrcBase: AI
001f50	24 f2 01 00 20 00	Branch  0x1f22, [CALL] < _Loop_SearchIQ_I >
001f51	00 08 18 4c 07 00	Write   [0:0x3010] = e98
001f52	43 00 00 00 20 00	Wait    4, Tc
001f53	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateSpurFunc
001f54	43 00 00 00 20 00	Wait    4, Tc
001f55	11 9f 84 01 00 01	Copy    [1:093e] = [SF+0], SrcBase: AI
001f56	00 08 98 f7 05 00	Write   [0:0x3010] = bef
001f57	f4 ae 01 00 20 00	Branch  0x1aef, [CALL] < TuneFreq_SwitchCase_LO_0 >
001f58	00 08 98 62 07 00	Write   [0:0x3010] = ec5
001f59	43 00 00 00 20 00	Wait    4, Tc
001f5a	d4 bb 01 00 20 00	Branch  0x1bbd, [CALL] < Calibrate_calibrateSpurFunc_sub_4 >
001f5b	53 00 00 00 20 00	Wait    5, Tc		# If_38
001f5c	01 48 98 48 12 00	Copy    [0:3090] = [1:0924]
001f5d	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
001f5e	93 00 00 00 20 00	Wait    9, Tc
001f5f	02 00 00 01 00 00	Cond    0x00100000

001f60	64 f6 01 00 90 00	Branch  0x1f66, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001f61	00 08 98 3b 05 00	Write   [0:0x3010] = a77
001f62	34 bc 01 00 20 00	Branch  0x1bc3, [CALL] < __If_38_WaitForFirstFreqBug >
001f63	00 08 98 63 07 00	Write   [0:0x3010] = ec7
001f64	43 00 00 00 20 00	Wait    4, Tc
001f65	64 f6 01 00 00 00	Branch  0x1f66, [JMP]
001f66	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_38
001f67	14 bf 01 00 20 00	Branch  0x1bf1, [CALL] < SetStageSpurSelector >
001f68	00 08 98 63 07 00	Write   [0:0x3010] = ec7
001f69	43 00 00 00 20 00	Wait    4, Tc
001f6a	91 a0 84 01 00 01	Copy    [1:0941] = [SF+2], SrcBase: AI
001f6b	24 f2 01 00 20 00	Branch  0x1f22, [CALL] < _Loop_SearchIQ_I >
001f6c	00 08 18 64 07 00	Write   [0:0x3010] = ec8
001f6d	43 00 00 00 20 00	Wait    4, Tc
001f6e	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateStageFunc
001f6f	43 00 00 00 20 00	Wait    4, Tc
001f70	74 bb 01 00 20 00	Branch  0x1bb7, [CALL] < Calibrate_calibrateStageFunc_sub_8 >
001f71	00 08 18 4a 07 00	Write   [0:0x3010] = e94
001f72	94 f3 01 00 20 00	Branch  0x1f39, [CALL] < Calibrate_calibrateSpurFunc >
001f73	00 08 18 62 07 00	Write   [0:0x3010] = ec4
001f74	44 f5 01 00 20 00	Branch  0x1f54, [CALL] < Calibrate_calibrateSpurFunc >
001f75	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001f76	43 00 00 00 20 00	Wait    4, Tc
001f77	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateStageFunc
001f78	43 00 00 00 20 00	Wait    4, Tc
001f79	74 bb 01 00 20 00	Branch  0x1bb7, [CALL] < Calibrate_calibrateStageFunc_sub_8 >
001f7a	00 08 18 4a 07 00	Write   [0:0x3010] = e94
001f7b	94 f3 01 00 20 00	Branch  0x1f39, [CALL] < Calibrate_calibrateSpurFunc >
001f7c	00 08 18 62 07 00	Write   [0:0x3010] = ec4
001f7d	44 f5 01 00 20 00	Branch  0x1f54, [CALL] < Calibrate_calibrateSpurFunc >
001f7e	00 08 18 3c 05 00	Write   [0:0x3010] = a78
001f7f	43 00 00 00 20 00	Wait    4, Tc
001f80	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001f81	43 00 00 00 20 00	Wait    4, Tc
001f82	01 70 98 4a 12 00	Copy    [0:30e0] = [1:0925]
001f83	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001f84	01 70 98 4a 12 00	Copy    [0:30e0] = [1:0925]
001f85	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001f86	33 00 00 00 20 00	Wait    3, Tc
001f87	01 71 98 c6 10 00	Copy    [0:30e2] = [1:0863]
001f88	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001f89	73 00 00 00 20 00	Wait    7, Tc
001f8a	11 8f 04 c8 61 00	Copy    [1:091e] = [0:30e4]
001f8b	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001f8c	33 00 00 00 20 00	Wait    3, Tc
001f8d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &)
001f8e	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001f8f	14 f8 01 00 20 00	Branch  0x1f81, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001f90	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
001f91	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
001f92	83 00 00 00 20 00	Wait    8, Tc
001f93	51 00 80 4e 12 00	Copy    [1:0000] = [1:0927], DestBase: A
001f94	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
001f95	83 00 00 00 20 00	Wait    8, Tc
001f96	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001f97	43 00 00 00 20 00	Wait    4, Tc
001f98	01 70 98 4a 12 00	Copy    [0:30e0] = [1:0925]
001f99	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001f9a	01 70 98 4a 12 00	Copy    [0:30e0] = [1:0925]
001f9b	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001f9c	33 00 00 00 20 00	Wait    3, Tc
001f9d	01 71 98 d0 10 00	Copy    [0:30e2] = [1:0868]
001f9e	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001f9f	73 00 00 00 20 00	Wait    7, Tc
001fa0	11 8f 04 c8 61 00	Copy    [1:091e] = [0:30e4]
001fa1	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001fa2	33 00 00 00 20 00	Wait    3, Tc
001fa3	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &)
001fa4	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001fa5	74 f9 01 00 20 00	Branch  0x1f97, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001fa6	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
001fa7	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
001fa8	83 00 00 00 20 00	Wait    8, Tc
001fa9	51 00 80 50 12 00	Copy    [1:0000] = [1:0928], DestBase: A
001faa	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
001fab	83 00 00 00 20 00	Wait    8, Tc
001fac	04 00 00 00 40 00	Branch  0x0, [RET]


__If_81_LO::TX_LO
001fad	e4 f8 01 00 20 00	Branch  0x1f8e, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &) >		# If_81_Func_Start
001fae	44 fa 01 00 20 00	Branch  0x1fa4, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &) >
001faf	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001fb0	43 00 00 00 20 00	Wait    4, Tc
001fb1	01 70 98 4a 12 00	Copy    [0:30e0] = [1:0925]
001fb2	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001fb3	01 70 98 4a 12 00	Copy    [0:30e0] = [1:0925]
001fb4	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001fb5	33 00 00 00 20 00	Wait    3, Tc
001fb6	01 71 98 66 11 00	Copy    [0:30e2] = [1:08b3]
001fb7	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001fb8	73 00 00 00 20 00	Wait    7, Tc
001fb9	11 8f 04 c8 61 00	Copy    [1:091e] = [0:30e4]
001fba	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001fbb	33 00 00 00 20 00	Wait    3, Tc
001fbc	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &)
001fbd	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001fbe	04 fb 01 00 20 00	Branch  0x1fb0, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001fbf	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
001fc0	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
001fc1	83 00 00 00 20 00	Wait    8, Tc
001fc2	51 00 80 4e 12 00	Copy    [1:0000] = [1:0927], DestBase: A
001fc3	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
001fc4	83 00 00 00 20 00	Wait    8, Tc
001fc5	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
001fc6	43 00 00 00 20 00	Wait    4, Tc
001fc7	01 70 98 4a 12 00	Copy    [0:30e0] = [1:0925]
001fc8	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
001fc9	01 70 98 4a 12 00	Copy    [0:30e0] = [1:0925]
001fca	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
001fcb	33 00 00 00 20 00	Wait    3, Tc
001fcc	01 71 98 70 11 00	Copy    [0:30e2] = [1:08b8]
001fcd	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001fce	73 00 00 00 20 00	Wait    7, Tc
001fcf	11 8f 04 c8 61 00	Copy    [1:091e] = [0:30e4]
001fd0	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
001fd1	33 00 00 00 20 00	Wait    3, Tc
001fd2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &)
001fd3	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
001fd4	64 fc 01 00 20 00	Branch  0x1fc6, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
001fd5	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
001fd6	01 09 98 3c 12 00	Copy    [0:3012] = [1:091e]
001fd7	83 00 00 00 20 00	Wait    8, Tc
001fd8	51 00 80 50 12 00	Copy    [1:0000] = [1:0928], DestBase: A
001fd9	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
001fda	83 00 00 00 20 00	Wait    8, Tc
001fdb	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_81_LO::TX_LO
001fdc	d4 fb 01 00 20 00	Branch  0x1fbd, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &) >		# Else_81_Func_Start
001fdd	34 fd 01 00 20 00	Branch  0x1fd3, [CALL] < Vayyar::operator <<(const struct ILParamVector::ILParamVectorProxy_ParamIdx &,const class IILParam &) >
001fde	04 00 00 00 40 00	Branch  0x0, [RET]


__If_80_SPURS::LO
001fdf	a3 00 00 00 20 00	Wait    10, Tc
001fe0	01 48 98 44 12 00	Copy    [0:3090] = [1:0922]		# If_80_Func_Start
001fe1	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
001fe2	93 00 00 00 20 00	Wait    9, Tc
001fe3	02 00 00 01 00 00	Cond    0x00100000

001fe4	94 fe 01 00 90 00	Branch  0x1fe9, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
001fe5	d4 fa 01 00 20 00	Branch  0x1fad, [CALL] < __If_81_LO::TX_LO >
001fe6	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001fe7	43 00 00 00 20 00	Wait    4, Tc
001fe8	c4 fe 01 00 00 00	Branch  0x1fec, [JMP]
001fe9	c4 fd 01 00 20 00	Branch  0x1fdc, [CALL] < __Else_81_LO::TX_LO >		# Else_81
001fea	00 08 18 27 05 00	Write   [0:0x3010] = a4e
001feb	43 00 00 00 20 00	Wait    4, Tc
001fec	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_81

class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)_sub_5
001fed	01 71 98 52 00 00	Copy    [0:30e2] = [1:0029]
001fee	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
001fef	33 00 00 00 20 00	Wait    3, Tc
001ff0	01 70 98 01 00 01	Copy    [0:30e0] = [SF+1], SrcBase: AI
001ff1	81 70 98 01 00 01	Copy    [0:30e1] = [SF+2], SrcBase: AI
001ff2	73 00 00 00 20 00	Wait    7, Tc
001ff3	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)
001ff4	43 00 00 00 20 00	Wait    4, Tc
001ff5	d4 fe 01 00 20 00	Branch  0x1fed, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)_sub_5 >
001ff6	91 ab 04 c8 61 00	Copy    [1:0957] = [0:30e4]
001ff7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMemoryAccessCentipede::CopyToDsp(const class ILParamShort &,const class ILParamShort &)
001ff8	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
001ff9	01 09 98 ae 12 00	Copy    [0:3012] = [1:0957]
001ffa	83 00 00 00 20 00	Wait    8, Tc
001ffb	61 00 80 54 12 00	Copy    [2:0000] = [1:092a], DestBase: A
001ffc	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
001ffd	83 00 00 00 20 00	Wait    8, Tc
001ffe	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMemoryAccessCentipede::CopyToDsp(const class ILParamShort &,const class ILParamShort &)
001fff	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
002000	01 09 98 ae 12 00	Copy    [0:3012] = [1:0957]
002001	83 00 00 00 20 00	Wait    8, Tc
002002	61 00 80 58 12 00	Copy    [2:0000] = [1:092c], DestBase: A
002003	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
002004	83 00 00 00 20 00	Wait    8, Tc
002005	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)
002006	43 00 00 00 20 00	Wait    4, Tc
002007	d4 fe 01 00 20 00	Branch  0x1fed, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)_sub_5 >
002008	91 14 00 c8 61 00	Copy    [1:0029] = [0:30e4]
002009	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_80_SPURS::LO
00200a	00 08 18 64 07 00	Write   [0:0x3010] = ec8		# Else_80_Func_Start
00200b	44 ff 01 00 20 00	Branch  0x1ff4, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
00200c	84 ff 01 00 20 00	Branch  0x1ff8, [CALL] < Vayyar::SequencerMemoryAccessCentipede::CopyToDsp(const class ILParamShort &,const class ILParamShort &) >
00200d	00 08 98 65 07 00	Write   [0:0x3010] = ecb
00200e	44 ff 01 00 20 00	Branch  0x1ff4, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
00200f	f4 ff 01 00 20 00	Branch  0x1fff, [CALL] < Vayyar::SequencerMemoryAccessCentipede::CopyToDsp(const class ILParamShort &,const class ILParamShort &) >
002010	00 08 18 67 07 00	Write   [0:0x3010] = ece
002011	64 00 02 00 20 00	Branch  0x2006, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002012	04 00 00 00 40 00	Branch  0x0, [RET]


SaveCalibrationMaxMinResultFunction
002013	01 4c 98 68 12 00	Copy    [0:3098] = [1:0934]		# If_82
002014	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
002015	33 00 00 00 20 00	Wait    3, Tc
002016	01 4d 98 2e 00 00	Copy    [0:309a] = [1:0017]
002017	53 00 00 00 20 00	Wait    5, Tc
002018	02 00 08 00 00 00	Cond    0x00008000

002019	c4 01 02 00 90 00	Branch  0x201c, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00201a	10 ac 84 00 00 00	Write   [1:0x0958] = 1
00201b	f4 03 02 00 00 00	Branch  0x203f, [JMP]
00201c	53 00 00 00 20 00	Wait    5, Tc		# Else_82
00201d	01 48 98 68 12 00	Copy    [0:3090] = [1:0934]
00201e	01 49 98 2e 00 00	Copy    [0:3092] = [1:0017]
00201f	93 00 00 00 20 00	Wait    9, Tc
002020	02 00 00 01 00 00	Cond    0x00100000

002021	f4 03 02 00 90 00	Branch  0x203f, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002022	01 4c 98 66 12 00	Copy    [0:3098] = [1:0933]		# If_83_Func_Start
002023	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
002024	33 00 00 00 20 00	Wait    3, Tc
002025	01 4d 98 2c 00 00	Copy    [0:309a] = [1:0016]
002026	53 00 00 00 20 00	Wait    5, Tc
002027	02 00 08 00 00 00	Cond    0x00008000

002028	b4 02 02 00 90 00	Branch  0x202b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002029	10 ac 84 00 00 00	Write   [1:0x0958] = 1		# If_84_Func_Start
00202a	d4 03 02 00 00 00	Branch  0x203d, [JMP]
00202b	53 00 00 00 20 00	Wait    5, Tc		# Else_84
00202c	01 48 98 66 12 00	Copy    [0:3090] = [1:0933]
00202d	01 49 98 2c 00 00	Copy    [0:3092] = [1:0016]
00202e	93 00 00 00 20 00	Wait    9, Tc
00202f	02 00 00 01 00 00	Cond    0x00100000

002030	d4 03 02 00 90 00	Branch  0x203d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002031	01 4c 98 64 12 00	Copy    [0:3098] = [1:0932]		# If_85_Func_Start
002032	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
002033	33 00 00 00 20 00	Wait    3, Tc
002034	01 4d 98 2a 00 00	Copy    [0:309a] = [1:0015]
002035	53 00 00 00 20 00	Wait    5, Tc
002036	02 00 08 00 00 00	Cond    0x00008000

002037	b4 03 02 00 90 00	Branch  0x203b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002038	10 ac 84 00 00 00	Write   [1:0x0958] = 1		# If_86_Func_Start
002039	06 00 00 00 00 00	Nop     		# Else_86_Func_Start
00203a	b4 03 02 00 00 00	Branch  0x203b, [JMP]
00203b	06 00 00 00 00 00	Nop     		# Else_86
00203c	d4 03 02 00 00 00	Branch  0x203d, [JMP]
00203d	06 00 00 00 00 00	Nop     		# Else_85
00203e	f4 03 02 00 00 00	Branch  0x203f, [JMP]
00203f	01 4c 98 6e 12 00	Copy    [0:3098] = [1:0937]		# Else_83
002040	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
002041	33 00 00 00 20 00	Wait    3, Tc
002042	01 4d 98 34 00 00	Copy    [0:309a] = [1:001a]
002043	53 00 00 00 20 00	Wait    5, Tc
002044	02 00 08 00 00 00	Cond    0x00008000

002045	84 04 02 00 90 00	Branch  0x2048, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002046	90 ac 84 00 00 00	Write   [1:0x0959] = 1
002047	b4 06 02 00 00 00	Branch  0x206b, [JMP]
002048	53 00 00 00 20 00	Wait    5, Tc		# Else_87
002049	01 48 98 6e 12 00	Copy    [0:3090] = [1:0937]
00204a	01 49 98 34 00 00	Copy    [0:3092] = [1:001a]
00204b	93 00 00 00 20 00	Wait    9, Tc
00204c	02 00 00 01 00 00	Cond    0x00100000

00204d	b4 06 02 00 90 00	Branch  0x206b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00204e	01 4c 98 6c 12 00	Copy    [0:3098] = [1:0936]		# If_88_Func_Start
00204f	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
002050	33 00 00 00 20 00	Wait    3, Tc
002051	01 4d 98 32 00 00	Copy    [0:309a] = [1:0019]
002052	53 00 00 00 20 00	Wait    5, Tc
002053	02 00 08 00 00 00	Cond    0x00008000

002054	74 05 02 00 90 00	Branch  0x2057, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002055	90 ac 84 00 00 00	Write   [1:0x0959] = 1		# If_89_Func_Start
002056	94 06 02 00 00 00	Branch  0x2069, [JMP]
002057	53 00 00 00 20 00	Wait    5, Tc		# Else_89
002058	01 48 98 6c 12 00	Copy    [0:3090] = [1:0936]
002059	01 49 98 32 00 00	Copy    [0:3092] = [1:0019]
00205a	93 00 00 00 20 00	Wait    9, Tc
00205b	02 00 00 01 00 00	Cond    0x00100000

00205c	94 06 02 00 90 00	Branch  0x2069, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00205d	01 4c 98 6a 12 00	Copy    [0:3098] = [1:0935]		# If_90_Func_Start
00205e	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
00205f	33 00 00 00 20 00	Wait    3, Tc
002060	01 4d 98 30 00 00	Copy    [0:309a] = [1:0018]
002061	53 00 00 00 20 00	Wait    5, Tc
002062	02 00 08 00 00 00	Cond    0x00008000

002063	74 06 02 00 90 00	Branch  0x2067, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002064	90 ac 84 00 00 00	Write   [1:0x0959] = 1		# If_91_Func_Start
002065	06 00 00 00 00 00	Nop     		# Else_91_Func_Start
002066	74 06 02 00 00 00	Branch  0x2067, [JMP]
002067	06 00 00 00 00 00	Nop     		# Else_91
002068	94 06 02 00 00 00	Branch  0x2069, [JMP]
002069	06 00 00 00 00 00	Nop     		# Else_90
00206a	b4 06 02 00 00 00	Branch  0x206b, [JMP]
00206b	01 4c 98 b0 12 00	Copy    [0:3098] = [1:0958]		# Else_88
00206c	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
00206d	33 00 00 00 20 00	Wait    3, Tc
00206e	00 4d 18 00 00 00	Write   [0:0x309a] = 0
00206f	53 00 00 00 20 00	Wait    5, Tc
002070	02 00 08 00 00 00	Cond    0x00008000

002071	c4 07 02 00 90 00	Branch  0x207c, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002072	43 00 00 00 20 00	Wait    4, Tc		# If_92_Func_Start
002073	91 0a 80 64 12 00	Copy    [1:0015] = [1:0932]
002074	93 00 00 00 20 00	Wait    9, Tc
002075	11 0b 80 66 12 00	Copy    [1:0016] = [1:0933]
002076	93 00 00 00 20 00	Wait    9, Tc
002077	91 0b 80 68 12 00	Copy    [1:0017] = [1:0934]
002078	43 00 00 00 20 00	Wait    4, Tc
002079	10 ac 04 00 00 00	Write   [1:0x0958] = 0
00207a	06 00 00 00 00 00	Nop     		# Else_92_Func_Start
00207b	c4 07 02 00 00 00	Branch  0x207c, [JMP]
00207c	01 4c 98 b2 12 00	Copy    [0:3098] = [1:0959]		# Else_92
00207d	80 4c 98 ff 7f 00	Write   [0:0x3099] = ffff
00207e	33 00 00 00 20 00	Wait    3, Tc
00207f	00 4d 18 00 00 00	Write   [0:0x309a] = 0
002080	53 00 00 00 20 00	Wait    5, Tc
002081	02 00 08 00 00 00	Cond    0x00008000

002082	d4 08 02 00 90 00	Branch  0x208d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002083	43 00 00 00 20 00	Wait    4, Tc		# If_93_Func_Start
002084	11 0c 80 6a 12 00	Copy    [1:0018] = [1:0935]
002085	93 00 00 00 20 00	Wait    9, Tc
002086	91 0c 80 6c 12 00	Copy    [1:0019] = [1:0936]
002087	93 00 00 00 20 00	Wait    9, Tc
002088	11 0d 80 6e 12 00	Copy    [1:001a] = [1:0937]
002089	43 00 00 00 20 00	Wait    4, Tc
00208a	90 ac 04 00 00 00	Write   [1:0x0959] = 0
00208b	06 00 00 00 00 00	Nop     		# Else_93_Func_Start
00208c	d4 08 02 00 00 00	Branch  0x208d, [JMP]
00208d	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_93

SaveCalibrationResult
00208e	a3 00 00 00 20 00	Wait    10, Tc
00208f	01 48 98 46 12 00	Copy    [0:3090] = [1:0923]		# If_80
002090	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002091	93 00 00 00 20 00	Wait    9, Tc
002092	02 00 00 01 00 00	Cond    0x00100000

002093	94 09 02 00 90 00	Branch  0x2099, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002094	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002095	f4 fd 01 00 20 00	Branch  0x1fdf, [CALL] < __If_80_SPURS::LO >
002096	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002097	43 00 00 00 20 00	Wait    4, Tc
002098	c4 09 02 00 00 00	Branch  0x209c, [JMP]
002099	a4 00 02 00 20 00	Branch  0x200a, [CALL] < __Else_80_SPURS::LO >		# Else_80
00209a	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00209b	43 00 00 00 20 00	Wait    4, Tc
00209c	34 01 02 00 20 00	Branch  0x2013, [CALL] < SaveCalibrationMaxMinResultFunction >		# EndIf_80
00209d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00209e	43 00 00 00 20 00	Wait    4, Tc
00209f	04 00 00 00 40 00	Branch  0x0, [RET]


__If_94
0020a0	93 00 00 00 20 00	Wait    9, Tc
0020a1	91 ad 84 54 12 00	Copy    [1:095b] = [1:092a]		# If_94_Func_Start
0020a2	93 00 00 00 20 00	Wait    9, Tc
0020a3	11 ae 84 54 12 00	Copy    [1:095c] = [1:092a]
0020a4	93 00 00 00 20 00	Wait    9, Tc
0020a5	91 ae 84 58 12 00	Copy    [1:095d] = [1:092c]
0020a6	93 00 00 00 20 00	Wait    9, Tc
0020a7	11 af 84 58 12 00	Copy    [1:095e] = [1:092c]
0020a8	93 00 00 00 20 00	Wait    9, Tc
0020a9	91 af 84 4e 12 00	Copy    [1:095f] = [1:0927]
0020aa	93 00 00 00 20 00	Wait    9, Tc
0020ab	11 b0 84 4e 12 00	Copy    [1:0960] = [1:0927]
0020ac	93 00 00 00 20 00	Wait    9, Tc
0020ad	91 b0 84 50 12 00	Copy    [1:0961] = [1:0928]
0020ae	93 00 00 00 20 00	Wait    9, Tc
0020af	11 b1 84 50 12 00	Copy    [1:0962] = [1:0928]
0020b0	43 00 00 00 20 00	Wait    4, Tc
0020b1	11 ad 84 01 00 01	Copy    [1:095a] = [SF+0], SrcBase: AI
0020b2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short)
0020b3	43 00 00 00 20 00	Wait    4, Tc
0020b4	01 70 98 c6 12 00	Copy    [0:30e0] = [1:0963]
0020b5	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
0020b6	33 00 00 00 20 00	Wait    3, Tc
0020b7	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
0020b8	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
0020b9	73 00 00 00 20 00	Wait    7, Tc
0020ba	91 b1 04 cc 61 00	Copy    [1:0963] = [0:30e6]
0020bb	04 00 00 00 40 00	Branch  0x0, [RET]


__If_95
0020bc	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_95_Func_Start
0020bd	34 0b 02 00 20 00	Branch  0x20b3, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0020be	04 00 00 00 40 00	Branch  0x0, [RET]


__If_96
0020bf	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_96_Func_Start
0020c0	34 0b 02 00 20 00	Branch  0x20b3, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0020c1	06 00 00 00 00 00	Nop     		# Else_96_Func_Start
0020c2	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_95
0020c3	a3 00 00 00 20 00	Wait    10, Tc
0020c4	01 48 98 c6 12 00	Copy    [0:3090] = [1:0963]		# Else_95_Func_Start
0020c5	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0020c6	93 00 00 00 20 00	Wait    9, Tc
0020c7	02 00 00 01 00 00	Cond    0x00100000

0020c8	d4 0c 02 00 90 00	Branch  0x20cd, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0020c9	f4 0b 02 00 20 00	Branch  0x20bf, [CALL] < __If_96 >
0020ca	00 08 98 6e 07 00	Write   [0:0x3010] = edd
0020cb	43 00 00 00 20 00	Wait    4, Tc
0020cc	d4 0c 02 00 00 00	Branch  0x20cd, [JMP]
0020cd	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_96

__If_97
0020ce	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_97_Func_Start
0020cf	34 0b 02 00 20 00	Branch  0x20b3, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0020d0	04 00 00 00 40 00	Branch  0x0, [RET]


__If_98
0020d1	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_98_Func_Start
0020d2	34 0b 02 00 20 00	Branch  0x20b3, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0020d3	06 00 00 00 00 00	Nop     		# Else_98_Func_Start
0020d4	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_97
0020d5	a3 00 00 00 20 00	Wait    10, Tc
0020d6	01 48 98 c6 12 00	Copy    [0:3090] = [1:0963]		# Else_97_Func_Start
0020d7	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0020d8	93 00 00 00 20 00	Wait    9, Tc
0020d9	02 00 00 01 00 00	Cond    0x00100000

0020da	f4 0d 02 00 90 00	Branch  0x20df, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0020db	14 0d 02 00 20 00	Branch  0x20d1, [CALL] < __If_98 >
0020dc	00 08 98 70 07 00	Write   [0:0x3010] = ee1
0020dd	43 00 00 00 20 00	Wait    4, Tc
0020de	f4 0d 02 00 00 00	Branch  0x20df, [JMP]
0020df	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_98

__If_99
0020e0	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_99_Func_Start
0020e1	34 0b 02 00 20 00	Branch  0x20b3, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0020e2	04 00 00 00 40 00	Branch  0x0, [RET]


__If_100
0020e3	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_100_Func_Start
0020e4	34 0b 02 00 20 00	Branch  0x20b3, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0020e5	06 00 00 00 00 00	Nop     		# Else_100_Func_Start
0020e6	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_99
0020e7	a3 00 00 00 20 00	Wait    10, Tc
0020e8	01 48 98 c6 12 00	Copy    [0:3090] = [1:0963]		# Else_99_Func_Start
0020e9	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0020ea	93 00 00 00 20 00	Wait    9, Tc
0020eb	02 00 00 01 00 00	Cond    0x00100000

0020ec	14 0f 02 00 90 00	Branch  0x20f1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0020ed	34 0e 02 00 20 00	Branch  0x20e3, [CALL] < __If_100 >
0020ee	00 08 18 71 07 00	Write   [0:0x3010] = ee2
0020ef	43 00 00 00 20 00	Wait    4, Tc
0020f0	14 0f 02 00 00 00	Branch  0x20f1, [JMP]
0020f1	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_100

__If_101
0020f2	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_101_Func_Start
0020f3	34 0b 02 00 20 00	Branch  0x20b3, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0020f4	04 00 00 00 40 00	Branch  0x0, [RET]


__If_102
0020f5	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_102_Func_Start
0020f6	34 0b 02 00 20 00	Branch  0x20b3, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0020f7	06 00 00 00 00 00	Nop     		# Else_102_Func_Start
0020f8	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_101
0020f9	a3 00 00 00 20 00	Wait    10, Tc
0020fa	01 48 98 c6 12 00	Copy    [0:3090] = [1:0963]		# Else_101_Func_Start
0020fb	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0020fc	93 00 00 00 20 00	Wait    9, Tc
0020fd	02 00 00 01 00 00	Cond    0x00100000

0020fe	34 10 02 00 90 00	Branch  0x2103, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0020ff	54 0f 02 00 20 00	Branch  0x20f5, [CALL] < __If_102 >
002100	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002101	43 00 00 00 20 00	Wait    4, Tc
002102	34 10 02 00 00 00	Branch  0x2103, [JMP]
002103	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_102

SetMask
002104	93 00 00 00 20 00	Wait    9, Tc
002105	91 b1 84 54 12 00	Copy    [1:0963] = [1:092a]
002106	43 00 00 00 20 00	Wait    4, Tc
002107	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_95
002108	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002109	73 00 00 00 20 00	Wait    7, Tc
00210a	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
00210b	53 00 00 00 20 00	Wait    5, Tc
00210c	02 00 08 00 00 00	Cond    0x00008000

00210d	24 11 02 00 90 00	Branch  0x2112, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00210e	c4 0b 02 00 20 00	Branch  0x20bc, [CALL] < __If_95 >
00210f	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002110	43 00 00 00 20 00	Wait    4, Tc
002111	64 11 02 00 00 00	Branch  0x2116, [JMP]
002112	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_95
002113	34 0c 02 00 20 00	Branch  0x20c3, [CALL] < __Else_95 >
002114	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002115	43 00 00 00 20 00	Wait    4, Tc
002116	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# EndIf_95
002117	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
002118	73 00 00 00 20 00	Wait    7, Tc
002119	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
00211a	53 00 00 00 20 00	Wait    5, Tc
00211b	02 00 08 00 00 00	Cond    0x00008000

00211c	14 12 02 00 90 00	Branch  0x2121, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00211d	e4 0c 02 00 20 00	Branch  0x20ce, [CALL] < __If_97 >
00211e	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
00211f	43 00 00 00 20 00	Wait    4, Tc
002120	54 12 02 00 00 00	Branch  0x2125, [JMP]
002121	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_97
002122	54 0d 02 00 20 00	Branch  0x20d5, [CALL] < __Else_97 >
002123	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002124	43 00 00 00 20 00	Wait    4, Tc
002125	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# EndIf_97
002126	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
002127	73 00 00 00 20 00	Wait    7, Tc
002128	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
002129	53 00 00 00 20 00	Wait    5, Tc
00212a	02 00 08 00 00 00	Cond    0x00008000

00212b	04 13 02 00 90 00	Branch  0x2130, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00212c	04 0e 02 00 20 00	Branch  0x20e0, [CALL] < __If_99 >
00212d	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
00212e	43 00 00 00 20 00	Wait    4, Tc
00212f	44 13 02 00 00 00	Branch  0x2134, [JMP]
002130	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_99
002131	74 0e 02 00 20 00	Branch  0x20e7, [CALL] < __Else_99 >
002132	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002133	43 00 00 00 20 00	Wait    4, Tc
002134	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# EndIf_99
002135	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
002136	73 00 00 00 20 00	Wait    7, Tc
002137	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
002138	53 00 00 00 20 00	Wait    5, Tc
002139	02 00 08 00 00 00	Cond    0x00008000

00213a	f4 13 02 00 90 00	Branch  0x213f, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00213b	24 0f 02 00 20 00	Branch  0x20f2, [CALL] < __If_101 >
00213c	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
00213d	43 00 00 00 20 00	Wait    4, Tc
00213e	34 14 02 00 00 00	Branch  0x2143, [JMP]
00213f	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_101
002140	94 0f 02 00 20 00	Branch  0x20f9, [CALL] < __Else_101 >
002141	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002142	43 00 00 00 20 00	Wait    4, Tc
002143	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_101

class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short)
002144	43 00 00 00 20 00	Wait    4, Tc
002145	01 70 98 c8 12 00	Copy    [0:30e0] = [1:0964]
002146	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
002147	33 00 00 00 20 00	Wait    3, Tc
002148	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
002149	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
00214a	73 00 00 00 20 00	Wait    7, Tc
00214b	11 b2 04 cc 61 00	Copy    [1:0964] = [0:30e6]
00214c	04 00 00 00 40 00	Branch  0x0, [RET]


__If_103
00214d	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_103_Func_Start
00214e	44 14 02 00 20 00	Branch  0x2144, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
00214f	04 00 00 00 40 00	Branch  0x0, [RET]


__If_104
002150	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_104_Func_Start
002151	44 14 02 00 20 00	Branch  0x2144, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002152	06 00 00 00 00 00	Nop     		# Else_104_Func_Start
002153	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_103
002154	a3 00 00 00 20 00	Wait    10, Tc
002155	01 48 98 c8 12 00	Copy    [0:3090] = [1:0964]		# Else_103_Func_Start
002156	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002157	93 00 00 00 20 00	Wait    9, Tc
002158	02 00 00 01 00 00	Cond    0x00100000

002159	e4 15 02 00 90 00	Branch  0x215e, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00215a	04 15 02 00 20 00	Branch  0x2150, [CALL] < __If_104 >
00215b	00 08 98 6e 07 00	Write   [0:0x3010] = edd
00215c	43 00 00 00 20 00	Wait    4, Tc
00215d	e4 15 02 00 00 00	Branch  0x215e, [JMP]
00215e	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_104

__If_105
00215f	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_105_Func_Start
002160	44 14 02 00 20 00	Branch  0x2144, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002161	04 00 00 00 40 00	Branch  0x0, [RET]


__If_106
002162	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_106_Func_Start
002163	44 14 02 00 20 00	Branch  0x2144, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002164	06 00 00 00 00 00	Nop     		# Else_106_Func_Start
002165	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_105
002166	a3 00 00 00 20 00	Wait    10, Tc
002167	01 48 98 c8 12 00	Copy    [0:3090] = [1:0964]		# Else_105_Func_Start
002168	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002169	93 00 00 00 20 00	Wait    9, Tc
00216a	02 00 00 01 00 00	Cond    0x00100000

00216b	04 17 02 00 90 00	Branch  0x2170, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00216c	24 16 02 00 20 00	Branch  0x2162, [CALL] < __If_106 >
00216d	00 08 98 70 07 00	Write   [0:0x3010] = ee1
00216e	43 00 00 00 20 00	Wait    4, Tc
00216f	04 17 02 00 00 00	Branch  0x2170, [JMP]
002170	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_106

__If_107
002171	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_107_Func_Start
002172	44 14 02 00 20 00	Branch  0x2144, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002173	04 00 00 00 40 00	Branch  0x0, [RET]


__If_108
002174	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_108_Func_Start
002175	44 14 02 00 20 00	Branch  0x2144, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002176	06 00 00 00 00 00	Nop     		# Else_108_Func_Start
002177	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_107
002178	a3 00 00 00 20 00	Wait    10, Tc
002179	01 48 98 c8 12 00	Copy    [0:3090] = [1:0964]		# Else_107_Func_Start
00217a	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
00217b	93 00 00 00 20 00	Wait    9, Tc
00217c	02 00 00 01 00 00	Cond    0x00100000

00217d	24 18 02 00 90 00	Branch  0x2182, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00217e	44 17 02 00 20 00	Branch  0x2174, [CALL] < __If_108 >
00217f	00 08 18 71 07 00	Write   [0:0x3010] = ee2
002180	43 00 00 00 20 00	Wait    4, Tc
002181	24 18 02 00 00 00	Branch  0x2182, [JMP]
002182	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_108

__If_109
002183	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_109_Func_Start
002184	44 14 02 00 20 00	Branch  0x2144, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002185	04 00 00 00 40 00	Branch  0x0, [RET]


__If_110
002186	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_110_Func_Start
002187	44 14 02 00 20 00	Branch  0x2144, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002188	06 00 00 00 00 00	Nop     		# Else_110_Func_Start
002189	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_109
00218a	a3 00 00 00 20 00	Wait    10, Tc
00218b	01 48 98 c8 12 00	Copy    [0:3090] = [1:0964]		# Else_109_Func_Start
00218c	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
00218d	93 00 00 00 20 00	Wait    9, Tc
00218e	02 00 00 01 00 00	Cond    0x00100000

00218f	44 19 02 00 90 00	Branch  0x2194, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002190	64 18 02 00 20 00	Branch  0x2186, [CALL] < __If_110 >
002191	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002192	43 00 00 00 20 00	Wait    4, Tc
002193	44 19 02 00 00 00	Branch  0x2194, [JMP]
002194	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_110

SetMask
002195	93 00 00 00 20 00	Wait    9, Tc
002196	11 b2 84 b6 12 00	Copy    [1:0964] = [1:095b]
002197	43 00 00 00 20 00	Wait    4, Tc
002198	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_103
002199	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00219a	73 00 00 00 20 00	Wait    7, Tc
00219b	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
00219c	53 00 00 00 20 00	Wait    5, Tc
00219d	02 00 08 00 00 00	Cond    0x00008000

00219e	34 1a 02 00 90 00	Branch  0x21a3, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00219f	d4 14 02 00 20 00	Branch  0x214d, [CALL] < __If_103 >
0021a0	00 08 98 69 07 00	Write   [0:0x3010] = ed3
0021a1	43 00 00 00 20 00	Wait    4, Tc
0021a2	74 1a 02 00 00 00	Branch  0x21a7, [JMP]
0021a3	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_103
0021a4	44 15 02 00 20 00	Branch  0x2154, [CALL] < __Else_103 >
0021a5	00 08 98 69 07 00	Write   [0:0x3010] = ed3
0021a6	43 00 00 00 20 00	Wait    4, Tc
0021a7	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# EndIf_103
0021a8	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
0021a9	73 00 00 00 20 00	Wait    7, Tc
0021aa	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
0021ab	53 00 00 00 20 00	Wait    5, Tc
0021ac	02 00 08 00 00 00	Cond    0x00008000

0021ad	24 1b 02 00 90 00	Branch  0x21b2, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0021ae	f4 15 02 00 20 00	Branch  0x215f, [CALL] < __If_105 >
0021af	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0021b0	43 00 00 00 20 00	Wait    4, Tc
0021b1	64 1b 02 00 00 00	Branch  0x21b6, [JMP]
0021b2	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_105
0021b3	64 16 02 00 20 00	Branch  0x2166, [CALL] < __Else_105 >
0021b4	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0021b5	43 00 00 00 20 00	Wait    4, Tc
0021b6	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# EndIf_105
0021b7	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
0021b8	73 00 00 00 20 00	Wait    7, Tc
0021b9	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
0021ba	53 00 00 00 20 00	Wait    5, Tc
0021bb	02 00 08 00 00 00	Cond    0x00008000

0021bc	14 1c 02 00 90 00	Branch  0x21c1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0021bd	14 17 02 00 20 00	Branch  0x2171, [CALL] < __If_107 >
0021be	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0021bf	43 00 00 00 20 00	Wait    4, Tc
0021c0	54 1c 02 00 00 00	Branch  0x21c5, [JMP]
0021c1	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_107
0021c2	84 17 02 00 20 00	Branch  0x2178, [CALL] < __Else_107 >
0021c3	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0021c4	43 00 00 00 20 00	Wait    4, Tc
0021c5	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# EndIf_107
0021c6	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
0021c7	73 00 00 00 20 00	Wait    7, Tc
0021c8	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
0021c9	53 00 00 00 20 00	Wait    5, Tc
0021ca	02 00 08 00 00 00	Cond    0x00008000

0021cb	04 1d 02 00 90 00	Branch  0x21d0, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0021cc	34 18 02 00 20 00	Branch  0x2183, [CALL] < __If_109 >
0021cd	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
0021ce	43 00 00 00 20 00	Wait    4, Tc
0021cf	44 1d 02 00 00 00	Branch  0x21d4, [JMP]
0021d0	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_109
0021d1	a4 18 02 00 20 00	Branch  0x218a, [CALL] < __Else_109 >
0021d2	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
0021d3	43 00 00 00 20 00	Wait    4, Tc
0021d4	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_109

class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short)
0021d5	43 00 00 00 20 00	Wait    4, Tc
0021d6	01 70 98 ca 12 00	Copy    [0:30e0] = [1:0965]
0021d7	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
0021d8	33 00 00 00 20 00	Wait    3, Tc
0021d9	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
0021da	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
0021db	73 00 00 00 20 00	Wait    7, Tc
0021dc	91 b2 04 cc 61 00	Copy    [1:0965] = [0:30e6]
0021dd	04 00 00 00 40 00	Branch  0x0, [RET]


__If_111
0021de	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_111_Func_Start
0021df	54 1d 02 00 20 00	Branch  0x21d5, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0021e0	04 00 00 00 40 00	Branch  0x0, [RET]


__If_112
0021e1	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_112_Func_Start
0021e2	54 1d 02 00 20 00	Branch  0x21d5, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0021e3	06 00 00 00 00 00	Nop     		# Else_112_Func_Start
0021e4	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_111
0021e5	a3 00 00 00 20 00	Wait    10, Tc
0021e6	01 48 98 ca 12 00	Copy    [0:3090] = [1:0965]		# Else_111_Func_Start
0021e7	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0021e8	93 00 00 00 20 00	Wait    9, Tc
0021e9	02 00 00 01 00 00	Cond    0x00100000

0021ea	f4 1e 02 00 90 00	Branch  0x21ef, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0021eb	14 1e 02 00 20 00	Branch  0x21e1, [CALL] < __If_112 >
0021ec	00 08 98 6e 07 00	Write   [0:0x3010] = edd
0021ed	43 00 00 00 20 00	Wait    4, Tc
0021ee	f4 1e 02 00 00 00	Branch  0x21ef, [JMP]
0021ef	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_112

__If_113
0021f0	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_113_Func_Start
0021f1	54 1d 02 00 20 00	Branch  0x21d5, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0021f2	04 00 00 00 40 00	Branch  0x0, [RET]


__If_114
0021f3	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_114_Func_Start
0021f4	54 1d 02 00 20 00	Branch  0x21d5, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0021f5	06 00 00 00 00 00	Nop     		# Else_114_Func_Start
0021f6	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_113
0021f7	a3 00 00 00 20 00	Wait    10, Tc
0021f8	01 48 98 ca 12 00	Copy    [0:3090] = [1:0965]		# Else_113_Func_Start
0021f9	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0021fa	93 00 00 00 20 00	Wait    9, Tc
0021fb	02 00 00 01 00 00	Cond    0x00100000

0021fc	14 20 02 00 90 00	Branch  0x2201, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0021fd	34 1f 02 00 20 00	Branch  0x21f3, [CALL] < __If_114 >
0021fe	00 08 98 70 07 00	Write   [0:0x3010] = ee1
0021ff	43 00 00 00 20 00	Wait    4, Tc
002200	14 20 02 00 00 00	Branch  0x2201, [JMP]
002201	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_114

__If_115
002202	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_115_Func_Start
002203	54 1d 02 00 20 00	Branch  0x21d5, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002204	04 00 00 00 40 00	Branch  0x0, [RET]


__If_116
002205	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_116_Func_Start
002206	54 1d 02 00 20 00	Branch  0x21d5, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002207	06 00 00 00 00 00	Nop     		# Else_116_Func_Start
002208	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_115
002209	a3 00 00 00 20 00	Wait    10, Tc
00220a	01 48 98 ca 12 00	Copy    [0:3090] = [1:0965]		# Else_115_Func_Start
00220b	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
00220c	93 00 00 00 20 00	Wait    9, Tc
00220d	02 00 00 01 00 00	Cond    0x00100000

00220e	34 21 02 00 90 00	Branch  0x2213, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00220f	54 20 02 00 20 00	Branch  0x2205, [CALL] < __If_116 >
002210	00 08 18 71 07 00	Write   [0:0x3010] = ee2
002211	43 00 00 00 20 00	Wait    4, Tc
002212	34 21 02 00 00 00	Branch  0x2213, [JMP]
002213	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_116

__If_117
002214	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_117_Func_Start
002215	54 1d 02 00 20 00	Branch  0x21d5, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002216	04 00 00 00 40 00	Branch  0x0, [RET]


__If_118
002217	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_118_Func_Start
002218	54 1d 02 00 20 00	Branch  0x21d5, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002219	06 00 00 00 00 00	Nop     		# Else_118_Func_Start
00221a	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_117
00221b	a3 00 00 00 20 00	Wait    10, Tc
00221c	01 48 98 ca 12 00	Copy    [0:3090] = [1:0965]		# Else_117_Func_Start
00221d	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
00221e	93 00 00 00 20 00	Wait    9, Tc
00221f	02 00 00 01 00 00	Cond    0x00100000

002220	54 22 02 00 90 00	Branch  0x2225, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002221	74 21 02 00 20 00	Branch  0x2217, [CALL] < __If_118 >
002222	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002223	43 00 00 00 20 00	Wait    4, Tc
002224	54 22 02 00 00 00	Branch  0x2225, [JMP]
002225	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_118

SetMask
002226	93 00 00 00 20 00	Wait    9, Tc
002227	91 b2 84 b8 12 00	Copy    [1:0965] = [1:095c]
002228	43 00 00 00 20 00	Wait    4, Tc
002229	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# If_111
00222a	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00222b	73 00 00 00 20 00	Wait    7, Tc
00222c	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
00222d	53 00 00 00 20 00	Wait    5, Tc
00222e	02 00 08 00 00 00	Cond    0x00008000

00222f	44 23 02 00 90 00	Branch  0x2234, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002230	e4 1d 02 00 20 00	Branch  0x21de, [CALL] < __If_111 >
002231	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002232	43 00 00 00 20 00	Wait    4, Tc
002233	84 23 02 00 00 00	Branch  0x2238, [JMP]
002234	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_111
002235	54 1e 02 00 20 00	Branch  0x21e5, [CALL] < __Else_111 >
002236	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002237	43 00 00 00 20 00	Wait    4, Tc
002238	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# EndIf_111
002239	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
00223a	73 00 00 00 20 00	Wait    7, Tc
00223b	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
00223c	53 00 00 00 20 00	Wait    5, Tc
00223d	02 00 08 00 00 00	Cond    0x00008000

00223e	34 24 02 00 90 00	Branch  0x2243, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00223f	04 1f 02 00 20 00	Branch  0x21f0, [CALL] < __If_113 >
002240	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002241	43 00 00 00 20 00	Wait    4, Tc
002242	74 24 02 00 00 00	Branch  0x2247, [JMP]
002243	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_113
002244	74 1f 02 00 20 00	Branch  0x21f7, [CALL] < __Else_113 >
002245	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002246	43 00 00 00 20 00	Wait    4, Tc
002247	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# EndIf_113
002248	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
002249	73 00 00 00 20 00	Wait    7, Tc
00224a	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
00224b	53 00 00 00 20 00	Wait    5, Tc
00224c	02 00 08 00 00 00	Cond    0x00008000

00224d	24 25 02 00 90 00	Branch  0x2252, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00224e	24 20 02 00 20 00	Branch  0x2202, [CALL] < __If_115 >
00224f	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002250	43 00 00 00 20 00	Wait    4, Tc
002251	64 25 02 00 00 00	Branch  0x2256, [JMP]
002252	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_115
002253	94 20 02 00 20 00	Branch  0x2209, [CALL] < __Else_115 >
002254	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002255	43 00 00 00 20 00	Wait    4, Tc
002256	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# EndIf_115
002257	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
002258	73 00 00 00 20 00	Wait    7, Tc
002259	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
00225a	53 00 00 00 20 00	Wait    5, Tc
00225b	02 00 08 00 00 00	Cond    0x00008000

00225c	14 26 02 00 90 00	Branch  0x2261, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00225d	44 21 02 00 20 00	Branch  0x2214, [CALL] < __If_117 >
00225e	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
00225f	43 00 00 00 20 00	Wait    4, Tc
002260	54 26 02 00 00 00	Branch  0x2265, [JMP]
002261	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_117
002262	b4 21 02 00 20 00	Branch  0x221b, [CALL] < __Else_117 >
002263	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002264	43 00 00 00 20 00	Wait    4, Tc
002265	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_117

__If_119
002266	43 00 00 00 20 00	Wait    4, Tc
002267	11 b3 84 01 00 01	Copy    [1:0966] = [SF+0], SrcBase: AI		# If_119_Func_Start
002268	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_119
002269	43 00 00 00 20 00	Wait    4, Tc
00226a	11 b3 84 01 00 01	Copy    [1:0966] = [SF+0], SrcBase: AI		# Else_119_Func_Start
00226b	04 00 00 00 40 00	Branch  0x0, [RET]


IsParamNeg
00226c	43 00 00 00 20 00	Wait    4, Tc
00226d	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]
00226e	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00226f	73 00 00 00 20 00	Wait    7, Tc
002270	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002271	53 00 00 00 20 00	Wait    5, Tc
002272	02 00 08 00 00 00	Cond    0x00008000

002273	d4 4a 02 00 90 00	Branch  0x24ad, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002274	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002275	64 26 02 00 20 00	Branch  0x2266, [CALL] < __If_119 >
002276	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002277	43 00 00 00 20 00	Wait    4, Tc
002278	14 4b 02 00 00 00	Branch  0x24b1, [JMP]
002279	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00227a	94 26 02 00 20 00	Branch  0x2269, [CALL] < __Else_119 >
00227b	00 08 18 74 07 00	Write   [0:0x3010] = ee8
00227c	43 00 00 00 20 00	Wait    4, Tc
00227d	04 00 00 00 40 00	Branch  0x0, [RET]


__If_120
00227e	43 00 00 00 20 00	Wait    4, Tc
00227f	91 b3 84 01 00 01	Copy    [1:0967] = [SF+0], SrcBase: AI		# If_120_Func_Start
002280	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_120
002281	43 00 00 00 20 00	Wait    4, Tc
002282	91 b3 84 01 00 01	Copy    [1:0967] = [SF+0], SrcBase: AI		# Else_120_Func_Start
002283	04 00 00 00 40 00	Branch  0x0, [RET]


IsParamNeg
002284	43 00 00 00 20 00	Wait    4, Tc
002285	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]
002286	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002287	73 00 00 00 20 00	Wait    7, Tc
002288	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002289	53 00 00 00 20 00	Wait    5, Tc
00228a	02 00 08 00 00 00	Cond    0x00008000

00228b	f4 4b 02 00 90 00	Branch  0x24bf, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00228c	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00228d	e4 27 02 00 20 00	Branch  0x227e, [CALL] < __If_120 >
00228e	00 08 18 74 07 00	Write   [0:0x3010] = ee8
00228f	43 00 00 00 20 00	Wait    4, Tc
002290	34 4c 02 00 00 00	Branch  0x24c3, [JMP]
002291	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002292	14 28 02 00 20 00	Branch  0x2281, [CALL] < __Else_120 >
002293	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002294	43 00 00 00 20 00	Wait    4, Tc
002295	04 00 00 00 40 00	Branch  0x0, [RET]


__If_121
002296	43 00 00 00 20 00	Wait    4, Tc
002297	11 b4 84 01 00 01	Copy    [1:0968] = [SF+0], SrcBase: AI		# If_121_Func_Start
002298	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_121
002299	43 00 00 00 20 00	Wait    4, Tc
00229a	11 b4 84 01 00 01	Copy    [1:0968] = [SF+0], SrcBase: AI		# Else_121_Func_Start
00229b	04 00 00 00 40 00	Branch  0x0, [RET]


IsParamNeg
00229c	43 00 00 00 20 00	Wait    4, Tc
00229d	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]
00229e	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00229f	73 00 00 00 20 00	Wait    7, Tc
0022a0	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0022a1	53 00 00 00 20 00	Wait    5, Tc
0022a2	02 00 08 00 00 00	Cond    0x00008000

0022a3	14 4d 02 00 90 00	Branch  0x24d1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0022a4	00 08 98 3b 05 00	Write   [0:0x3010] = a77
0022a5	64 29 02 00 20 00	Branch  0x2296, [CALL] < __If_121 >
0022a6	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0022a7	43 00 00 00 20 00	Wait    4, Tc
0022a8	54 4d 02 00 00 00	Branch  0x24d5, [JMP]
0022a9	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0022aa	94 29 02 00 20 00	Branch  0x2299, [CALL] < __Else_121 >
0022ab	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0022ac	43 00 00 00 20 00	Wait    4, Tc
0022ad	04 00 00 00 40 00	Branch  0x0, [RET]


__If_124
0022ae	43 00 00 00 20 00	Wait    4, Tc		# If_124_Func_Start
0022af	91 ad 84 54 12 00	Copy    [1:095b] = [1:092a]
0022b0	43 00 00 00 20 00	Wait    4, Tc
0022b1	06 00 00 00 00 00	Nop     		# Else_124_Func_Start
0022b2	04 00 00 00 40 00	Branch  0x0, [RET]


__If_123
0022b3	43 00 00 00 20 00	Wait    4, Tc
0022b4	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_123_Func_Start
0022b5	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0022b6	73 00 00 00 20 00	Wait    7, Tc
0022b7	01 4d 98 c6 12 00	Copy    [0:309a] = [1:0963]
0022b8	53 00 00 00 20 00	Wait    5, Tc
0022b9	02 00 08 00 00 00	Cond    0x00008000

0022ba	f4 2b 02 00 90 00	Branch  0x22bf, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0022bb	e4 2a 02 00 20 00	Branch  0x22ae, [CALL] < __If_124 >
0022bc	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0022bd	43 00 00 00 20 00	Wait    4, Tc
0022be	f4 2b 02 00 00 00	Branch  0x22bf, [JMP]
0022bf	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_124

__Else_123
0022c0	43 00 00 00 20 00	Wait    4, Tc		# Else_123_Func_Start
0022c1	91 ad 84 54 12 00	Copy    [1:095b] = [1:092a]
0022c2	43 00 00 00 20 00	Wait    4, Tc
0022c3	04 00 00 00 40 00	Branch  0x0, [RET]


__If_126
0022c4	43 00 00 00 20 00	Wait    4, Tc		# If_126_Func_Start
0022c5	11 ae 84 54 12 00	Copy    [1:095c] = [1:092a]
0022c6	43 00 00 00 20 00	Wait    4, Tc
0022c7	06 00 00 00 00 00	Nop     		# Else_126_Func_Start
0022c8	04 00 00 00 40 00	Branch  0x0, [RET]


__If_125
0022c9	43 00 00 00 20 00	Wait    4, Tc
0022ca	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_125_Func_Start
0022cb	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0022cc	73 00 00 00 20 00	Wait    7, Tc
0022cd	01 4d 98 ca 12 00	Copy    [0:309a] = [1:0965]
0022ce	53 00 00 00 20 00	Wait    5, Tc
0022cf	02 00 08 00 00 00	Cond    0x00008000

0022d0	54 2d 02 00 90 00	Branch  0x22d5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0022d1	44 2c 02 00 20 00	Branch  0x22c4, [CALL] < __If_126 >
0022d2	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0022d3	43 00 00 00 20 00	Wait    4, Tc
0022d4	54 2d 02 00 00 00	Branch  0x22d5, [JMP]
0022d5	06 00 00 00 00 00	Nop     		# Else_126
0022d6	04 00 00 00 40 00	Branch  0x0, [RET]


__If_122
0022d7	a3 00 00 00 20 00	Wait    10, Tc
0022d8	01 48 98 ce 12 00	Copy    [0:3090] = [1:0967]		# If_122_Func_Start
0022d9	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0022da	93 00 00 00 20 00	Wait    9, Tc
0022db	02 00 00 01 00 00	Cond    0x00100000

0022dc	24 2e 02 00 90 00	Branch  0x22e2, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0022dd	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0022de	34 2b 02 00 20 00	Branch  0x22b3, [CALL] < __If_123 >
0022df	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
0022e0	43 00 00 00 20 00	Wait    4, Tc
0022e1	54 2e 02 00 00 00	Branch  0x22e5, [JMP]
0022e2	04 2c 02 00 20 00	Branch  0x22c0, [CALL] < __Else_123 >		# Else_123
0022e3	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
0022e4	a3 00 00 00 20 00	Wait    10, Tc
0022e5	01 48 98 d0 12 00	Copy    [0:3090] = [1:0968]		# EndIf_123
0022e6	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
0022e7	93 00 00 00 20 00	Wait    9, Tc
0022e8	02 00 00 01 00 00	Cond    0x00100000

0022e9	f4 2e 02 00 90 00	Branch  0x22ef, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0022ea	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0022eb	94 2c 02 00 20 00	Branch  0x22c9, [CALL] < __If_125 >
0022ec	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
0022ed	43 00 00 00 20 00	Wait    4, Tc
0022ee	f4 2e 02 00 00 00	Branch  0x22ef, [JMP]
0022ef	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_125

__If_127
0022f0	43 00 00 00 20 00	Wait    4, Tc
0022f1	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_127_Func_Start
0022f2	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0022f3	73 00 00 00 20 00	Wait    7, Tc
0022f4	01 4d 98 c6 12 00	Copy    [0:309a] = [1:0963]
0022f5	53 00 00 00 20 00	Wait    5, Tc
0022f6	02 00 08 00 00 00	Cond    0x00008000

0022f7	c4 2f 02 00 90 00	Branch  0x22fc, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0022f8	e4 2a 02 00 20 00	Branch  0x22ae, [CALL] < __If_124 >
0022f9	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0022fa	43 00 00 00 20 00	Wait    4, Tc
0022fb	c4 2f 02 00 00 00	Branch  0x22fc, [JMP]
0022fc	06 00 00 00 00 00	Nop     		# Else_128
0022fd	04 00 00 00 40 00	Branch  0x0, [RET]


__If_129
0022fe	43 00 00 00 20 00	Wait    4, Tc
0022ff	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_129_Func_Start
002300	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002301	73 00 00 00 20 00	Wait    7, Tc
002302	01 4d 98 ca 12 00	Copy    [0:309a] = [1:0965]
002303	53 00 00 00 20 00	Wait    5, Tc
002304	02 00 08 00 00 00	Cond    0x00008000

002305	a4 30 02 00 90 00	Branch  0x230a, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002306	44 2c 02 00 20 00	Branch  0x22c4, [CALL] < __If_126 >
002307	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002308	43 00 00 00 20 00	Wait    4, Tc
002309	a4 30 02 00 00 00	Branch  0x230a, [JMP]
00230a	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_130

__Else_129
00230b	43 00 00 00 20 00	Wait    4, Tc		# Else_129_Func_Start
00230c	11 ae 84 54 12 00	Copy    [1:095c] = [1:092a]
00230d	43 00 00 00 20 00	Wait    4, Tc
00230e	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_122
00230f	a3 00 00 00 20 00	Wait    10, Tc
002310	01 48 98 ce 12 00	Copy    [0:3090] = [1:0967]		# Else_122_Func_Start
002311	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002312	93 00 00 00 20 00	Wait    9, Tc
002313	02 00 00 01 00 00	Cond    0x00100000

002314	a4 31 02 00 90 00	Branch  0x231a, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002315	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002316	04 2f 02 00 20 00	Branch  0x22f0, [CALL] < __If_127 >
002317	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
002318	43 00 00 00 20 00	Wait    4, Tc
002319	a4 31 02 00 00 00	Branch  0x231a, [JMP]
00231a	53 00 00 00 20 00	Wait    5, Tc		# Else_127
00231b	01 48 98 d0 12 00	Copy    [0:3090] = [1:0968]
00231c	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
00231d	93 00 00 00 20 00	Wait    9, Tc
00231e	02 00 00 01 00 00	Cond    0x00100000

00231f	54 32 02 00 90 00	Branch  0x2325, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002320	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002321	e4 2f 02 00 20 00	Branch  0x22fe, [CALL] < __If_129 >
002322	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
002323	43 00 00 00 20 00	Wait    4, Tc
002324	84 32 02 00 00 00	Branch  0x2328, [JMP]
002325	b4 30 02 00 20 00	Branch  0x230b, [CALL] < __Else_129 >		# Else_129
002326	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
002327	43 00 00 00 20 00	Wait    4, Tc
002328	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_129

UpdateQuantMinMax
002329	43 00 00 00 20 00	Wait    4, Tc
00232a	00 08 98 68 07 00	Write   [0:0x3010] = ed1
00232b	44 10 02 00 20 00	Branch  0x2104, [CALL] < SetMask >
00232c	00 08 98 68 07 00	Write   [0:0x3010] = ed1
00232d	54 19 02 00 20 00	Branch  0x2195, [CALL] < SetMask >
00232e	00 08 98 68 07 00	Write   [0:0x3010] = ed1
00232f	64 22 02 00 20 00	Branch  0x2226, [CALL] < SetMask >
002330	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002331	c4 26 02 00 20 00	Branch  0x226c, [CALL] < IsParamNeg >
002332	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002333	44 28 02 00 20 00	Branch  0x2284, [CALL] < IsParamNeg >
002334	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002335	c4 29 02 00 20 00	Branch  0x229c, [CALL] < IsParamNeg >
002336	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002337	a3 00 00 00 20 00	Wait    10, Tc
002338	01 48 98 cc 12 00	Copy    [0:3090] = [1:0966]		# If_122
002339	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
00233a	93 00 00 00 20 00	Wait    9, Tc
00233b	02 00 00 01 00 00	Cond    0x00100000

00233c	24 34 02 00 90 00	Branch  0x2342, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00233d	00 08 18 ed 04 00	Write   [0:0x3010] = 9da
00233e	74 2d 02 00 20 00	Branch  0x22d7, [CALL] < __If_122 >
00233f	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002340	43 00 00 00 20 00	Wait    4, Tc
002341	64 34 02 00 00 00	Branch  0x2346, [JMP]
002342	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0		# Else_122
002343	f4 30 02 00 20 00	Branch  0x230f, [CALL] < __Else_122 >
002344	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002345	43 00 00 00 20 00	Wait    4, Tc
002346	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_122

SetMask
002347	93 00 00 00 20 00	Wait    9, Tc
002348	91 b1 84 58 12 00	Copy    [1:0963] = [1:092c]
002349	43 00 00 00 20 00	Wait    4, Tc
00234a	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_131
00234b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00234c	73 00 00 00 20 00	Wait    7, Tc
00234d	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
00234e	53 00 00 00 20 00	Wait    5, Tc
00234f	02 00 08 00 00 00	Cond    0x00008000

002350	54 35 02 00 90 00	Branch  0x2355, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002351	c4 0b 02 00 20 00	Branch  0x20bc, [CALL] < __If_95 >
002352	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002353	43 00 00 00 20 00	Wait    4, Tc
002354	94 35 02 00 00 00	Branch  0x2359, [JMP]
002355	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_131
002356	34 0c 02 00 20 00	Branch  0x20c3, [CALL] < __Else_95 >
002357	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002358	43 00 00 00 20 00	Wait    4, Tc
002359	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# EndIf_131
00235a	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
00235b	73 00 00 00 20 00	Wait    7, Tc
00235c	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
00235d	53 00 00 00 20 00	Wait    5, Tc
00235e	02 00 08 00 00 00	Cond    0x00008000

00235f	44 36 02 00 90 00	Branch  0x2364, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002360	e4 0c 02 00 20 00	Branch  0x20ce, [CALL] < __If_97 >
002361	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002362	43 00 00 00 20 00	Wait    4, Tc
002363	84 36 02 00 00 00	Branch  0x2368, [JMP]
002364	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_133
002365	54 0d 02 00 20 00	Branch  0x20d5, [CALL] < __Else_97 >
002366	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002367	43 00 00 00 20 00	Wait    4, Tc
002368	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# EndIf_133
002369	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
00236a	73 00 00 00 20 00	Wait    7, Tc
00236b	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
00236c	53 00 00 00 20 00	Wait    5, Tc
00236d	02 00 08 00 00 00	Cond    0x00008000

00236e	34 37 02 00 90 00	Branch  0x2373, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00236f	04 0e 02 00 20 00	Branch  0x20e0, [CALL] < __If_99 >
002370	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002371	43 00 00 00 20 00	Wait    4, Tc
002372	74 37 02 00 00 00	Branch  0x2377, [JMP]
002373	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_135
002374	74 0e 02 00 20 00	Branch  0x20e7, [CALL] < __Else_99 >
002375	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002376	43 00 00 00 20 00	Wait    4, Tc
002377	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# EndIf_135
002378	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
002379	73 00 00 00 20 00	Wait    7, Tc
00237a	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
00237b	53 00 00 00 20 00	Wait    5, Tc
00237c	02 00 08 00 00 00	Cond    0x00008000

00237d	24 38 02 00 90 00	Branch  0x2382, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00237e	24 0f 02 00 20 00	Branch  0x20f2, [CALL] < __If_101 >
00237f	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002380	43 00 00 00 20 00	Wait    4, Tc
002381	64 38 02 00 00 00	Branch  0x2386, [JMP]
002382	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_137
002383	94 0f 02 00 20 00	Branch  0x20f9, [CALL] < __Else_101 >
002384	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002385	43 00 00 00 20 00	Wait    4, Tc
002386	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_137

SetMask
002387	93 00 00 00 20 00	Wait    9, Tc
002388	11 b2 84 ba 12 00	Copy    [1:0964] = [1:095d]
002389	43 00 00 00 20 00	Wait    4, Tc
00238a	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_139
00238b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00238c	73 00 00 00 20 00	Wait    7, Tc
00238d	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
00238e	53 00 00 00 20 00	Wait    5, Tc
00238f	02 00 08 00 00 00	Cond    0x00008000

002390	54 39 02 00 90 00	Branch  0x2395, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002391	d4 14 02 00 20 00	Branch  0x214d, [CALL] < __If_103 >
002392	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002393	43 00 00 00 20 00	Wait    4, Tc
002394	94 39 02 00 00 00	Branch  0x2399, [JMP]
002395	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_139
002396	44 15 02 00 20 00	Branch  0x2154, [CALL] < __Else_103 >
002397	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002398	43 00 00 00 20 00	Wait    4, Tc
002399	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# EndIf_139
00239a	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
00239b	73 00 00 00 20 00	Wait    7, Tc
00239c	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
00239d	53 00 00 00 20 00	Wait    5, Tc
00239e	02 00 08 00 00 00	Cond    0x00008000

00239f	44 3a 02 00 90 00	Branch  0x23a4, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0023a0	f4 15 02 00 20 00	Branch  0x215f, [CALL] < __If_105 >
0023a1	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0023a2	43 00 00 00 20 00	Wait    4, Tc
0023a3	84 3a 02 00 00 00	Branch  0x23a8, [JMP]
0023a4	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_141
0023a5	64 16 02 00 20 00	Branch  0x2166, [CALL] < __Else_105 >
0023a6	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0023a7	43 00 00 00 20 00	Wait    4, Tc
0023a8	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# EndIf_141
0023a9	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
0023aa	73 00 00 00 20 00	Wait    7, Tc
0023ab	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
0023ac	53 00 00 00 20 00	Wait    5, Tc
0023ad	02 00 08 00 00 00	Cond    0x00008000

0023ae	34 3b 02 00 90 00	Branch  0x23b3, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0023af	14 17 02 00 20 00	Branch  0x2171, [CALL] < __If_107 >
0023b0	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0023b1	43 00 00 00 20 00	Wait    4, Tc
0023b2	74 3b 02 00 00 00	Branch  0x23b7, [JMP]
0023b3	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_143
0023b4	84 17 02 00 20 00	Branch  0x2178, [CALL] < __Else_107 >
0023b5	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0023b6	43 00 00 00 20 00	Wait    4, Tc
0023b7	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# EndIf_143
0023b8	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
0023b9	73 00 00 00 20 00	Wait    7, Tc
0023ba	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
0023bb	53 00 00 00 20 00	Wait    5, Tc
0023bc	02 00 08 00 00 00	Cond    0x00008000

0023bd	24 3c 02 00 90 00	Branch  0x23c2, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0023be	34 18 02 00 20 00	Branch  0x2183, [CALL] < __If_109 >
0023bf	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
0023c0	43 00 00 00 20 00	Wait    4, Tc
0023c1	64 3c 02 00 00 00	Branch  0x23c6, [JMP]
0023c2	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_145
0023c3	a4 18 02 00 20 00	Branch  0x218a, [CALL] < __Else_109 >
0023c4	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
0023c5	43 00 00 00 20 00	Wait    4, Tc
0023c6	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_145

SetMask
0023c7	93 00 00 00 20 00	Wait    9, Tc
0023c8	91 b2 84 bc 12 00	Copy    [1:0965] = [1:095e]
0023c9	43 00 00 00 20 00	Wait    4, Tc
0023ca	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# If_147
0023cb	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0023cc	73 00 00 00 20 00	Wait    7, Tc
0023cd	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0023ce	53 00 00 00 20 00	Wait    5, Tc
0023cf	02 00 08 00 00 00	Cond    0x00008000

0023d0	54 3d 02 00 90 00	Branch  0x23d5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0023d1	e4 1d 02 00 20 00	Branch  0x21de, [CALL] < __If_111 >
0023d2	00 08 98 69 07 00	Write   [0:0x3010] = ed3
0023d3	43 00 00 00 20 00	Wait    4, Tc
0023d4	94 3d 02 00 00 00	Branch  0x23d9, [JMP]
0023d5	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_147
0023d6	54 1e 02 00 20 00	Branch  0x21e5, [CALL] < __Else_111 >
0023d7	00 08 98 69 07 00	Write   [0:0x3010] = ed3
0023d8	43 00 00 00 20 00	Wait    4, Tc
0023d9	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# EndIf_147
0023da	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
0023db	73 00 00 00 20 00	Wait    7, Tc
0023dc	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
0023dd	53 00 00 00 20 00	Wait    5, Tc
0023de	02 00 08 00 00 00	Cond    0x00008000

0023df	44 3e 02 00 90 00	Branch  0x23e4, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0023e0	04 1f 02 00 20 00	Branch  0x21f0, [CALL] < __If_113 >
0023e1	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0023e2	43 00 00 00 20 00	Wait    4, Tc
0023e3	84 3e 02 00 00 00	Branch  0x23e8, [JMP]
0023e4	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_149
0023e5	74 1f 02 00 20 00	Branch  0x21f7, [CALL] < __Else_113 >
0023e6	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0023e7	43 00 00 00 20 00	Wait    4, Tc
0023e8	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# EndIf_149
0023e9	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
0023ea	73 00 00 00 20 00	Wait    7, Tc
0023eb	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
0023ec	53 00 00 00 20 00	Wait    5, Tc
0023ed	02 00 08 00 00 00	Cond    0x00008000

0023ee	34 3f 02 00 90 00	Branch  0x23f3, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0023ef	24 20 02 00 20 00	Branch  0x2202, [CALL] < __If_115 >
0023f0	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0023f1	43 00 00 00 20 00	Wait    4, Tc
0023f2	74 3f 02 00 00 00	Branch  0x23f7, [JMP]
0023f3	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_151
0023f4	94 20 02 00 20 00	Branch  0x2209, [CALL] < __Else_115 >
0023f5	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0023f6	43 00 00 00 20 00	Wait    4, Tc
0023f7	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# EndIf_151
0023f8	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
0023f9	73 00 00 00 20 00	Wait    7, Tc
0023fa	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
0023fb	53 00 00 00 20 00	Wait    5, Tc
0023fc	02 00 08 00 00 00	Cond    0x00008000

0023fd	24 40 02 00 90 00	Branch  0x2402, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0023fe	44 21 02 00 20 00	Branch  0x2214, [CALL] < __If_117 >
0023ff	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002400	43 00 00 00 20 00	Wait    4, Tc
002401	64 40 02 00 00 00	Branch  0x2406, [JMP]
002402	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_153
002403	b4 21 02 00 20 00	Branch  0x221b, [CALL] < __Else_117 >
002404	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002405	43 00 00 00 20 00	Wait    4, Tc
002406	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_153

__If_160
002407	43 00 00 00 20 00	Wait    4, Tc		# If_160_Func_Start
002408	91 ae 84 58 12 00	Copy    [1:095d] = [1:092c]
002409	43 00 00 00 20 00	Wait    4, Tc
00240a	06 00 00 00 00 00	Nop     		# Else_160_Func_Start
00240b	04 00 00 00 40 00	Branch  0x0, [RET]


__If_159
00240c	43 00 00 00 20 00	Wait    4, Tc
00240d	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_159_Func_Start
00240e	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00240f	73 00 00 00 20 00	Wait    7, Tc
002410	01 4d 98 c6 12 00	Copy    [0:309a] = [1:0963]
002411	53 00 00 00 20 00	Wait    5, Tc
002412	02 00 08 00 00 00	Cond    0x00008000

002413	84 41 02 00 90 00	Branch  0x2418, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002414	74 40 02 00 20 00	Branch  0x2407, [CALL] < __If_160 >
002415	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002416	43 00 00 00 20 00	Wait    4, Tc
002417	84 41 02 00 00 00	Branch  0x2418, [JMP]
002418	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_160

__Else_159
002419	43 00 00 00 20 00	Wait    4, Tc		# Else_159_Func_Start
00241a	91 ae 84 58 12 00	Copy    [1:095d] = [1:092c]
00241b	43 00 00 00 20 00	Wait    4, Tc
00241c	04 00 00 00 40 00	Branch  0x0, [RET]


__If_162
00241d	43 00 00 00 20 00	Wait    4, Tc		# If_162_Func_Start
00241e	11 af 84 58 12 00	Copy    [1:095e] = [1:092c]
00241f	43 00 00 00 20 00	Wait    4, Tc
002420	06 00 00 00 00 00	Nop     		# Else_162_Func_Start
002421	04 00 00 00 40 00	Branch  0x0, [RET]


__If_161
002422	43 00 00 00 20 00	Wait    4, Tc
002423	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_161_Func_Start
002424	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002425	73 00 00 00 20 00	Wait    7, Tc
002426	01 4d 98 ca 12 00	Copy    [0:309a] = [1:0965]
002427	53 00 00 00 20 00	Wait    5, Tc
002428	02 00 08 00 00 00	Cond    0x00008000

002429	e4 42 02 00 90 00	Branch  0x242e, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00242a	d4 41 02 00 20 00	Branch  0x241d, [CALL] < __If_162 >
00242b	00 08 98 74 07 00	Write   [0:0x3010] = ee9
00242c	43 00 00 00 20 00	Wait    4, Tc
00242d	e4 42 02 00 00 00	Branch  0x242e, [JMP]
00242e	06 00 00 00 00 00	Nop     		# Else_162
00242f	04 00 00 00 40 00	Branch  0x0, [RET]


__If_158
002430	a3 00 00 00 20 00	Wait    10, Tc
002431	01 48 98 ce 12 00	Copy    [0:3090] = [1:0967]		# If_158_Func_Start
002432	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002433	93 00 00 00 20 00	Wait    9, Tc
002434	02 00 00 01 00 00	Cond    0x00100000

002435	b4 43 02 00 90 00	Branch  0x243b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002436	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002437	c4 40 02 00 20 00	Branch  0x240c, [CALL] < __If_159 >
002438	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
002439	43 00 00 00 20 00	Wait    4, Tc
00243a	e4 43 02 00 00 00	Branch  0x243e, [JMP]
00243b	94 41 02 00 20 00	Branch  0x2419, [CALL] < __Else_159 >		# Else_159
00243c	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
00243d	a3 00 00 00 20 00	Wait    10, Tc
00243e	01 48 98 d0 12 00	Copy    [0:3090] = [1:0968]		# EndIf_159
00243f	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
002440	93 00 00 00 20 00	Wait    9, Tc
002441	02 00 00 01 00 00	Cond    0x00100000

002442	84 44 02 00 90 00	Branch  0x2448, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002443	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002444	24 42 02 00 20 00	Branch  0x2422, [CALL] < __If_161 >
002445	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
002446	43 00 00 00 20 00	Wait    4, Tc
002447	84 44 02 00 00 00	Branch  0x2448, [JMP]
002448	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_161

__If_163
002449	43 00 00 00 20 00	Wait    4, Tc
00244a	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_163_Func_Start
00244b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00244c	73 00 00 00 20 00	Wait    7, Tc
00244d	01 4d 98 c6 12 00	Copy    [0:309a] = [1:0963]
00244e	53 00 00 00 20 00	Wait    5, Tc
00244f	02 00 08 00 00 00	Cond    0x00008000

002450	54 45 02 00 90 00	Branch  0x2455, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002451	74 40 02 00 20 00	Branch  0x2407, [CALL] < __If_160 >
002452	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002453	43 00 00 00 20 00	Wait    4, Tc
002454	54 45 02 00 00 00	Branch  0x2455, [JMP]
002455	06 00 00 00 00 00	Nop     		# Else_164
002456	04 00 00 00 40 00	Branch  0x0, [RET]


__If_165
002457	43 00 00 00 20 00	Wait    4, Tc
002458	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_165_Func_Start
002459	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00245a	73 00 00 00 20 00	Wait    7, Tc
00245b	01 4d 98 ca 12 00	Copy    [0:309a] = [1:0965]
00245c	53 00 00 00 20 00	Wait    5, Tc
00245d	02 00 08 00 00 00	Cond    0x00008000

00245e	34 46 02 00 90 00	Branch  0x2463, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00245f	d4 41 02 00 20 00	Branch  0x241d, [CALL] < __If_162 >
002460	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002461	43 00 00 00 20 00	Wait    4, Tc
002462	34 46 02 00 00 00	Branch  0x2463, [JMP]
002463	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_166

__Else_165
002464	43 00 00 00 20 00	Wait    4, Tc		# Else_165_Func_Start
002465	11 af 84 58 12 00	Copy    [1:095e] = [1:092c]
002466	43 00 00 00 20 00	Wait    4, Tc
002467	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_158
002468	a3 00 00 00 20 00	Wait    10, Tc
002469	01 48 98 ce 12 00	Copy    [0:3090] = [1:0967]		# Else_158_Func_Start
00246a	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
00246b	93 00 00 00 20 00	Wait    9, Tc
00246c	02 00 00 01 00 00	Cond    0x00100000

00246d	34 47 02 00 90 00	Branch  0x2473, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00246e	00 08 18 74 07 00	Write   [0:0x3010] = ee8
00246f	94 44 02 00 20 00	Branch  0x2449, [CALL] < __If_163 >
002470	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
002471	43 00 00 00 20 00	Wait    4, Tc
002472	34 47 02 00 00 00	Branch  0x2473, [JMP]
002473	53 00 00 00 20 00	Wait    5, Tc		# Else_163
002474	01 48 98 d0 12 00	Copy    [0:3090] = [1:0968]
002475	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
002476	93 00 00 00 20 00	Wait    9, Tc
002477	02 00 00 01 00 00	Cond    0x00100000

002478	e4 47 02 00 90 00	Branch  0x247e, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002479	00 08 18 74 07 00	Write   [0:0x3010] = ee8
00247a	74 45 02 00 20 00	Branch  0x2457, [CALL] < __If_165 >
00247b	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00247c	43 00 00 00 20 00	Wait    4, Tc
00247d	14 48 02 00 00 00	Branch  0x2481, [JMP]
00247e	44 46 02 00 20 00	Branch  0x2464, [CALL] < __Else_165 >		# Else_165
00247f	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
002480	43 00 00 00 20 00	Wait    4, Tc
002481	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_165

UpdateQuantMinMax
002482	43 00 00 00 20 00	Wait    4, Tc
002483	00 08 98 68 07 00	Write   [0:0x3010] = ed1
002484	74 34 02 00 20 00	Branch  0x2347, [CALL] < SetMask >
002485	00 08 98 68 07 00	Write   [0:0x3010] = ed1
002486	74 38 02 00 20 00	Branch  0x2387, [CALL] < SetMask >
002487	00 08 98 68 07 00	Write   [0:0x3010] = ed1
002488	74 3c 02 00 20 00	Branch  0x23c7, [CALL] < SetMask >
002489	00 08 18 73 07 00	Write   [0:0x3010] = ee6
00248a	c4 26 02 00 20 00	Branch  0x226c, [CALL] < IsParamNeg >
00248b	00 08 18 73 07 00	Write   [0:0x3010] = ee6
00248c	44 28 02 00 20 00	Branch  0x2284, [CALL] < IsParamNeg >
00248d	00 08 18 73 07 00	Write   [0:0x3010] = ee6
00248e	c4 29 02 00 20 00	Branch  0x229c, [CALL] < IsParamNeg >
00248f	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002490	a3 00 00 00 20 00	Wait    10, Tc
002491	01 48 98 cc 12 00	Copy    [0:3090] = [1:0966]		# If_158
002492	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002493	93 00 00 00 20 00	Wait    9, Tc
002494	02 00 00 01 00 00	Cond    0x00100000

002495	b4 49 02 00 90 00	Branch  0x249b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002496	00 08 18 ed 04 00	Write   [0:0x3010] = 9da
002497	04 43 02 00 20 00	Branch  0x2430, [CALL] < __If_158 >
002498	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002499	43 00 00 00 20 00	Wait    4, Tc
00249a	f4 49 02 00 00 00	Branch  0x249f, [JMP]
00249b	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0		# Else_158
00249c	84 46 02 00 20 00	Branch  0x2468, [CALL] < __Else_158 >
00249d	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00249e	43 00 00 00 20 00	Wait    4, Tc
00249f	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_158

IsParamNeg
0024a0	43 00 00 00 20 00	Wait    4, Tc
0024a1	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_119
0024a2	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0024a3	73 00 00 00 20 00	Wait    7, Tc
0024a4	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0024a5	53 00 00 00 20 00	Wait    5, Tc
0024a6	02 00 08 00 00 00	Cond    0x00008000

0024a7	d4 4a 02 00 90 00	Branch  0x24ad, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0024a8	00 08 98 3b 05 00	Write   [0:0x3010] = a77
0024a9	64 26 02 00 20 00	Branch  0x2266, [CALL] < __If_119 >
0024aa	00 08 98 75 07 00	Write   [0:0x3010] = eeb
0024ab	43 00 00 00 20 00	Wait    4, Tc
0024ac	14 4b 02 00 00 00	Branch  0x24b1, [JMP]
0024ad	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_119
0024ae	94 26 02 00 20 00	Branch  0x2269, [CALL] < __Else_119 >
0024af	00 08 98 75 07 00	Write   [0:0x3010] = eeb
0024b0	43 00 00 00 20 00	Wait    4, Tc
0024b1	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_119

IsParamNeg
0024b2	43 00 00 00 20 00	Wait    4, Tc
0024b3	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_120
0024b4	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0024b5	73 00 00 00 20 00	Wait    7, Tc
0024b6	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0024b7	53 00 00 00 20 00	Wait    5, Tc
0024b8	02 00 08 00 00 00	Cond    0x00008000

0024b9	f4 4b 02 00 90 00	Branch  0x24bf, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0024ba	00 08 98 3b 05 00	Write   [0:0x3010] = a77
0024bb	e4 27 02 00 20 00	Branch  0x227e, [CALL] < __If_120 >
0024bc	00 08 98 75 07 00	Write   [0:0x3010] = eeb
0024bd	43 00 00 00 20 00	Wait    4, Tc
0024be	34 4c 02 00 00 00	Branch  0x24c3, [JMP]
0024bf	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_120
0024c0	14 28 02 00 20 00	Branch  0x2281, [CALL] < __Else_120 >
0024c1	00 08 98 75 07 00	Write   [0:0x3010] = eeb
0024c2	43 00 00 00 20 00	Wait    4, Tc
0024c3	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_120

IsParamNeg
0024c4	43 00 00 00 20 00	Wait    4, Tc
0024c5	01 4c 98 ca 12 00	Copy    [0:3098] = [1:0965]		# If_121
0024c6	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0024c7	73 00 00 00 20 00	Wait    7, Tc
0024c8	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0024c9	53 00 00 00 20 00	Wait    5, Tc
0024ca	02 00 08 00 00 00	Cond    0x00008000

0024cb	14 4d 02 00 90 00	Branch  0x24d1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0024cc	00 08 98 3b 05 00	Write   [0:0x3010] = a77
0024cd	64 29 02 00 20 00	Branch  0x2296, [CALL] < __If_121 >
0024ce	00 08 98 75 07 00	Write   [0:0x3010] = eeb
0024cf	43 00 00 00 20 00	Wait    4, Tc
0024d0	54 4d 02 00 00 00	Branch  0x24d5, [JMP]
0024d1	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_121
0024d2	94 29 02 00 20 00	Branch  0x2299, [CALL] < __Else_121 >
0024d3	00 08 98 75 07 00	Write   [0:0x3010] = eeb
0024d4	43 00 00 00 20 00	Wait    4, Tc
0024d5	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_121

__If_172
0024d6	43 00 00 00 20 00	Wait    4, Tc		# If_172_Func_Start
0024d7	91 af 84 4e 12 00	Copy    [1:095f] = [1:0927]
0024d8	43 00 00 00 20 00	Wait    4, Tc
0024d9	06 00 00 00 00 00	Nop     		# Else_172_Func_Start
0024da	04 00 00 00 40 00	Branch  0x0, [RET]


__If_171
0024db	43 00 00 00 20 00	Wait    4, Tc
0024dc	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_171_Func_Start
0024dd	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0024de	73 00 00 00 20 00	Wait    7, Tc
0024df	01 4d 98 c6 12 00	Copy    [0:309a] = [1:0963]
0024e0	53 00 00 00 20 00	Wait    5, Tc
0024e1	02 00 08 00 00 00	Cond    0x00008000

0024e2	74 4e 02 00 90 00	Branch  0x24e7, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0024e3	64 4d 02 00 20 00	Branch  0x24d6, [CALL] < __If_172 >
0024e4	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0024e5	43 00 00 00 20 00	Wait    4, Tc
0024e6	74 4e 02 00 00 00	Branch  0x24e7, [JMP]
0024e7	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_172

__Else_171
0024e8	43 00 00 00 20 00	Wait    4, Tc		# Else_171_Func_Start
0024e9	91 af 84 4e 12 00	Copy    [1:095f] = [1:0927]
0024ea	43 00 00 00 20 00	Wait    4, Tc
0024eb	04 00 00 00 40 00	Branch  0x0, [RET]


__If_174
0024ec	43 00 00 00 20 00	Wait    4, Tc		# If_174_Func_Start
0024ed	11 b0 84 4e 12 00	Copy    [1:0960] = [1:0927]
0024ee	43 00 00 00 20 00	Wait    4, Tc
0024ef	06 00 00 00 00 00	Nop     		# Else_174_Func_Start
0024f0	04 00 00 00 40 00	Branch  0x0, [RET]


__If_173
0024f1	43 00 00 00 20 00	Wait    4, Tc
0024f2	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_173_Func_Start
0024f3	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0024f4	73 00 00 00 20 00	Wait    7, Tc
0024f5	01 4d 98 ca 12 00	Copy    [0:309a] = [1:0965]
0024f6	53 00 00 00 20 00	Wait    5, Tc
0024f7	02 00 08 00 00 00	Cond    0x00008000

0024f8	d4 4f 02 00 90 00	Branch  0x24fd, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0024f9	c4 4e 02 00 20 00	Branch  0x24ec, [CALL] < __If_174 >
0024fa	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0024fb	43 00 00 00 20 00	Wait    4, Tc
0024fc	d4 4f 02 00 00 00	Branch  0x24fd, [JMP]
0024fd	06 00 00 00 00 00	Nop     		# Else_174
0024fe	04 00 00 00 40 00	Branch  0x0, [RET]


__If_170
0024ff	a3 00 00 00 20 00	Wait    10, Tc
002500	01 48 98 ce 12 00	Copy    [0:3090] = [1:0967]		# If_170_Func_Start
002501	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002502	93 00 00 00 20 00	Wait    9, Tc
002503	02 00 00 01 00 00	Cond    0x00100000

002504	a4 50 02 00 90 00	Branch  0x250a, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002505	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002506	b4 4d 02 00 20 00	Branch  0x24db, [CALL] < __If_171 >
002507	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
002508	43 00 00 00 20 00	Wait    4, Tc
002509	d4 50 02 00 00 00	Branch  0x250d, [JMP]
00250a	84 4e 02 00 20 00	Branch  0x24e8, [CALL] < __Else_171 >		# Else_171
00250b	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
00250c	a3 00 00 00 20 00	Wait    10, Tc
00250d	01 48 98 d0 12 00	Copy    [0:3090] = [1:0968]		# EndIf_171
00250e	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
00250f	93 00 00 00 20 00	Wait    9, Tc
002510	02 00 00 01 00 00	Cond    0x00100000

002511	74 51 02 00 90 00	Branch  0x2517, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002512	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002513	14 4f 02 00 20 00	Branch  0x24f1, [CALL] < __If_173 >
002514	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
002515	43 00 00 00 20 00	Wait    4, Tc
002516	74 51 02 00 00 00	Branch  0x2517, [JMP]
002517	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_173

__If_175
002518	43 00 00 00 20 00	Wait    4, Tc
002519	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_175_Func_Start
00251a	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00251b	73 00 00 00 20 00	Wait    7, Tc
00251c	01 4d 98 c6 12 00	Copy    [0:309a] = [1:0963]
00251d	53 00 00 00 20 00	Wait    5, Tc
00251e	02 00 08 00 00 00	Cond    0x00008000

00251f	44 52 02 00 90 00	Branch  0x2524, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002520	64 4d 02 00 20 00	Branch  0x24d6, [CALL] < __If_172 >
002521	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002522	43 00 00 00 20 00	Wait    4, Tc
002523	44 52 02 00 00 00	Branch  0x2524, [JMP]
002524	06 00 00 00 00 00	Nop     		# Else_176
002525	04 00 00 00 40 00	Branch  0x0, [RET]


__If_177
002526	43 00 00 00 20 00	Wait    4, Tc
002527	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_177_Func_Start
002528	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002529	73 00 00 00 20 00	Wait    7, Tc
00252a	01 4d 98 ca 12 00	Copy    [0:309a] = [1:0965]
00252b	53 00 00 00 20 00	Wait    5, Tc
00252c	02 00 08 00 00 00	Cond    0x00008000

00252d	24 53 02 00 90 00	Branch  0x2532, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00252e	c4 4e 02 00 20 00	Branch  0x24ec, [CALL] < __If_174 >
00252f	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002530	43 00 00 00 20 00	Wait    4, Tc
002531	24 53 02 00 00 00	Branch  0x2532, [JMP]
002532	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_178

__Else_177
002533	43 00 00 00 20 00	Wait    4, Tc		# Else_177_Func_Start
002534	11 b0 84 4e 12 00	Copy    [1:0960] = [1:0927]
002535	43 00 00 00 20 00	Wait    4, Tc
002536	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_170
002537	a3 00 00 00 20 00	Wait    10, Tc
002538	01 48 98 ce 12 00	Copy    [0:3090] = [1:0967]		# Else_170_Func_Start
002539	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
00253a	93 00 00 00 20 00	Wait    9, Tc
00253b	02 00 00 01 00 00	Cond    0x00100000

00253c	24 54 02 00 90 00	Branch  0x2542, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00253d	00 08 18 74 07 00	Write   [0:0x3010] = ee8
00253e	84 51 02 00 20 00	Branch  0x2518, [CALL] < __If_175 >
00253f	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
002540	43 00 00 00 20 00	Wait    4, Tc
002541	24 54 02 00 00 00	Branch  0x2542, [JMP]
002542	53 00 00 00 20 00	Wait    5, Tc		# Else_175
002543	01 48 98 d0 12 00	Copy    [0:3090] = [1:0968]
002544	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
002545	93 00 00 00 20 00	Wait    9, Tc
002546	02 00 00 01 00 00	Cond    0x00100000

002547	d4 54 02 00 90 00	Branch  0x254d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002548	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002549	64 52 02 00 20 00	Branch  0x2526, [CALL] < __If_177 >
00254a	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00254b	43 00 00 00 20 00	Wait    4, Tc
00254c	04 55 02 00 00 00	Branch  0x2550, [JMP]
00254d	34 53 02 00 20 00	Branch  0x2533, [CALL] < __Else_177 >		# Else_177
00254e	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00254f	43 00 00 00 20 00	Wait    4, Tc
002550	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_177

UpdateQuantMinMax
002551	93 00 00 00 20 00	Wait    9, Tc
002552	91 b1 84 4e 12 00	Copy    [1:0963] = [1:0927]
002553	93 00 00 00 20 00	Wait    9, Tc
002554	11 b2 84 be 12 00	Copy    [1:0964] = [1:095f]
002555	93 00 00 00 20 00	Wait    9, Tc
002556	91 b2 84 c0 12 00	Copy    [1:0965] = [1:0960]
002557	43 00 00 00 20 00	Wait    4, Tc
002558	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002559	04 4a 02 00 20 00	Branch  0x24a0, [CALL] < IsParamNeg >
00255a	00 08 98 74 07 00	Write   [0:0x3010] = ee9
00255b	24 4b 02 00 20 00	Branch  0x24b2, [CALL] < IsParamNeg >
00255c	00 08 98 74 07 00	Write   [0:0x3010] = ee9
00255d	44 4c 02 00 20 00	Branch  0x24c4, [CALL] < IsParamNeg >
00255e	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00255f	a3 00 00 00 20 00	Wait    10, Tc
002560	01 48 98 cc 12 00	Copy    [0:3090] = [1:0966]		# If_170
002561	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002562	93 00 00 00 20 00	Wait    9, Tc
002563	02 00 00 01 00 00	Cond    0x00100000

002564	a4 56 02 00 90 00	Branch  0x256a, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002565	00 08 18 ed 04 00	Write   [0:0x3010] = 9da
002566	f4 4f 02 00 20 00	Branch  0x24ff, [CALL] < __If_170 >
002567	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002568	43 00 00 00 20 00	Wait    4, Tc
002569	e4 56 02 00 00 00	Branch  0x256e, [JMP]
00256a	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0		# Else_170
00256b	74 53 02 00 20 00	Branch  0x2537, [CALL] < __Else_170 >
00256c	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00256d	43 00 00 00 20 00	Wait    4, Tc
00256e	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_170

__If_184
00256f	43 00 00 00 20 00	Wait    4, Tc		# If_184_Func_Start
002570	91 b0 84 50 12 00	Copy    [1:0961] = [1:0928]
002571	43 00 00 00 20 00	Wait    4, Tc
002572	06 00 00 00 00 00	Nop     		# Else_184_Func_Start
002573	04 00 00 00 40 00	Branch  0x0, [RET]


__If_183
002574	43 00 00 00 20 00	Wait    4, Tc
002575	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_183_Func_Start
002576	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002577	73 00 00 00 20 00	Wait    7, Tc
002578	01 4d 98 c6 12 00	Copy    [0:309a] = [1:0963]
002579	53 00 00 00 20 00	Wait    5, Tc
00257a	02 00 08 00 00 00	Cond    0x00008000

00257b	04 58 02 00 90 00	Branch  0x2580, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00257c	f4 56 02 00 20 00	Branch  0x256f, [CALL] < __If_184 >
00257d	00 08 98 74 07 00	Write   [0:0x3010] = ee9
00257e	43 00 00 00 20 00	Wait    4, Tc
00257f	04 58 02 00 00 00	Branch  0x2580, [JMP]
002580	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_184

__Else_183
002581	43 00 00 00 20 00	Wait    4, Tc		# Else_183_Func_Start
002582	91 b0 84 50 12 00	Copy    [1:0961] = [1:0928]
002583	43 00 00 00 20 00	Wait    4, Tc
002584	04 00 00 00 40 00	Branch  0x0, [RET]


__If_186
002585	43 00 00 00 20 00	Wait    4, Tc		# If_186_Func_Start
002586	11 b1 84 50 12 00	Copy    [1:0962] = [1:0928]
002587	43 00 00 00 20 00	Wait    4, Tc
002588	06 00 00 00 00 00	Nop     		# Else_186_Func_Start
002589	04 00 00 00 40 00	Branch  0x0, [RET]


__If_185
00258a	43 00 00 00 20 00	Wait    4, Tc
00258b	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_185_Func_Start
00258c	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00258d	73 00 00 00 20 00	Wait    7, Tc
00258e	01 4d 98 ca 12 00	Copy    [0:309a] = [1:0965]
00258f	53 00 00 00 20 00	Wait    5, Tc
002590	02 00 08 00 00 00	Cond    0x00008000

002591	64 59 02 00 90 00	Branch  0x2596, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002592	54 58 02 00 20 00	Branch  0x2585, [CALL] < __If_186 >
002593	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002594	43 00 00 00 20 00	Wait    4, Tc
002595	64 59 02 00 00 00	Branch  0x2596, [JMP]
002596	06 00 00 00 00 00	Nop     		# Else_186
002597	04 00 00 00 40 00	Branch  0x0, [RET]


__If_182
002598	a3 00 00 00 20 00	Wait    10, Tc
002599	01 48 98 ce 12 00	Copy    [0:3090] = [1:0967]		# If_182_Func_Start
00259a	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
00259b	93 00 00 00 20 00	Wait    9, Tc
00259c	02 00 00 01 00 00	Cond    0x00100000

00259d	34 5a 02 00 90 00	Branch  0x25a3, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00259e	00 08 18 74 07 00	Write   [0:0x3010] = ee8
00259f	44 57 02 00 20 00	Branch  0x2574, [CALL] < __If_183 >
0025a0	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
0025a1	43 00 00 00 20 00	Wait    4, Tc
0025a2	64 5a 02 00 00 00	Branch  0x25a6, [JMP]
0025a3	14 58 02 00 20 00	Branch  0x2581, [CALL] < __Else_183 >		# Else_183
0025a4	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
0025a5	a3 00 00 00 20 00	Wait    10, Tc
0025a6	01 48 98 d0 12 00	Copy    [0:3090] = [1:0968]		# EndIf_183
0025a7	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
0025a8	93 00 00 00 20 00	Wait    9, Tc
0025a9	02 00 00 01 00 00	Cond    0x00100000

0025aa	04 5b 02 00 90 00	Branch  0x25b0, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0025ab	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0025ac	a4 58 02 00 20 00	Branch  0x258a, [CALL] < __If_185 >
0025ad	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
0025ae	43 00 00 00 20 00	Wait    4, Tc
0025af	04 5b 02 00 00 00	Branch  0x25b0, [JMP]
0025b0	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_185

__If_187
0025b1	43 00 00 00 20 00	Wait    4, Tc
0025b2	01 4c 98 c8 12 00	Copy    [0:3098] = [1:0964]		# If_187_Func_Start
0025b3	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0025b4	73 00 00 00 20 00	Wait    7, Tc
0025b5	01 4d 98 c6 12 00	Copy    [0:309a] = [1:0963]
0025b6	53 00 00 00 20 00	Wait    5, Tc
0025b7	02 00 08 00 00 00	Cond    0x00008000

0025b8	d4 5b 02 00 90 00	Branch  0x25bd, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0025b9	f4 56 02 00 20 00	Branch  0x256f, [CALL] < __If_184 >
0025ba	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0025bb	43 00 00 00 20 00	Wait    4, Tc
0025bc	d4 5b 02 00 00 00	Branch  0x25bd, [JMP]
0025bd	06 00 00 00 00 00	Nop     		# Else_188
0025be	04 00 00 00 40 00	Branch  0x0, [RET]


__If_189
0025bf	43 00 00 00 20 00	Wait    4, Tc
0025c0	01 4c 98 c6 12 00	Copy    [0:3098] = [1:0963]		# If_189_Func_Start
0025c1	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0025c2	73 00 00 00 20 00	Wait    7, Tc
0025c3	01 4d 98 ca 12 00	Copy    [0:309a] = [1:0965]
0025c4	53 00 00 00 20 00	Wait    5, Tc
0025c5	02 00 08 00 00 00	Cond    0x00008000

0025c6	b4 5c 02 00 90 00	Branch  0x25cb, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0025c7	54 58 02 00 20 00	Branch  0x2585, [CALL] < __If_186 >
0025c8	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0025c9	43 00 00 00 20 00	Wait    4, Tc
0025ca	b4 5c 02 00 00 00	Branch  0x25cb, [JMP]
0025cb	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_190

__Else_189
0025cc	43 00 00 00 20 00	Wait    4, Tc		# Else_189_Func_Start
0025cd	11 b1 84 50 12 00	Copy    [1:0962] = [1:0928]
0025ce	43 00 00 00 20 00	Wait    4, Tc
0025cf	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_182
0025d0	a3 00 00 00 20 00	Wait    10, Tc
0025d1	01 48 98 ce 12 00	Copy    [0:3090] = [1:0967]		# Else_182_Func_Start
0025d2	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0025d3	93 00 00 00 20 00	Wait    9, Tc
0025d4	02 00 00 01 00 00	Cond    0x00100000

0025d5	b4 5d 02 00 90 00	Branch  0x25db, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0025d6	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0025d7	14 5b 02 00 20 00	Branch  0x25b1, [CALL] < __If_187 >
0025d8	00 08 98 f0 04 00	Write   [0:0x3010] = 9e1
0025d9	43 00 00 00 20 00	Wait    4, Tc
0025da	b4 5d 02 00 00 00	Branch  0x25db, [JMP]
0025db	53 00 00 00 20 00	Wait    5, Tc		# Else_187
0025dc	01 48 98 d0 12 00	Copy    [0:3090] = [1:0968]
0025dd	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
0025de	93 00 00 00 20 00	Wait    9, Tc
0025df	02 00 00 01 00 00	Cond    0x00100000

0025e0	64 5e 02 00 90 00	Branch  0x25e6, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0025e1	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0025e2	f4 5b 02 00 20 00	Branch  0x25bf, [CALL] < __If_189 >
0025e3	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0025e4	43 00 00 00 20 00	Wait    4, Tc
0025e5	94 5e 02 00 00 00	Branch  0x25e9, [JMP]
0025e6	c4 5c 02 00 20 00	Branch  0x25cc, [CALL] < __Else_189 >		# Else_189
0025e7	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0025e8	43 00 00 00 20 00	Wait    4, Tc
0025e9	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_189

UpdateQuantMinMax
0025ea	93 00 00 00 20 00	Wait    9, Tc
0025eb	91 b1 84 50 12 00	Copy    [1:0963] = [1:0928]
0025ec	93 00 00 00 20 00	Wait    9, Tc
0025ed	11 b2 84 c2 12 00	Copy    [1:0964] = [1:0961]
0025ee	93 00 00 00 20 00	Wait    9, Tc
0025ef	91 b2 84 c4 12 00	Copy    [1:0965] = [1:0962]
0025f0	43 00 00 00 20 00	Wait    4, Tc
0025f1	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0025f2	04 4a 02 00 20 00	Branch  0x24a0, [CALL] < IsParamNeg >
0025f3	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0025f4	24 4b 02 00 20 00	Branch  0x24b2, [CALL] < IsParamNeg >
0025f5	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0025f6	44 4c 02 00 20 00	Branch  0x24c4, [CALL] < IsParamNeg >
0025f7	00 08 98 3b 05 00	Write   [0:0x3010] = a77
0025f8	a3 00 00 00 20 00	Wait    10, Tc
0025f9	01 48 98 cc 12 00	Copy    [0:3090] = [1:0966]		# If_182
0025fa	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0025fb	93 00 00 00 20 00	Wait    9, Tc
0025fc	02 00 00 01 00 00	Cond    0x00100000

0025fd	34 60 02 00 90 00	Branch  0x2603, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0025fe	00 08 18 ed 04 00	Write   [0:0x3010] = 9da
0025ff	84 59 02 00 20 00	Branch  0x2598, [CALL] < __If_182 >
002600	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002601	43 00 00 00 20 00	Wait    4, Tc
002602	74 60 02 00 00 00	Branch  0x2607, [JMP]
002603	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0		# Else_182
002604	04 5d 02 00 20 00	Branch  0x25d0, [CALL] < __Else_182 >
002605	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002606	43 00 00 00 20 00	Wait    4, Tc
002607	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_182

__Else_94
002608	00 08 98 3b 05 00	Write   [0:0x3010] = a77		# Else_94_Func_Start
002609	94 32 02 00 20 00	Branch  0x2329, [CALL] < UpdateQuantMinMax >
00260a	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00260b	24 48 02 00 20 00	Branch  0x2482, [CALL] < UpdateQuantMinMax >
00260c	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00260d	14 55 02 00 20 00	Branch  0x2551, [CALL] < UpdateQuantMinMax >
00260e	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00260f	a4 5e 02 00 20 00	Branch  0x25ea, [CALL] < UpdateQuantMinMax >
002610	04 00 00 00 40 00	Branch  0x0, [RET]


UpdateLoIqCalCoeffMinMax
002611	a3 00 00 00 20 00	Wait    10, Tc
002612	01 48 98 b4 12 00	Copy    [0:3090] = [1:095a]		# If_94
002613	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002614	93 00 00 00 20 00	Wait    9, Tc
002615	02 00 00 01 00 00	Cond    0x00100000

002616	c4 61 02 00 90 00	Branch  0x261c, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002617	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002618	04 0a 02 00 20 00	Branch  0x20a0, [CALL] < __If_94 >
002619	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00261a	43 00 00 00 20 00	Wait    4, Tc
00261b	f4 61 02 00 00 00	Branch  0x261f, [JMP]
00261c	84 60 02 00 20 00	Branch  0x2608, [CALL] < __Else_94 >		# Else_94
00261d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00261e	43 00 00 00 20 00	Wait    4, Tc
00261f	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_94

_Loop_LO Calibration - TX_LO
002620	43 00 00 00 20 00	Wait    4, Tc
002621	11 93 04 20 60 00	Copy    [1:0926] = [0:3010]		# While_7_Func_Start
002622	53 00 00 00 20 00	Wait    5, Tc
002623	01 08 98 4c 12 00	Copy    [0:3010] = [1:0926]		# While_7
002624	01 4c 98 4a 12 00	Copy    [0:3098] = [1:0925]
002625	33 00 00 00 20 00	Wait    3, Tc
002626	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002627	33 00 00 00 20 00	Wait    3, Tc
002628	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002629	53 00 00 00 20 00	Wait    5, Tc
00262a	02 00 08 00 00 00	Cond    0x00008000

00262b	44 64 02 00 10 00	Branch  0x2644, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00262c	24 b9 01 00 20 00	Branch  0x1b92, [CALL] < ResetIQVariables >
00262d	00 08 98 49 07 00	Write   [0:0x3010] = e93
00262e	43 00 00 00 20 00	Wait    4, Tc
00262f	64 ba 01 00 20 00	Branch  0x1ba6, [CALL] < ResetPowerAccumVariables >
002630	00 08 98 49 07 00	Write   [0:0x3010] = e93
002631	93 00 00 00 20 00	Wait    9, Tc
002632	11 9c 84 42 12 00	Copy    [1:0938] = [1:0921]
002633	43 00 00 00 20 00	Wait    4, Tc
002634	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002635	f4 f6 01 00 20 00	Branch  0x1f6f, [CALL] < Calibrate_calibrateStageFunc >
002636	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002637	84 f7 01 00 20 00	Branch  0x1f78, [CALL] < Calibrate_calibrateStageFunc >
002638	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002639	e4 08 02 00 20 00	Branch  0x208e, [CALL] < SaveCalibrationResult >
00263a	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00263b	14 61 02 00 20 00	Branch  0x2611, [CALL] < UpdateLoIqCalCoeffMinMax >
00263c	00 08 98 49 07 00	Write   [0:0x3010] = e93
00263d	43 00 00 00 20 00	Wait    4, Tc
00263e	01 48 98 4a 12 00	Copy    [0:3090] = [1:0925]
00263f	81 48 98 01 00 01	Copy    [0:3091] = [SF+2], SrcBase: AI
002640	93 00 00 00 20 00	Wait    9, Tc
002641	91 92 04 20 61 00	Copy    [1:0925] = [0:3090]
002642	53 00 00 00 20 00	Wait    5, Tc
002643	34 62 02 00 00 00	Branch  0x2623, [JMP]
002644	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_7

Calibrate_calibrateStageFunc_sub_9
002645	91 9c 84 01 00 01	Copy    [1:0939] = [SF+0], SrcBase: AI
002646	d4 ba 01 00 20 00	Branch  0x1bad, [CALL] < SetIQAncor >
002647	43 00 00 00 20 00	Wait    4, Tc
002648	91 90 84 70 12 00	Copy    [1:0921] = [1:0938]
002649	43 00 00 00 20 00	Wait    4, Tc
00264a	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateStageFunc
00264b	43 00 00 00 20 00	Wait    4, Tc
00264c	54 64 02 00 20 00	Branch  0x2645, [CALL] < Calibrate_calibrateStageFunc_sub_9 >
00264d	00 08 18 62 07 00	Write   [0:0x3010] = ec4
00264e	44 f5 01 00 20 00	Branch  0x1f54, [CALL] < Calibrate_calibrateSpurFunc >
00264f	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002650	43 00 00 00 20 00	Wait    4, Tc
002651	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateStageFunc
002652	43 00 00 00 20 00	Wait    4, Tc
002653	54 64 02 00 20 00	Branch  0x2645, [CALL] < Calibrate_calibrateStageFunc_sub_9 >
002654	00 08 18 62 07 00	Write   [0:0x3010] = ec4
002655	44 f5 01 00 20 00	Branch  0x1f54, [CALL] < Calibrate_calibrateSpurFunc >
002656	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002657	43 00 00 00 20 00	Wait    4, Tc
002658	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_IQ Calibration - TX_LO
002659	43 00 00 00 20 00	Wait    4, Tc
00265a	91 b4 04 20 60 00	Copy    [1:0969] = [0:3010]		# While_10_Func_Start
00265b	53 00 00 00 20 00	Wait    5, Tc
00265c	01 08 98 d2 12 00	Copy    [0:3010] = [1:0969]		# While_10
00265d	01 4c 98 4a 12 00	Copy    [0:3098] = [1:0925]
00265e	33 00 00 00 20 00	Wait    3, Tc
00265f	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002660	33 00 00 00 20 00	Wait    3, Tc
002661	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002662	53 00 00 00 20 00	Wait    5, Tc
002663	02 00 08 00 00 00	Cond    0x00008000

002664	d4 67 02 00 10 00	Branch  0x267d, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002665	24 b9 01 00 20 00	Branch  0x1b92, [CALL] < ResetIQVariables >
002666	00 08 98 76 07 00	Write   [0:0x3010] = eed
002667	43 00 00 00 20 00	Wait    4, Tc
002668	64 ba 01 00 20 00	Branch  0x1ba6, [CALL] < ResetPowerAccumVariables >
002669	00 08 98 76 07 00	Write   [0:0x3010] = eed
00266a	93 00 00 00 20 00	Wait    9, Tc
00266b	11 9c 84 42 12 00	Copy    [1:0938] = [1:0921]
00266c	43 00 00 00 20 00	Wait    4, Tc
00266d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00266e	b4 64 02 00 20 00	Branch  0x264b, [CALL] < Calibrate_calibrateStageFunc >
00266f	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002670	24 65 02 00 20 00	Branch  0x2652, [CALL] < Calibrate_calibrateStageFunc >
002671	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002672	e4 08 02 00 20 00	Branch  0x208e, [CALL] < SaveCalibrationResult >
002673	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002674	14 61 02 00 20 00	Branch  0x2611, [CALL] < UpdateLoIqCalCoeffMinMax >
002675	00 08 98 76 07 00	Write   [0:0x3010] = eed
002676	43 00 00 00 20 00	Wait    4, Tc
002677	01 48 98 4a 12 00	Copy    [0:3090] = [1:0925]
002678	81 48 98 01 00 01	Copy    [0:3091] = [SF+2], SrcBase: AI
002679	93 00 00 00 20 00	Wait    9, Tc
00267a	91 92 04 20 61 00	Copy    [1:0925] = [0:3090]
00267b	53 00 00 00 20 00	Wait    5, Tc
00267c	c4 65 02 00 00 00	Branch  0x265c, [JMP]
00267d	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_10

loToCalibrate_innerLoop
00267e	24 b1 01 00 20 00	Branch  0x1b12, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
00267f	94 b1 01 00 20 00	Branch  0x1b19, [CALL] < Vayyar::SequencerMemoryAccessCentipede::CopyToDsp(const class ILParamShort &,const class ILParamShort &) >
002680	10 91 04 00 00 00	Write   [1:0x0922] = 0
002681	10 11 00 2c 04 00	Write   [1:0x0022] = 858
002682	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
002683	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
002684	00 09 18 00 40 00	Write   [0:0x3012] = 8000
002685	80 09 18 00 00 00	Write   [0:0x3013] = 0
002686	43 00 00 00 20 00	Wait    4, Tc
002687	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
002688	b3 00 00 00 20 00	Wait    11, Tc
002689	90 90 04 00 00 00	Write   [1:0x0921] = 0
00268a	90 91 04 00 00 00	Write   [1:0x0923] = 0
00268b	10 92 04 00 00 00	Write   [1:0x0924] = 0
00268c	90 92 04 00 00 00	Write   [1:0x0925] = 0
00268d	00 08 98 48 07 00	Write   [0:0x3010] = e91
00268e	04 62 02 00 20 00	Branch  0x2620, [CALL] < _Loop_LO Calibration - TX_LO >
00268f	90 91 84 00 00 00	Write   [1:0x0923] = 1
002690	10 92 04 00 00 00	Write   [1:0x0924] = 0
002691	90 92 04 00 00 00	Write   [1:0x0925] = 0
002692	00 08 98 75 07 00	Write   [0:0x3010] = eeb
002693	94 65 02 00 20 00	Branch  0x2659, [CALL] < _Loop_IQ Calibration - TX_LO >
002694	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int)
002695	43 00 00 00 20 00	Wait    4, Tc
002696	00 09 18 00 40 00	Write   [0:0x3012] = 8000
002697	80 09 18 00 00 00	Write   [0:0x3013] = 0
002698	43 00 00 00 20 00	Wait    4, Tc
002699	41 08 80 01 00 01	Copy    [0:0010] = [SF+0], DestBase: A, SrcBase: AI
00269a	b3 00 00 00 20 00	Wait    11, Tc
00269b	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00269c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00269d	43 00 00 00 20 00	Wait    4, Tc
00269e	41 09 80 01 00 01	Copy    [0:0012] = [SF+1], DestBase: A, SrcBase: AI
00269f	b3 00 00 00 20 00	Wait    11, Tc
0026a0	11 11 80 01 00 01	Copy    [1:0022] = [SF+2], SrcBase: AI
0026a1	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0026a2	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0026a3	00 08 98 78 07 00	Write   [0:0x3010] = ef1
0026a4	43 00 00 00 20 00	Wait    4, Tc
0026a5	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026a6	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026a7	43 00 00 00 20 00	Wait    4, Tc
0026a8	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
0026a9	b3 00 00 00 20 00	Wait    11, Tc
0026aa	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int)
0026ab	43 00 00 00 20 00	Wait    4, Tc
0026ac	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026ad	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026ae	43 00 00 00 20 00	Wait    4, Tc
0026af	41 08 80 01 00 01	Copy    [0:0010] = [SF+0], DestBase: A, SrcBase: AI
0026b0	b3 00 00 00 20 00	Wait    11, Tc
0026b1	11 11 80 01 00 01	Copy    [1:0022] = [SF+1], SrcBase: AI
0026b2	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0026b3	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0026b4	00 08 98 79 07 00	Write   [0:0x3010] = ef3
0026b5	43 00 00 00 20 00	Wait    4, Tc
0026b6	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026b7	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026b8	43 00 00 00 20 00	Wait    4, Tc
0026b9	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
0026ba	b3 00 00 00 20 00	Wait    11, Tc
0026bb	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetMode(struct Vayyar::Centipede::LoMode [])
0026bc	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026bd	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026be	43 00 00 00 20 00	Wait    4, Tc
0026bf	40 01 80 01 00 00	Write   [0:0x0002] = 3, DestBase: A
0026c0	b3 00 00 00 20 00	Wait    11, Tc
0026c1	00 09 18 00 00 00	Write   [0:0x3012] = 0
0026c2	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026c3	43 00 00 00 20 00	Wait    4, Tc
0026c4	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026c5	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026c6	43 00 00 00 20 00	Wait    4, Tc
0026c7	c0 10 00 78 16 00	Write   [0:0x0021] = 2cf0, DestBase: A
0026c8	b3 00 00 00 20 00	Wait    11, Tc
0026c9	00 09 18 00 00 00	Write   [0:0x3012] = 0
0026ca	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026cb	43 00 00 00 20 00	Wait    4, Tc
0026cc	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026cd	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026ce	43 00 00 00 20 00	Wait    4, Tc
0026cf	40 10 00 7e 14 00	Write   [0:0x0020] = 28fc, DestBase: A
0026d0	b3 00 00 00 20 00	Wait    11, Tc
0026d1	00 09 18 00 00 00	Write   [0:0x3012] = 0
0026d2	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026d3	43 00 00 00 20 00	Wait    4, Tc
0026d4	00 08 18 77 07 00	Write   [0:0x3010] = eee
0026d5	54 69 02 00 20 00	Branch  0x2695, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int) >
0026d6	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026d7	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026d8	43 00 00 00 20 00	Wait    4, Tc
0026d9	40 49 80 b5 07 00	Write   [0:0x0092] = f6b, DestBase: A
0026da	b3 00 00 00 20 00	Wait    11, Tc
0026db	00 09 18 00 00 00	Write   [0:0x3012] = 0
0026dc	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026dd	43 00 00 00 20 00	Wait    4, Tc
0026de	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026df	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026e0	43 00 00 00 20 00	Wait    4, Tc
0026e1	40 50 00 01 45 00	Write   [0:0x00a0] = 8a02, DestBase: A
0026e2	b3 00 00 00 20 00	Wait    11, Tc
0026e3	00 09 18 00 00 00	Write   [0:0x3012] = 0
0026e4	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026e5	43 00 00 00 20 00	Wait    4, Tc
0026e6	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026e7	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026e8	43 00 00 00 20 00	Wait    4, Tc
0026e9	40 50 80 01 45 00	Write   [0:0x00a0] = 8a03, DestBase: A
0026ea	b3 00 00 00 20 00	Wait    11, Tc
0026eb	00 09 18 00 00 00	Write   [0:0x3012] = 0
0026ec	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026ed	43 00 00 00 20 00	Wait    4, Tc
0026ee	54 6e 00 00 20 00	Branch  0x6e5, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllSetMode(int) >
0026ef	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026f0	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026f1	43 00 00 00 20 00	Wait    4, Tc
0026f2	40 50 80 93 47 00	Write   [0:0x00a0] = 8f27, DestBase: A
0026f3	b3 00 00 00 20 00	Wait    11, Tc
0026f4	00 09 18 00 00 00	Write   [0:0x3012] = 0
0026f5	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026f6	43 00 00 00 20 00	Wait    4, Tc
0026f7	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0026f8	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026f9	43 00 00 00 20 00	Wait    4, Tc
0026fa	c0 10 80 ff 1f 00	Write   [0:0x0021] = 3fff, DestBase: A
0026fb	b3 00 00 00 20 00	Wait    11, Tc
0026fc	00 09 18 00 00 00	Write   [0:0x3012] = 0
0026fd	80 09 18 00 00 00	Write   [0:0x3013] = 0
0026fe	43 00 00 00 20 00	Wait    4, Tc
0026ff	00 09 18 00 40 00	Write   [0:0x3012] = 8000
002700	80 09 18 00 00 00	Write   [0:0x3013] = 0
002701	43 00 00 00 20 00	Wait    4, Tc
002702	40 10 00 7e 1e 00	Write   [0:0x0020] = 3cfc, DestBase: A
002703	b3 00 00 00 20 00	Wait    11, Tc
002704	00 09 18 00 00 00	Write   [0:0x3012] = 0
002705	80 09 18 00 00 00	Write   [0:0x3013] = 0
002706	43 00 00 00 20 00	Wait    4, Tc
002707	00 08 98 78 07 00	Write   [0:0x3010] = ef1
002708	b4 6a 02 00 20 00	Branch  0x26ab, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int) >
002709	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00270a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00270b	43 00 00 00 20 00	Wait    4, Tc
00270c	40 21 80 b5 07 00	Write   [0:0x0042] = f6b, DestBase: A
00270d	b3 00 00 00 20 00	Wait    11, Tc
00270e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00270f	80 09 18 00 00 00	Write   [0:0x3013] = 0
002710	43 00 00 00 20 00	Wait    4, Tc
002711	00 09 18 00 40 00	Write   [0:0x3012] = 8000
002712	80 09 18 00 00 00	Write   [0:0x3013] = 0
002713	43 00 00 00 20 00	Wait    4, Tc
002714	40 28 00 01 45 00	Write   [0:0x0050] = 8a02, DestBase: A
002715	b3 00 00 00 20 00	Wait    11, Tc
002716	00 09 18 00 00 00	Write   [0:0x3012] = 0
002717	80 09 18 00 00 00	Write   [0:0x3013] = 0
002718	43 00 00 00 20 00	Wait    4, Tc
002719	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00271a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00271b	43 00 00 00 20 00	Wait    4, Tc
00271c	40 28 80 01 45 00	Write   [0:0x0050] = 8a03, DestBase: A
00271d	b3 00 00 00 20 00	Wait    11, Tc
00271e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00271f	80 09 18 00 00 00	Write   [0:0x3013] = 0
002720	43 00 00 00 20 00	Wait    4, Tc
002721	00 08 98 79 07 00	Write   [0:0x3010] = ef3
002722	94 6b 00 00 20 00	Branch  0x6b9, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllSetMode(int) >
002723	00 09 18 00 40 00	Write   [0:0x3012] = 8000
002724	80 09 18 00 00 00	Write   [0:0x3013] = 0
002725	43 00 00 00 20 00	Wait    4, Tc
002726	40 28 80 8b 45 00	Write   [0:0x0050] = 8b17, DestBase: A
002727	b3 00 00 00 20 00	Wait    11, Tc
002728	00 09 18 00 00 00	Write   [0:0x3012] = 0
002729	80 09 18 00 00 00	Write   [0:0x3013] = 0
00272a	43 00 00 00 20 00	Wait    4, Tc
00272b	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00272c	43 00 00 00 20 00	Wait    4, Tc
00272d	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00272e	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00272f	33 00 00 00 20 00	Wait    3, Tc
002730	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002731	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002732	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002733	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002734	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002735	43 00 00 00 20 00	Wait    4, Tc
002736	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002737	43 00 00 00 20 00	Wait    4, Tc
002738	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002739	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00273a	c4 72 02 00 20 00	Branch  0x272c, [CALL] < IQCalTuneNco >
00273b	00 08 98 5b 06 00	Write   [0:0x3010] = cb7
00273c	c4 10 01 00 20 00	Branch  0x110c, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00273d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00273e	53 64 00 00 20 00	Wait    1605, Tc
00273f	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002740	43 00 00 00 20 00	Wait    4, Tc
002741	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002742	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002743	c4 72 02 00 20 00	Branch  0x272c, [CALL] < IQCalTuneNco >
002744	00 08 98 5d 06 00	Write   [0:0x3010] = cbb
002745	54 12 01 00 20 00	Branch  0x1125, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002746	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002747	53 64 00 00 20 00	Wait    1605, Tc
002748	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002749	43 00 00 00 20 00	Wait    4, Tc
00274a	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00274b	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00274c	c4 72 02 00 20 00	Branch  0x272c, [CALL] < IQCalTuneNco >
00274d	00 08 98 5f 06 00	Write   [0:0x3010] = cbf
00274e	e4 13 01 00 20 00	Branch  0x113e, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00274f	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002750	53 64 00 00 20 00	Wait    1605, Tc
002751	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002752	43 00 00 00 20 00	Wait    4, Tc
002753	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002754	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002755	c4 72 02 00 20 00	Branch  0x272c, [CALL] < IQCalTuneNco >
002756	00 08 98 61 06 00	Write   [0:0x3010] = cc3
002757	74 15 01 00 20 00	Branch  0x1157, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002758	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002759	53 64 00 00 20 00	Wait    1605, Tc
00275a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00275b	43 00 00 00 20 00	Wait    4, Tc
00275c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00275d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00275e	c4 72 02 00 20 00	Branch  0x272c, [CALL] < IQCalTuneNco >
00275f	00 08 98 63 06 00	Write   [0:0x3010] = cc7
002760	04 17 01 00 20 00	Branch  0x1170, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002761	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002762	53 64 00 00 20 00	Wait    1605, Tc
002763	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002764	43 00 00 00 20 00	Wait    4, Tc
002765	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002766	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002767	c4 72 02 00 20 00	Branch  0x272c, [CALL] < IQCalTuneNco >
002768	00 08 98 65 06 00	Write   [0:0x3010] = ccb
002769	94 18 01 00 20 00	Branch  0x1189, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00276a	00 08 98 3c 05 00	Write   [0:0x3010] = a79
00276b	53 64 00 00 20 00	Wait    1605, Tc
00276c	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00276d	43 00 00 00 20 00	Wait    4, Tc
00276e	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00276f	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002770	c4 72 02 00 20 00	Branch  0x272c, [CALL] < IQCalTuneNco >
002771	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002772	24 1a 01 00 20 00	Branch  0x11a2, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002773	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002774	53 64 00 00 20 00	Wait    1605, Tc
002775	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002776	43 00 00 00 20 00	Wait    4, Tc
002777	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002778	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002779	c4 72 02 00 20 00	Branch  0x272c, [CALL] < IQCalTuneNco >
00277a	00 08 18 6a 06 00	Write   [0:0x3010] = cd4
00277b	b4 1b 01 00 20 00	Branch  0x11bb, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00277c	00 08 18 68 06 00	Write   [0:0x3010] = cd0
00277d	53 64 00 00 20 00	Wait    1605, Tc
00277e	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00277f	43 00 00 00 20 00	Wait    4, Tc
002780	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002781	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
002782	33 00 00 00 20 00	Wait    3, Tc
002783	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002784	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002785	00 08 18 6c 06 00	Write   [0:0x3010] = cd8
002786	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002787	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002788	43 00 00 00 20 00	Wait    4, Tc
002789	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00278a	43 00 00 00 20 00	Wait    4, Tc
00278b	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00278c	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00278d	f4 77 02 00 20 00	Branch  0x277f, [CALL] < IQCalTuneNco >
00278e	00 08 98 6e 06 00	Write   [0:0x3010] = cdd
00278f	f4 1d 01 00 20 00	Branch  0x11df, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002790	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002791	53 64 00 00 20 00	Wait    1605, Tc
002792	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
002793	43 00 00 00 20 00	Wait    4, Tc
002794	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002795	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
002796	33 00 00 00 20 00	Wait    3, Tc
002797	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002798	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002799	00 08 98 70 06 00	Write   [0:0x3010] = ce1
00279a	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00279b	00 08 18 59 06 00	Write   [0:0x3010] = cb2
00279c	43 00 00 00 20 00	Wait    4, Tc
00279d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00279e	43 00 00 00 20 00	Wait    4, Tc
00279f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0027a0	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0027a1	34 79 02 00 20 00	Branch  0x2793, [CALL] < IQCalTuneNco >
0027a2	00 08 18 73 06 00	Write   [0:0x3010] = ce6
0027a3	34 20 01 00 20 00	Branch  0x1203, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0027a4	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0027a5	53 64 00 00 20 00	Wait    1605, Tc
0027a6	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0027a7	43 00 00 00 20 00	Wait    4, Tc
0027a8	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0027a9	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0027aa	33 00 00 00 20 00	Wait    3, Tc
0027ab	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0027ac	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027ad	00 08 18 75 06 00	Write   [0:0x3010] = cea
0027ae	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027af	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0027b0	43 00 00 00 20 00	Wait    4, Tc
0027b1	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0027b2	43 00 00 00 20 00	Wait    4, Tc
0027b3	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0027b4	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0027b5	74 7a 02 00 20 00	Branch  0x27a7, [CALL] < IQCalTuneNco >
0027b6	00 08 98 77 06 00	Write   [0:0x3010] = cef
0027b7	74 22 01 00 20 00	Branch  0x1227, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0027b8	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0027b9	53 64 00 00 20 00	Wait    1605, Tc
0027ba	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0027bb	43 00 00 00 20 00	Wait    4, Tc
0027bc	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0027bd	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0027be	33 00 00 00 20 00	Wait    3, Tc
0027bf	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0027c0	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027c1	00 08 98 79 06 00	Write   [0:0x3010] = cf3
0027c2	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027c3	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0027c4	43 00 00 00 20 00	Wait    4, Tc
0027c5	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0027c6	43 00 00 00 20 00	Wait    4, Tc
0027c7	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0027c8	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0027c9	b4 7b 02 00 20 00	Branch  0x27bb, [CALL] < IQCalTuneNco >
0027ca	00 08 18 7c 06 00	Write   [0:0x3010] = cf8
0027cb	b4 24 01 00 20 00	Branch  0x124b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0027cc	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0027cd	53 64 00 00 20 00	Wait    1605, Tc
0027ce	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0027cf	43 00 00 00 20 00	Wait    4, Tc
0027d0	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0027d1	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0027d2	33 00 00 00 20 00	Wait    3, Tc
0027d3	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0027d4	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027d5	00 08 18 7e 06 00	Write   [0:0x3010] = cfc
0027d6	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027d7	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0027d8	43 00 00 00 20 00	Wait    4, Tc
0027d9	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0027da	43 00 00 00 20 00	Wait    4, Tc
0027db	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0027dc	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0027dd	f4 7c 02 00 20 00	Branch  0x27cf, [CALL] < IQCalTuneNco >
0027de	00 08 98 80 06 00	Write   [0:0x3010] = d01
0027df	f4 26 01 00 20 00	Branch  0x126f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0027e0	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0027e1	53 64 00 00 20 00	Wait    1605, Tc
0027e2	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0027e3	43 00 00 00 20 00	Wait    4, Tc
0027e4	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0027e5	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0027e6	33 00 00 00 20 00	Wait    3, Tc
0027e7	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0027e8	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027e9	00 08 98 82 06 00	Write   [0:0x3010] = d05
0027ea	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027eb	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0027ec	43 00 00 00 20 00	Wait    4, Tc
0027ed	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0027ee	43 00 00 00 20 00	Wait    4, Tc
0027ef	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0027f0	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0027f1	34 7e 02 00 20 00	Branch  0x27e3, [CALL] < IQCalTuneNco >
0027f2	00 08 18 85 06 00	Write   [0:0x3010] = d0a
0027f3	34 29 01 00 20 00	Branch  0x1293, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0027f4	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0027f5	53 64 00 00 20 00	Wait    1605, Tc
0027f6	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0027f7	43 00 00 00 20 00	Wait    4, Tc
0027f8	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0027f9	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0027fa	33 00 00 00 20 00	Wait    3, Tc
0027fb	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0027fc	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027fd	00 08 18 87 06 00	Write   [0:0x3010] = d0e
0027fe	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0027ff	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002800	43 00 00 00 20 00	Wait    4, Tc
002801	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002802	43 00 00 00 20 00	Wait    4, Tc
002803	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002804	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002805	74 7f 02 00 20 00	Branch  0x27f7, [CALL] < IQCalTuneNco >
002806	00 08 98 89 06 00	Write   [0:0x3010] = d13
002807	74 2b 01 00 20 00	Branch  0x12b7, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002808	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002809	53 64 00 00 20 00	Wait    1605, Tc
00280a	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00280b	43 00 00 00 20 00	Wait    4, Tc
00280c	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00280d	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00280e	33 00 00 00 20 00	Wait    3, Tc
00280f	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002810	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002811	00 08 98 8b 06 00	Write   [0:0x3010] = d17
002812	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002813	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002814	43 00 00 00 20 00	Wait    4, Tc
002815	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002816	43 00 00 00 20 00	Wait    4, Tc
002817	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002818	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002819	b4 80 02 00 20 00	Branch  0x280b, [CALL] < IQCalTuneNco >
00281a	00 08 18 8e 06 00	Write   [0:0x3010] = d1c
00281b	b4 2d 01 00 20 00	Branch  0x12db, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00281c	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00281d	53 64 00 00 20 00	Wait    1605, Tc
00281e	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00281f	43 00 00 00 20 00	Wait    4, Tc
002820	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002821	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
002822	33 00 00 00 20 00	Wait    3, Tc
002823	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002824	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002825	00 08 18 90 06 00	Write   [0:0x3010] = d20
002826	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002827	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002828	43 00 00 00 20 00	Wait    4, Tc
002829	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00282a	43 00 00 00 20 00	Wait    4, Tc
00282b	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00282c	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00282d	f4 81 02 00 20 00	Branch  0x281f, [CALL] < IQCalTuneNco >
00282e	00 08 98 92 06 00	Write   [0:0x3010] = d25
00282f	f4 2f 01 00 20 00	Branch  0x12ff, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002830	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002831	53 64 00 00 20 00	Wait    1605, Tc
002832	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
002833	43 00 00 00 20 00	Wait    4, Tc
002834	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002835	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
002836	33 00 00 00 20 00	Wait    3, Tc
002837	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002838	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002839	00 08 98 94 06 00	Write   [0:0x3010] = d29
00283a	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00283b	00 08 18 59 06 00	Write   [0:0x3010] = cb2
00283c	43 00 00 00 20 00	Wait    4, Tc
00283d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00283e	43 00 00 00 20 00	Wait    4, Tc
00283f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002840	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002841	34 83 02 00 20 00	Branch  0x2833, [CALL] < IQCalTuneNco >
002842	00 08 18 97 06 00	Write   [0:0x3010] = d2e
002843	34 32 01 00 20 00	Branch  0x1323, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002844	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002845	53 64 00 00 20 00	Wait    1605, Tc
002846	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
002847	43 00 00 00 20 00	Wait    4, Tc
002848	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002849	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00284a	33 00 00 00 20 00	Wait    3, Tc
00284b	00 08 98 0c 05 00	Write   [0:0x3010] = a19
00284c	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00284d	00 08 18 99 06 00	Write   [0:0x3010] = d32
00284e	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00284f	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002850	43 00 00 00 20 00	Wait    4, Tc
002851	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002852	43 00 00 00 20 00	Wait    4, Tc
002853	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002854	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002855	74 84 02 00 20 00	Branch  0x2847, [CALL] < IQCalTuneNco >
002856	00 08 98 9b 06 00	Write   [0:0x3010] = d37
002857	74 34 01 00 20 00	Branch  0x1347, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002858	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002859	53 64 00 00 20 00	Wait    1605, Tc
00285a	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00285b	43 00 00 00 20 00	Wait    4, Tc
00285c	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
00285d	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00285e	33 00 00 00 20 00	Wait    3, Tc
00285f	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002860	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002861	00 08 98 9d 06 00	Write   [0:0x3010] = d3b
002862	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002863	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002864	43 00 00 00 20 00	Wait    4, Tc
002865	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002866	43 00 00 00 20 00	Wait    4, Tc
002867	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002868	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002869	b4 85 02 00 20 00	Branch  0x285b, [CALL] < IQCalTuneNco >
00286a	00 08 18 a0 06 00	Write   [0:0x3010] = d40
00286b	b4 36 01 00 20 00	Branch  0x136b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00286c	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00286d	53 64 00 00 20 00	Wait    1605, Tc
00286e	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00286f	43 00 00 00 20 00	Wait    4, Tc
002870	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002871	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
002872	33 00 00 00 20 00	Wait    3, Tc
002873	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002874	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002875	00 08 18 a2 06 00	Write   [0:0x3010] = d44
002876	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002877	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002878	43 00 00 00 20 00	Wait    4, Tc
002879	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00287a	43 00 00 00 20 00	Wait    4, Tc
00287b	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00287c	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00287d	f4 86 02 00 20 00	Branch  0x286f, [CALL] < IQCalTuneNco >
00287e	00 08 98 a4 06 00	Write   [0:0x3010] = d49
00287f	f4 38 01 00 20 00	Branch  0x138f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002880	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002881	53 64 00 00 20 00	Wait    1605, Tc
002882	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
002883	43 00 00 00 20 00	Wait    4, Tc
002884	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002885	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
002886	33 00 00 00 20 00	Wait    3, Tc
002887	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002888	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002889	00 08 98 a6 06 00	Write   [0:0x3010] = d4d
00288a	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00288b	00 08 18 59 06 00	Write   [0:0x3010] = cb2
00288c	43 00 00 00 20 00	Wait    4, Tc
00288d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00288e	43 00 00 00 20 00	Wait    4, Tc
00288f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002890	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002891	34 88 02 00 20 00	Branch  0x2883, [CALL] < IQCalTuneNco >
002892	00 08 18 a9 06 00	Write   [0:0x3010] = d52
002893	34 3b 01 00 20 00	Branch  0x13b3, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002894	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002895	53 64 00 00 20 00	Wait    1605, Tc
002896	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
002897	43 00 00 00 20 00	Wait    4, Tc
002898	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002899	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
00289a	33 00 00 00 20 00	Wait    3, Tc
00289b	00 08 98 0c 05 00	Write   [0:0x3010] = a19
00289c	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00289d	00 08 18 ab 06 00	Write   [0:0x3010] = d56
00289e	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00289f	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0028a0	43 00 00 00 20 00	Wait    4, Tc
0028a1	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0028a2	43 00 00 00 20 00	Wait    4, Tc
0028a3	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0028a4	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0028a5	74 89 02 00 20 00	Branch  0x2897, [CALL] < IQCalTuneNco >
0028a6	00 08 98 ad 06 00	Write   [0:0x3010] = d5b
0028a7	74 3d 01 00 20 00	Branch  0x13d7, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0028a8	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0028a9	53 64 00 00 20 00	Wait    1605, Tc
0028aa	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0028ab	43 00 00 00 20 00	Wait    4, Tc
0028ac	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0028ad	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0028ae	33 00 00 00 20 00	Wait    3, Tc
0028af	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0028b0	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0028b1	00 08 98 af 06 00	Write   [0:0x3010] = d5f
0028b2	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0028b3	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0028b4	43 00 00 00 20 00	Wait    4, Tc
0028b5	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0028b6	43 00 00 00 20 00	Wait    4, Tc
0028b7	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0028b8	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0028b9	b4 8a 02 00 20 00	Branch  0x28ab, [CALL] < IQCalTuneNco >
0028ba	00 08 18 b2 06 00	Write   [0:0x3010] = d64
0028bb	b4 3f 01 00 20 00	Branch  0x13fb, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0028bc	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0028bd	53 64 00 00 20 00	Wait    1605, Tc
0028be	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0028bf	43 00 00 00 20 00	Wait    4, Tc
0028c0	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0028c1	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0028c2	33 00 00 00 20 00	Wait    3, Tc
0028c3	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0028c4	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0028c5	00 08 18 b4 06 00	Write   [0:0x3010] = d68
0028c6	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0028c7	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0028c8	43 00 00 00 20 00	Wait    4, Tc
0028c9	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0028ca	43 00 00 00 20 00	Wait    4, Tc
0028cb	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0028cc	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0028cd	f4 8b 02 00 20 00	Branch  0x28bf, [CALL] < IQCalTuneNco >
0028ce	00 08 98 b6 06 00	Write   [0:0x3010] = d6d
0028cf	f4 41 01 00 20 00	Branch  0x141f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0028d0	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0028d1	53 64 00 00 20 00	Wait    1605, Tc
0028d2	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0028d3	43 00 00 00 20 00	Wait    4, Tc
0028d4	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0028d5	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0028d6	33 00 00 00 20 00	Wait    3, Tc
0028d7	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0028d8	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0028d9	00 08 98 b8 06 00	Write   [0:0x3010] = d71
0028da	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0028db	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0028dc	43 00 00 00 20 00	Wait    4, Tc
0028dd	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0028de	43 00 00 00 20 00	Wait    4, Tc
0028df	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0028e0	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0028e1	34 8d 02 00 20 00	Branch  0x28d3, [CALL] < IQCalTuneNco >
0028e2	00 08 18 bb 06 00	Write   [0:0x3010] = d76
0028e3	34 44 01 00 20 00	Branch  0x1443, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0028e4	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0028e5	53 64 00 00 20 00	Wait    1605, Tc
0028e6	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0028e7	43 00 00 00 20 00	Wait    4, Tc
0028e8	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0028e9	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0028ea	33 00 00 00 20 00	Wait    3, Tc
0028eb	00 08 98 0c 05 00	Write   [0:0x3010] = a19
0028ec	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0028ed	00 08 18 bd 06 00	Write   [0:0x3010] = d7a
0028ee	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
0028ef	00 08 18 59 06 00	Write   [0:0x3010] = cb2
0028f0	43 00 00 00 20 00	Wait    4, Tc
0028f1	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0028f2	43 00 00 00 20 00	Wait    4, Tc
0028f3	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0028f4	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0028f5	74 8e 02 00 20 00	Branch  0x28e7, [CALL] < IQCalTuneNco >
0028f6	00 08 98 bf 06 00	Write   [0:0x3010] = d7f
0028f7	74 46 01 00 20 00	Branch  0x1467, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0028f8	00 08 18 27 05 00	Write   [0:0x3010] = a4e
0028f9	53 64 00 00 20 00	Wait    1605, Tc
0028fa	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
0028fb	43 00 00 00 20 00	Wait    4, Tc
0028fc	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
0028fd	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
0028fe	33 00 00 00 20 00	Wait    3, Tc
0028ff	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002900	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002901	00 08 98 c1 06 00	Write   [0:0x3010] = d83
002902	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002903	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002904	43 00 00 00 20 00	Wait    4, Tc
002905	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002906	43 00 00 00 20 00	Wait    4, Tc
002907	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002908	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002909	b4 8f 02 00 20 00	Branch  0x28fb, [CALL] < IQCalTuneNco >
00290a	00 08 18 c4 06 00	Write   [0:0x3010] = d88
00290b	b4 48 01 00 20 00	Branch  0x148b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00290c	00 08 18 27 05 00	Write   [0:0x3010] = a4e
00290d	53 64 00 00 20 00	Wait    1605, Tc
00290e	04 00 00 00 40 00	Branch  0x0, [RET]


IQCalTuneNco
00290f	43 00 00 00 20 00	Wait    4, Tc
002910	01 89 88 01 00 01	Copy    [0:1112] = [SF+0], SrcBase: AI
002911	81 89 88 01 00 01	Copy    [0:1113] = [SF+1], SrcBase: AI
002912	33 00 00 00 20 00	Wait    3, Tc
002913	00 08 98 0c 05 00	Write   [0:0x3010] = a19
002914	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002915	00 08 18 c6 06 00	Write   [0:0x3010] = d8c
002916	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
002917	00 08 18 59 06 00	Write   [0:0x3010] = cb2
002918	43 00 00 00 20 00	Wait    4, Tc
002919	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00291a	43 00 00 00 20 00	Wait    4, Tc
00291b	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00291c	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00291d	f4 90 02 00 20 00	Branch  0x290f, [CALL] < IQCalTuneNco >
00291e	00 08 98 c8 06 00	Write   [0:0x3010] = d91
00291f	f4 4a 01 00 20 00	Branch  0x14af, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002920	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002921	53 64 00 00 20 00	Wait    1605, Tc
002922	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002923	43 00 00 00 20 00	Wait    4, Tc
002924	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002925	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002926	f4 77 02 00 20 00	Branch  0x277f, [CALL] < IQCalTuneNco >
002927	00 08 98 ca 06 00	Write   [0:0x3010] = d95
002928	84 4c 01 00 20 00	Branch  0x14c8, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002929	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00292a	53 64 00 00 20 00	Wait    1605, Tc
00292b	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00292c	43 00 00 00 20 00	Wait    4, Tc
00292d	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00292e	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00292f	34 79 02 00 20 00	Branch  0x2793, [CALL] < IQCalTuneNco >
002930	00 08 98 cc 06 00	Write   [0:0x3010] = d99
002931	14 4e 01 00 20 00	Branch  0x14e1, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002932	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002933	53 64 00 00 20 00	Wait    1605, Tc
002934	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002935	43 00 00 00 20 00	Wait    4, Tc
002936	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002937	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002938	74 7a 02 00 20 00	Branch  0x27a7, [CALL] < IQCalTuneNco >
002939	00 08 98 ce 06 00	Write   [0:0x3010] = d9d
00293a	a4 4f 01 00 20 00	Branch  0x14fa, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00293b	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00293c	53 64 00 00 20 00	Wait    1605, Tc
00293d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00293e	43 00 00 00 20 00	Wait    4, Tc
00293f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002940	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002941	b4 7b 02 00 20 00	Branch  0x27bb, [CALL] < IQCalTuneNco >
002942	00 08 98 d0 06 00	Write   [0:0x3010] = da1
002943	34 51 01 00 20 00	Branch  0x1513, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002944	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002945	53 64 00 00 20 00	Wait    1605, Tc
002946	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002947	43 00 00 00 20 00	Wait    4, Tc
002948	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002949	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00294a	f4 7c 02 00 20 00	Branch  0x27cf, [CALL] < IQCalTuneNco >
00294b	00 08 98 d2 06 00	Write   [0:0x3010] = da5
00294c	c4 52 01 00 20 00	Branch  0x152c, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00294d	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00294e	53 64 00 00 20 00	Wait    1605, Tc
00294f	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002950	43 00 00 00 20 00	Wait    4, Tc
002951	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002952	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002953	34 7e 02 00 20 00	Branch  0x27e3, [CALL] < IQCalTuneNco >
002954	00 08 98 d4 06 00	Write   [0:0x3010] = da9
002955	54 54 01 00 20 00	Branch  0x1545, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002956	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002957	53 64 00 00 20 00	Wait    1605, Tc
002958	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002959	43 00 00 00 20 00	Wait    4, Tc
00295a	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00295b	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00295c	74 7f 02 00 20 00	Branch  0x27f7, [CALL] < IQCalTuneNco >
00295d	00 08 98 d6 06 00	Write   [0:0x3010] = dad
00295e	e4 55 01 00 20 00	Branch  0x155e, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00295f	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002960	53 64 00 00 20 00	Wait    1605, Tc
002961	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002962	43 00 00 00 20 00	Wait    4, Tc
002963	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002964	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002965	b4 80 02 00 20 00	Branch  0x280b, [CALL] < IQCalTuneNco >
002966	00 08 98 d8 06 00	Write   [0:0x3010] = db1
002967	74 57 01 00 20 00	Branch  0x1577, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002968	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002969	53 64 00 00 20 00	Wait    1605, Tc
00296a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00296b	43 00 00 00 20 00	Wait    4, Tc
00296c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00296d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00296e	f4 81 02 00 20 00	Branch  0x281f, [CALL] < IQCalTuneNco >
00296f	00 08 98 da 06 00	Write   [0:0x3010] = db5
002970	04 59 01 00 20 00	Branch  0x1590, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002971	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002972	53 64 00 00 20 00	Wait    1605, Tc
002973	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002974	43 00 00 00 20 00	Wait    4, Tc
002975	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002976	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002977	34 83 02 00 20 00	Branch  0x2833, [CALL] < IQCalTuneNco >
002978	00 08 98 dc 06 00	Write   [0:0x3010] = db9
002979	94 5a 01 00 20 00	Branch  0x15a9, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00297a	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00297b	53 64 00 00 20 00	Wait    1605, Tc
00297c	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00297d	43 00 00 00 20 00	Wait    4, Tc
00297e	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00297f	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002980	74 84 02 00 20 00	Branch  0x2847, [CALL] < IQCalTuneNco >
002981	00 08 98 de 06 00	Write   [0:0x3010] = dbd
002982	24 5c 01 00 20 00	Branch  0x15c2, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002983	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002984	53 64 00 00 20 00	Wait    1605, Tc
002985	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002986	43 00 00 00 20 00	Wait    4, Tc
002987	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002988	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002989	b4 85 02 00 20 00	Branch  0x285b, [CALL] < IQCalTuneNco >
00298a	00 08 98 e0 06 00	Write   [0:0x3010] = dc1
00298b	b4 5d 01 00 20 00	Branch  0x15db, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00298c	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00298d	53 64 00 00 20 00	Wait    1605, Tc
00298e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
00298f	43 00 00 00 20 00	Wait    4, Tc
002990	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002991	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002992	f4 86 02 00 20 00	Branch  0x286f, [CALL] < IQCalTuneNco >
002993	00 08 98 e2 06 00	Write   [0:0x3010] = dc5
002994	44 5f 01 00 20 00	Branch  0x15f4, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002995	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002996	53 64 00 00 20 00	Wait    1605, Tc
002997	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002998	43 00 00 00 20 00	Wait    4, Tc
002999	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
00299a	00 08 18 58 06 00	Write   [0:0x3010] = cb0
00299b	34 88 02 00 20 00	Branch  0x2883, [CALL] < IQCalTuneNco >
00299c	00 08 98 e4 06 00	Write   [0:0x3010] = dc9
00299d	d4 60 01 00 20 00	Branch  0x160d, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
00299e	00 08 18 3c 05 00	Write   [0:0x3010] = a78
00299f	53 64 00 00 20 00	Wait    1605, Tc
0029a0	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029a1	43 00 00 00 20 00	Wait    4, Tc
0029a2	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029a3	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029a4	74 89 02 00 20 00	Branch  0x2897, [CALL] < IQCalTuneNco >
0029a5	00 08 98 e6 06 00	Write   [0:0x3010] = dcd
0029a6	64 62 01 00 20 00	Branch  0x1626, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029a7	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0029a8	53 64 00 00 20 00	Wait    1605, Tc
0029a9	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029aa	43 00 00 00 20 00	Wait    4, Tc
0029ab	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029ac	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029ad	b4 8a 02 00 20 00	Branch  0x28ab, [CALL] < IQCalTuneNco >
0029ae	00 08 98 e8 06 00	Write   [0:0x3010] = dd1
0029af	f4 63 01 00 20 00	Branch  0x163f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029b0	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0029b1	53 64 00 00 20 00	Wait    1605, Tc
0029b2	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029b3	43 00 00 00 20 00	Wait    4, Tc
0029b4	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029b5	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029b6	f4 8b 02 00 20 00	Branch  0x28bf, [CALL] < IQCalTuneNco >
0029b7	00 08 98 ea 06 00	Write   [0:0x3010] = dd5
0029b8	84 65 01 00 20 00	Branch  0x1658, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029b9	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0029ba	53 64 00 00 20 00	Wait    1605, Tc
0029bb	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029bc	43 00 00 00 20 00	Wait    4, Tc
0029bd	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029be	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029bf	34 8d 02 00 20 00	Branch  0x28d3, [CALL] < IQCalTuneNco >
0029c0	00 08 98 ec 06 00	Write   [0:0x3010] = dd9
0029c1	14 67 01 00 20 00	Branch  0x1671, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029c2	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0029c3	53 64 00 00 20 00	Wait    1605, Tc
0029c4	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029c5	43 00 00 00 20 00	Wait    4, Tc
0029c6	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029c7	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029c8	74 8e 02 00 20 00	Branch  0x28e7, [CALL] < IQCalTuneNco >
0029c9	00 08 98 ee 06 00	Write   [0:0x3010] = ddd
0029ca	a4 68 01 00 20 00	Branch  0x168a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029cb	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0029cc	53 64 00 00 20 00	Wait    1605, Tc
0029cd	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029ce	43 00 00 00 20 00	Wait    4, Tc
0029cf	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029d0	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029d1	b4 8f 02 00 20 00	Branch  0x28fb, [CALL] < IQCalTuneNco >
0029d2	00 08 98 f0 06 00	Write   [0:0x3010] = de1
0029d3	34 6a 01 00 20 00	Branch  0x16a3, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029d4	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0029d5	53 64 00 00 20 00	Wait    1605, Tc
0029d6	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029d7	43 00 00 00 20 00	Wait    4, Tc
0029d8	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029d9	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029da	f4 90 02 00 20 00	Branch  0x290f, [CALL] < IQCalTuneNco >
0029db	00 08 98 f2 06 00	Write   [0:0x3010] = de5
0029dc	c4 6b 01 00 20 00	Branch  0x16bc, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029dd	00 08 18 3c 05 00	Write   [0:0x3010] = a78
0029de	53 64 00 00 20 00	Wait    1605, Tc
0029df	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029e0	43 00 00 00 20 00	Wait    4, Tc
0029e1	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029e2	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029e3	f4 77 02 00 20 00	Branch  0x277f, [CALL] < IQCalTuneNco >
0029e4	00 08 98 f4 06 00	Write   [0:0x3010] = de9
0029e5	54 6d 01 00 20 00	Branch  0x16d5, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029e6	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0029e7	53 64 00 00 20 00	Wait    1605, Tc
0029e8	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029e9	43 00 00 00 20 00	Wait    4, Tc
0029ea	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029eb	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029ec	34 79 02 00 20 00	Branch  0x2793, [CALL] < IQCalTuneNco >
0029ed	00 08 98 f6 06 00	Write   [0:0x3010] = ded
0029ee	e4 6e 01 00 20 00	Branch  0x16ee, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029ef	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0029f0	53 64 00 00 20 00	Wait    1605, Tc
0029f1	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029f2	43 00 00 00 20 00	Wait    4, Tc
0029f3	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029f4	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029f5	74 7a 02 00 20 00	Branch  0x27a7, [CALL] < IQCalTuneNco >
0029f6	00 08 98 f8 06 00	Write   [0:0x3010] = df1
0029f7	74 70 01 00 20 00	Branch  0x1707, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
0029f8	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0029f9	53 64 00 00 20 00	Wait    1605, Tc
0029fa	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
0029fb	43 00 00 00 20 00	Wait    4, Tc
0029fc	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
0029fd	00 08 18 58 06 00	Write   [0:0x3010] = cb0
0029fe	b4 7b 02 00 20 00	Branch  0x27bb, [CALL] < IQCalTuneNco >
0029ff	00 08 98 fa 06 00	Write   [0:0x3010] = df5
002a00	04 72 01 00 20 00	Branch  0x1720, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a01	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a02	53 64 00 00 20 00	Wait    1605, Tc
002a03	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a04	43 00 00 00 20 00	Wait    4, Tc
002a05	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a06	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a07	f4 7c 02 00 20 00	Branch  0x27cf, [CALL] < IQCalTuneNco >
002a08	00 08 98 fc 06 00	Write   [0:0x3010] = df9
002a09	94 73 01 00 20 00	Branch  0x1739, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a0a	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a0b	53 64 00 00 20 00	Wait    1605, Tc
002a0c	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a0d	43 00 00 00 20 00	Wait    4, Tc
002a0e	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a0f	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a10	34 7e 02 00 20 00	Branch  0x27e3, [CALL] < IQCalTuneNco >
002a11	00 08 98 fe 06 00	Write   [0:0x3010] = dfd
002a12	24 75 01 00 20 00	Branch  0x1752, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a13	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a14	53 64 00 00 20 00	Wait    1605, Tc
002a15	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a16	43 00 00 00 20 00	Wait    4, Tc
002a17	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a18	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a19	74 7f 02 00 20 00	Branch  0x27f7, [CALL] < IQCalTuneNco >
002a1a	00 08 98 00 07 00	Write   [0:0x3010] = e01
002a1b	b4 76 01 00 20 00	Branch  0x176b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a1c	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a1d	53 64 00 00 20 00	Wait    1605, Tc
002a1e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a1f	43 00 00 00 20 00	Wait    4, Tc
002a20	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a21	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a22	b4 80 02 00 20 00	Branch  0x280b, [CALL] < IQCalTuneNco >
002a23	00 08 98 02 07 00	Write   [0:0x3010] = e05
002a24	44 78 01 00 20 00	Branch  0x1784, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a25	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a26	53 64 00 00 20 00	Wait    1605, Tc
002a27	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a28	43 00 00 00 20 00	Wait    4, Tc
002a29	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a2a	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a2b	f4 81 02 00 20 00	Branch  0x281f, [CALL] < IQCalTuneNco >
002a2c	00 08 98 04 07 00	Write   [0:0x3010] = e09
002a2d	d4 79 01 00 20 00	Branch  0x179d, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a2e	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a2f	53 64 00 00 20 00	Wait    1605, Tc
002a30	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a31	43 00 00 00 20 00	Wait    4, Tc
002a32	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a33	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a34	34 83 02 00 20 00	Branch  0x2833, [CALL] < IQCalTuneNco >
002a35	00 08 98 06 07 00	Write   [0:0x3010] = e0d
002a36	64 7b 01 00 20 00	Branch  0x17b6, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a37	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a38	53 64 00 00 20 00	Wait    1605, Tc
002a39	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a3a	43 00 00 00 20 00	Wait    4, Tc
002a3b	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a3c	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a3d	74 84 02 00 20 00	Branch  0x2847, [CALL] < IQCalTuneNco >
002a3e	00 08 98 08 07 00	Write   [0:0x3010] = e11
002a3f	f4 7c 01 00 20 00	Branch  0x17cf, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a40	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a41	53 64 00 00 20 00	Wait    1605, Tc
002a42	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a43	43 00 00 00 20 00	Wait    4, Tc
002a44	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a45	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a46	b4 85 02 00 20 00	Branch  0x285b, [CALL] < IQCalTuneNco >
002a47	00 08 98 0a 07 00	Write   [0:0x3010] = e15
002a48	84 7e 01 00 20 00	Branch  0x17e8, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a49	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a4a	53 64 00 00 20 00	Wait    1605, Tc
002a4b	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a4c	43 00 00 00 20 00	Wait    4, Tc
002a4d	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a4e	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a4f	f4 86 02 00 20 00	Branch  0x286f, [CALL] < IQCalTuneNco >
002a50	00 08 98 0c 07 00	Write   [0:0x3010] = e19
002a51	14 80 01 00 20 00	Branch  0x1801, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a52	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a53	53 64 00 00 20 00	Wait    1605, Tc
002a54	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a55	43 00 00 00 20 00	Wait    4, Tc
002a56	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a57	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a58	34 88 02 00 20 00	Branch  0x2883, [CALL] < IQCalTuneNco >
002a59	00 08 98 0e 07 00	Write   [0:0x3010] = e1d
002a5a	a4 81 01 00 20 00	Branch  0x181a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a5b	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a5c	53 64 00 00 20 00	Wait    1605, Tc
002a5d	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a5e	43 00 00 00 20 00	Wait    4, Tc
002a5f	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a60	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a61	74 89 02 00 20 00	Branch  0x2897, [CALL] < IQCalTuneNco >
002a62	00 08 98 10 07 00	Write   [0:0x3010] = e21
002a63	34 83 01 00 20 00	Branch  0x1833, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a64	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a65	53 64 00 00 20 00	Wait    1605, Tc
002a66	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a67	43 00 00 00 20 00	Wait    4, Tc
002a68	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a69	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a6a	b4 8a 02 00 20 00	Branch  0x28ab, [CALL] < IQCalTuneNco >
002a6b	00 08 98 12 07 00	Write   [0:0x3010] = e25
002a6c	c4 84 01 00 20 00	Branch  0x184c, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a6d	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a6e	53 64 00 00 20 00	Wait    1605, Tc
002a6f	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a70	43 00 00 00 20 00	Wait    4, Tc
002a71	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a72	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a73	f4 8b 02 00 20 00	Branch  0x28bf, [CALL] < IQCalTuneNco >
002a74	00 08 98 14 07 00	Write   [0:0x3010] = e29
002a75	54 86 01 00 20 00	Branch  0x1865, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a76	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a77	53 64 00 00 20 00	Wait    1605, Tc
002a78	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a79	43 00 00 00 20 00	Wait    4, Tc
002a7a	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a7b	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a7c	34 8d 02 00 20 00	Branch  0x28d3, [CALL] < IQCalTuneNco >
002a7d	00 08 98 16 07 00	Write   [0:0x3010] = e2d
002a7e	e4 87 01 00 20 00	Branch  0x187e, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a7f	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a80	53 64 00 00 20 00	Wait    1605, Tc
002a81	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a82	43 00 00 00 20 00	Wait    4, Tc
002a83	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a84	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a85	74 8e 02 00 20 00	Branch  0x28e7, [CALL] < IQCalTuneNco >
002a86	00 08 98 18 07 00	Write   [0:0x3010] = e31
002a87	74 89 01 00 20 00	Branch  0x1897, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a88	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a89	53 64 00 00 20 00	Wait    1605, Tc
002a8a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a8b	43 00 00 00 20 00	Wait    4, Tc
002a8c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a8d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a8e	b4 8f 02 00 20 00	Branch  0x28fb, [CALL] < IQCalTuneNco >
002a8f	00 08 98 1a 07 00	Write   [0:0x3010] = e35
002a90	04 8b 01 00 20 00	Branch  0x18b0, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a91	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a92	53 64 00 00 20 00	Wait    1605, Tc
002a93	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a94	43 00 00 00 20 00	Wait    4, Tc
002a95	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a96	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002a97	f4 90 02 00 20 00	Branch  0x290f, [CALL] < IQCalTuneNco >
002a98	00 08 98 1c 07 00	Write   [0:0x3010] = e39
002a99	94 8c 01 00 20 00	Branch  0x18c9, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002a9a	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002a9b	53 64 00 00 20 00	Wait    1605, Tc
002a9c	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002a9d	43 00 00 00 20 00	Wait    4, Tc
002a9e	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002a9f	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002aa0	f4 77 02 00 20 00	Branch  0x277f, [CALL] < IQCalTuneNco >
002aa1	00 08 98 1e 07 00	Write   [0:0x3010] = e3d
002aa2	24 8e 01 00 20 00	Branch  0x18e2, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002aa3	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002aa4	53 64 00 00 20 00	Wait    1605, Tc
002aa5	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002aa6	43 00 00 00 20 00	Wait    4, Tc
002aa7	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002aa8	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002aa9	34 79 02 00 20 00	Branch  0x2793, [CALL] < IQCalTuneNco >
002aaa	00 08 98 20 07 00	Write   [0:0x3010] = e41
002aab	b4 8f 01 00 20 00	Branch  0x18fb, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002aac	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002aad	53 64 00 00 20 00	Wait    1605, Tc
002aae	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002aaf	43 00 00 00 20 00	Wait    4, Tc
002ab0	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002ab1	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002ab2	74 7a 02 00 20 00	Branch  0x27a7, [CALL] < IQCalTuneNco >
002ab3	00 08 98 22 07 00	Write   [0:0x3010] = e45
002ab4	44 91 01 00 20 00	Branch  0x1914, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002ab5	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002ab6	53 64 00 00 20 00	Wait    1605, Tc
002ab7	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002ab8	43 00 00 00 20 00	Wait    4, Tc
002ab9	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002aba	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002abb	b4 7b 02 00 20 00	Branch  0x27bb, [CALL] < IQCalTuneNco >
002abc	00 08 98 24 07 00	Write   [0:0x3010] = e49
002abd	d4 92 01 00 20 00	Branch  0x192d, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002abe	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002abf	53 64 00 00 20 00	Wait    1605, Tc
002ac0	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002ac1	43 00 00 00 20 00	Wait    4, Tc
002ac2	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002ac3	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002ac4	f4 7c 02 00 20 00	Branch  0x27cf, [CALL] < IQCalTuneNco >
002ac5	00 08 98 26 07 00	Write   [0:0x3010] = e4d
002ac6	64 94 01 00 20 00	Branch  0x1946, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002ac7	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002ac8	53 64 00 00 20 00	Wait    1605, Tc
002ac9	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002aca	43 00 00 00 20 00	Wait    4, Tc
002acb	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002acc	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002acd	34 7e 02 00 20 00	Branch  0x27e3, [CALL] < IQCalTuneNco >
002ace	00 08 98 28 07 00	Write   [0:0x3010] = e51
002acf	f4 95 01 00 20 00	Branch  0x195f, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002ad0	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002ad1	53 64 00 00 20 00	Wait    1605, Tc
002ad2	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002ad3	43 00 00 00 20 00	Wait    4, Tc
002ad4	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002ad5	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002ad6	74 7f 02 00 20 00	Branch  0x27f7, [CALL] < IQCalTuneNco >
002ad7	00 08 98 2a 07 00	Write   [0:0x3010] = e55
002ad8	84 97 01 00 20 00	Branch  0x1978, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002ad9	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002ada	53 64 00 00 20 00	Wait    1605, Tc
002adb	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002adc	43 00 00 00 20 00	Wait    4, Tc
002add	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002ade	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002adf	b4 80 02 00 20 00	Branch  0x280b, [CALL] < IQCalTuneNco >
002ae0	00 08 98 2c 07 00	Write   [0:0x3010] = e59
002ae1	14 99 01 00 20 00	Branch  0x1991, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002ae2	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002ae3	53 64 00 00 20 00	Wait    1605, Tc
002ae4	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002ae5	43 00 00 00 20 00	Wait    4, Tc
002ae6	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002ae7	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002ae8	f4 81 02 00 20 00	Branch  0x281f, [CALL] < IQCalTuneNco >
002ae9	00 08 98 2e 07 00	Write   [0:0x3010] = e5d
002aea	a4 9a 01 00 20 00	Branch  0x19aa, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002aeb	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002aec	53 64 00 00 20 00	Wait    1605, Tc
002aed	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002aee	43 00 00 00 20 00	Wait    4, Tc
002aef	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002af0	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002af1	34 83 02 00 20 00	Branch  0x2833, [CALL] < IQCalTuneNco >
002af2	00 08 98 30 07 00	Write   [0:0x3010] = e61
002af3	34 9c 01 00 20 00	Branch  0x19c3, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002af4	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002af5	53 64 00 00 20 00	Wait    1605, Tc
002af6	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002af7	43 00 00 00 20 00	Wait    4, Tc
002af8	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002af9	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002afa	74 84 02 00 20 00	Branch  0x2847, [CALL] < IQCalTuneNco >
002afb	00 08 98 32 07 00	Write   [0:0x3010] = e65
002afc	c4 9d 01 00 20 00	Branch  0x19dc, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002afd	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002afe	53 64 00 00 20 00	Wait    1605, Tc
002aff	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b00	43 00 00 00 20 00	Wait    4, Tc
002b01	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b02	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b03	b4 85 02 00 20 00	Branch  0x285b, [CALL] < IQCalTuneNco >
002b04	00 08 98 34 07 00	Write   [0:0x3010] = e69
002b05	54 9f 01 00 20 00	Branch  0x19f5, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b06	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b07	53 64 00 00 20 00	Wait    1605, Tc
002b08	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b09	43 00 00 00 20 00	Wait    4, Tc
002b0a	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b0b	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b0c	f4 86 02 00 20 00	Branch  0x286f, [CALL] < IQCalTuneNco >
002b0d	00 08 98 36 07 00	Write   [0:0x3010] = e6d
002b0e	e4 a0 01 00 20 00	Branch  0x1a0e, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b0f	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b10	53 64 00 00 20 00	Wait    1605, Tc
002b11	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b12	43 00 00 00 20 00	Wait    4, Tc
002b13	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b14	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b15	34 88 02 00 20 00	Branch  0x2883, [CALL] < IQCalTuneNco >
002b16	00 08 98 38 07 00	Write   [0:0x3010] = e71
002b17	74 a2 01 00 20 00	Branch  0x1a27, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b18	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b19	53 64 00 00 20 00	Wait    1605, Tc
002b1a	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b1b	43 00 00 00 20 00	Wait    4, Tc
002b1c	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b1d	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b1e	74 89 02 00 20 00	Branch  0x2897, [CALL] < IQCalTuneNco >
002b1f	00 08 98 3a 07 00	Write   [0:0x3010] = e75
002b20	04 a4 01 00 20 00	Branch  0x1a40, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b21	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b22	53 64 00 00 20 00	Wait    1605, Tc
002b23	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b24	43 00 00 00 20 00	Wait    4, Tc
002b25	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b26	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b27	b4 8a 02 00 20 00	Branch  0x28ab, [CALL] < IQCalTuneNco >
002b28	00 08 98 3c 07 00	Write   [0:0x3010] = e79
002b29	94 a5 01 00 20 00	Branch  0x1a59, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b2a	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b2b	53 64 00 00 20 00	Wait    1605, Tc
002b2c	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b2d	43 00 00 00 20 00	Wait    4, Tc
002b2e	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b2f	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b30	f4 8b 02 00 20 00	Branch  0x28bf, [CALL] < IQCalTuneNco >
002b31	00 08 98 3e 07 00	Write   [0:0x3010] = e7d
002b32	24 a7 01 00 20 00	Branch  0x1a72, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b33	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b34	53 64 00 00 20 00	Wait    1605, Tc
002b35	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b36	43 00 00 00 20 00	Wait    4, Tc
002b37	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b38	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b39	34 8d 02 00 20 00	Branch  0x28d3, [CALL] < IQCalTuneNco >
002b3a	00 08 98 40 07 00	Write   [0:0x3010] = e81
002b3b	b4 a8 01 00 20 00	Branch  0x1a8b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b3c	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b3d	53 64 00 00 20 00	Wait    1605, Tc
002b3e	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b3f	43 00 00 00 20 00	Wait    4, Tc
002b40	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b41	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b42	74 8e 02 00 20 00	Branch  0x28e7, [CALL] < IQCalTuneNco >
002b43	00 08 98 42 07 00	Write   [0:0x3010] = e85
002b44	44 aa 01 00 20 00	Branch  0x1aa4, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b45	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b46	53 64 00 00 20 00	Wait    1605, Tc
002b47	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b48	43 00 00 00 20 00	Wait    4, Tc
002b49	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b4a	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b4b	b4 8f 02 00 20 00	Branch  0x28fb, [CALL] < IQCalTuneNco >
002b4c	00 08 98 44 07 00	Write   [0:0x3010] = e89
002b4d	d4 ab 01 00 20 00	Branch  0x1abd, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b4e	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b4f	53 64 00 00 20 00	Wait    1605, Tc
002b50	04 00 00 00 40 00	Branch  0x0, [RET]


_IQTuneFreq_
002b51	43 00 00 00 20 00	Wait    4, Tc
002b52	91 16 80 01 00 01	Copy    [1:002d] = [SF+0], SrcBase: AI
002b53	00 08 18 58 06 00	Write   [0:0x3010] = cb0
002b54	f4 90 02 00 20 00	Branch  0x290f, [CALL] < IQCalTuneNco >
002b55	00 08 98 46 07 00	Write   [0:0x3010] = e8d
002b56	64 ad 01 00 20 00	Branch  0x1ad6, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetLoFrequency(double [],bool,bool,bool,unsigned __int64) >
002b57	00 08 18 68 06 00	Write   [0:0x3010] = cd0
002b58	53 64 00 00 20 00	Wait    1605, Tc
002b59	04 00 00 00 40 00	Branch  0x0, [RET]


TuneFreq_SwitchCase_LO_1
002b5a	43 00 00 00 20 00	Wait    4, Tc
002b5b	01 70 98 42 12 00	Copy    [0:30e0] = [1:0921]		# TuneFreq_SwitchCase_LO_1_ParentOfIndirect
002b5c	00 71 18 01 00 00	Write   [0:0x30e2] = 2
002b5d	43 00 00 00 20 00	Wait    4, Tc
002b5e	91 81 04 d0 61 00	Copy    [1:0903] = [0:30e8]
002b5f	01 70 18 20 60 00	Copy    [0:30e0] = [0:3010]
002b60	43 00 00 00 20 00	Wait    4, Tc
002b61	01 71 98 06 12 00	Copy    [0:30e2] = [1:0903]
002b62	43 00 00 00 20 00	Wait    4, Tc
002b63	01 08 18 c8 61 00	Copy    [0:3010] = [0:30e4]
002b64	64 00 00 00 20 00	Branch  0x6, [CALL]
002b65	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateSpurFunc
002b66	43 00 00 00 20 00	Wait    4, Tc
002b67	11 9f 84 01 00 01	Copy    [1:093e] = [SF+0], SrcBase: AI
002b68	00 08 98 7b 07 00	Write   [0:0x3010] = ef7
002b69	a4 b5 02 00 20 00	Branch  0x2b5a, [CALL] < TuneFreq_SwitchCase_LO_1 >
002b6a	00 08 98 4a 07 00	Write   [0:0x3010] = e95
002b6b	43 00 00 00 20 00	Wait    4, Tc
002b6c	d4 bb 01 00 20 00	Branch  0x1bbd, [CALL] < Calibrate_calibrateSpurFunc_sub_4 >
002b6d	53 00 00 00 20 00	Wait    5, Tc
002b6e	01 48 98 48 12 00	Copy    [0:3090] = [1:0924]
002b6f	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
002b70	93 00 00 00 20 00	Wait    9, Tc
002b71	02 00 00 01 00 00	Cond    0x00100000

002b72	34 b9 02 00 90 00	Branch  0x2b93, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002b73	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002b74	34 bc 01 00 20 00	Branch  0x1bc3, [CALL] < __If_38_WaitForFirstFreqBug >
002b75	00 08 98 4b 07 00	Write   [0:0x3010] = e97
002b76	43 00 00 00 20 00	Wait    4, Tc
002b77	34 b9 02 00 00 00	Branch  0x2b93, [JMP]
002b78	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002b79	14 bf 01 00 20 00	Branch  0x1bf1, [CALL] < SetStageSpurSelector >
002b7a	00 08 98 4b 07 00	Write   [0:0x3010] = e97
002b7b	43 00 00 00 20 00	Wait    4, Tc
002b7c	91 a0 84 01 00 01	Copy    [1:0941] = [SF+2], SrcBase: AI
002b7d	24 f2 01 00 20 00	Branch  0x1f22, [CALL] < _Loop_SearchIQ_I >
002b7e	00 08 18 4c 07 00	Write   [0:0x3010] = e98
002b7f	43 00 00 00 20 00	Wait    4, Tc
002b80	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateSpurFunc
002b81	43 00 00 00 20 00	Wait    4, Tc
002b82	11 9f 84 01 00 01	Copy    [1:093e] = [SF+0], SrcBase: AI
002b83	00 08 98 7b 07 00	Write   [0:0x3010] = ef7
002b84	a4 b5 02 00 20 00	Branch  0x2b5a, [CALL] < TuneFreq_SwitchCase_LO_1 >
002b85	00 08 98 62 07 00	Write   [0:0x3010] = ec5
002b86	43 00 00 00 20 00	Wait    4, Tc
002b87	d4 bb 01 00 20 00	Branch  0x1bbd, [CALL] < Calibrate_calibrateSpurFunc_sub_4 >
002b88	53 00 00 00 20 00	Wait    5, Tc		# If_290
002b89	01 48 98 48 12 00	Copy    [0:3090] = [1:0924]
002b8a	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
002b8b	93 00 00 00 20 00	Wait    9, Tc
002b8c	02 00 00 01 00 00	Cond    0x00100000

002b8d	34 b9 02 00 90 00	Branch  0x2b93, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002b8e	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002b8f	34 bc 01 00 20 00	Branch  0x1bc3, [CALL] < __If_38_WaitForFirstFreqBug >
002b90	00 08 98 63 07 00	Write   [0:0x3010] = ec7
002b91	43 00 00 00 20 00	Wait    4, Tc
002b92	34 b9 02 00 00 00	Branch  0x2b93, [JMP]
002b93	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_290
002b94	14 bf 01 00 20 00	Branch  0x1bf1, [CALL] < SetStageSpurSelector >
002b95	00 08 98 63 07 00	Write   [0:0x3010] = ec7
002b96	43 00 00 00 20 00	Wait    4, Tc
002b97	91 a0 84 01 00 01	Copy    [1:0941] = [SF+2], SrcBase: AI
002b98	24 f2 01 00 20 00	Branch  0x1f22, [CALL] < _Loop_SearchIQ_I >
002b99	00 08 18 64 07 00	Write   [0:0x3010] = ec8
002b9a	43 00 00 00 20 00	Wait    4, Tc
002b9b	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateStageFunc
002b9c	43 00 00 00 20 00	Wait    4, Tc
002b9d	74 bb 01 00 20 00	Branch  0x1bb7, [CALL] < Calibrate_calibrateStageFunc_sub_8 >
002b9e	00 08 18 4a 07 00	Write   [0:0x3010] = e94
002b9f	64 b6 02 00 20 00	Branch  0x2b66, [CALL] < Calibrate_calibrateSpurFunc >
002ba0	00 08 18 62 07 00	Write   [0:0x3010] = ec4
002ba1	14 b8 02 00 20 00	Branch  0x2b81, [CALL] < Calibrate_calibrateSpurFunc >
002ba2	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002ba3	43 00 00 00 20 00	Wait    4, Tc
002ba4	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateStageFunc
002ba5	43 00 00 00 20 00	Wait    4, Tc
002ba6	74 bb 01 00 20 00	Branch  0x1bb7, [CALL] < Calibrate_calibrateStageFunc_sub_8 >
002ba7	00 08 18 4a 07 00	Write   [0:0x3010] = e94
002ba8	64 b6 02 00 20 00	Branch  0x2b66, [CALL] < Calibrate_calibrateSpurFunc >
002ba9	00 08 18 62 07 00	Write   [0:0x3010] = ec4
002baa	14 b8 02 00 20 00	Branch  0x2b81, [CALL] < Calibrate_calibrateSpurFunc >
002bab	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002bac	43 00 00 00 20 00	Wait    4, Tc
002bad	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_LO Calibration - RX_LO
002bae	43 00 00 00 20 00	Wait    4, Tc
002baf	11 b5 04 20 60 00	Copy    [1:096a] = [0:3010]		# While_11_Func_Start
002bb0	53 00 00 00 20 00	Wait    5, Tc
002bb1	01 08 98 d4 12 00	Copy    [0:3010] = [1:096a]		# While_11
002bb2	01 4c 98 4a 12 00	Copy    [0:3098] = [1:0925]
002bb3	33 00 00 00 20 00	Wait    3, Tc
002bb4	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002bb5	33 00 00 00 20 00	Wait    3, Tc
002bb6	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002bb7	53 00 00 00 20 00	Wait    5, Tc
002bb8	02 00 08 00 00 00	Cond    0x00008000

002bb9	24 bd 02 00 10 00	Branch  0x2bd2, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002bba	24 b9 01 00 20 00	Branch  0x1b92, [CALL] < ResetIQVariables >
002bbb	00 08 98 49 07 00	Write   [0:0x3010] = e93
002bbc	43 00 00 00 20 00	Wait    4, Tc
002bbd	64 ba 01 00 20 00	Branch  0x1ba6, [CALL] < ResetPowerAccumVariables >
002bbe	00 08 98 49 07 00	Write   [0:0x3010] = e93
002bbf	93 00 00 00 20 00	Wait    9, Tc
002bc0	11 9c 84 42 12 00	Copy    [1:0938] = [1:0921]
002bc1	43 00 00 00 20 00	Wait    4, Tc
002bc2	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002bc3	c4 b9 02 00 20 00	Branch  0x2b9c, [CALL] < Calibrate_calibrateStageFunc >
002bc4	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002bc5	54 ba 02 00 20 00	Branch  0x2ba5, [CALL] < Calibrate_calibrateStageFunc >
002bc6	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002bc7	e4 08 02 00 20 00	Branch  0x208e, [CALL] < SaveCalibrationResult >
002bc8	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002bc9	14 61 02 00 20 00	Branch  0x2611, [CALL] < UpdateLoIqCalCoeffMinMax >
002bca	00 08 98 49 07 00	Write   [0:0x3010] = e93
002bcb	43 00 00 00 20 00	Wait    4, Tc
002bcc	01 48 98 4a 12 00	Copy    [0:3090] = [1:0925]
002bcd	81 48 98 01 00 01	Copy    [0:3091] = [SF+2], SrcBase: AI
002bce	93 00 00 00 20 00	Wait    9, Tc
002bcf	91 92 04 20 61 00	Copy    [1:0925] = [0:3090]
002bd0	53 00 00 00 20 00	Wait    5, Tc
002bd1	14 bb 02 00 00 00	Branch  0x2bb1, [JMP]
002bd2	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_11

Calibrate_calibrateStageFunc
002bd3	43 00 00 00 20 00	Wait    4, Tc
002bd4	54 64 02 00 20 00	Branch  0x2645, [CALL] < Calibrate_calibrateStageFunc_sub_9 >
002bd5	00 08 18 62 07 00	Write   [0:0x3010] = ec4
002bd6	14 b8 02 00 20 00	Branch  0x2b81, [CALL] < Calibrate_calibrateSpurFunc >
002bd7	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002bd8	43 00 00 00 20 00	Wait    4, Tc
002bd9	04 00 00 00 40 00	Branch  0x0, [RET]


Calibrate_calibrateStageFunc
002bda	43 00 00 00 20 00	Wait    4, Tc
002bdb	54 64 02 00 20 00	Branch  0x2645, [CALL] < Calibrate_calibrateStageFunc_sub_9 >
002bdc	00 08 18 62 07 00	Write   [0:0x3010] = ec4
002bdd	14 b8 02 00 20 00	Branch  0x2b81, [CALL] < Calibrate_calibrateSpurFunc >
002bde	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002bdf	43 00 00 00 20 00	Wait    4, Tc
002be0	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_IQ Calibration - RX_LO
002be1	43 00 00 00 20 00	Wait    4, Tc
002be2	91 b5 04 20 60 00	Copy    [1:096b] = [0:3010]		# While_12_Func_Start
002be3	53 00 00 00 20 00	Wait    5, Tc
002be4	01 08 98 d6 12 00	Copy    [0:3010] = [1:096b]		# While_12
002be5	01 4c 98 4a 12 00	Copy    [0:3098] = [1:0925]
002be6	33 00 00 00 20 00	Wait    3, Tc
002be7	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002be8	33 00 00 00 20 00	Wait    3, Tc
002be9	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002bea	53 00 00 00 20 00	Wait    5, Tc
002beb	02 00 08 00 00 00	Cond    0x00008000

002bec	54 c0 02 00 10 00	Branch  0x2c05, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002bed	24 b9 01 00 20 00	Branch  0x1b92, [CALL] < ResetIQVariables >
002bee	00 08 98 76 07 00	Write   [0:0x3010] = eed
002bef	43 00 00 00 20 00	Wait    4, Tc
002bf0	64 ba 01 00 20 00	Branch  0x1ba6, [CALL] < ResetPowerAccumVariables >
002bf1	00 08 98 76 07 00	Write   [0:0x3010] = eed
002bf2	93 00 00 00 20 00	Wait    9, Tc
002bf3	11 9c 84 42 12 00	Copy    [1:0938] = [1:0921]
002bf4	43 00 00 00 20 00	Wait    4, Tc
002bf5	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002bf6	34 bd 02 00 20 00	Branch  0x2bd3, [CALL] < Calibrate_calibrateStageFunc >
002bf7	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002bf8	a4 bd 02 00 20 00	Branch  0x2bda, [CALL] < Calibrate_calibrateStageFunc >
002bf9	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002bfa	e4 08 02 00 20 00	Branch  0x208e, [CALL] < SaveCalibrationResult >
002bfb	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002bfc	14 61 02 00 20 00	Branch  0x2611, [CALL] < UpdateLoIqCalCoeffMinMax >
002bfd	00 08 98 76 07 00	Write   [0:0x3010] = eed
002bfe	43 00 00 00 20 00	Wait    4, Tc
002bff	01 48 98 4a 12 00	Copy    [0:3090] = [1:0925]
002c00	81 48 98 01 00 01	Copy    [0:3091] = [SF+2], SrcBase: AI
002c01	93 00 00 00 20 00	Wait    9, Tc
002c02	91 92 04 20 61 00	Copy    [1:0925] = [0:3090]
002c03	53 00 00 00 20 00	Wait    5, Tc
002c04	44 be 02 00 00 00	Branch  0x2be4, [JMP]
002c05	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_12

loToCalibrate_innerLoop
002c06	24 b1 01 00 20 00	Branch  0x1b12, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002c07	94 b1 01 00 20 00	Branch  0x1b19, [CALL] < Vayyar::SequencerMemoryAccessCentipede::CopyToDsp(const class ILParamShort &,const class ILParamShort &) >
002c08	10 91 84 00 00 00	Write   [1:0x0922] = 1
002c09	10 11 00 4c 04 00	Write   [1:0x0022] = 898
002c0a	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
002c0b	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
002c0c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
002c0d	80 09 18 00 00 00	Write   [0:0x3013] = 0
002c0e	43 00 00 00 20 00	Wait    4, Tc
002c0f	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
002c10	b3 00 00 00 20 00	Wait    11, Tc
002c11	90 90 04 00 00 00	Write   [1:0x0921] = 0
002c12	90 91 04 00 00 00	Write   [1:0x0923] = 0
002c13	10 92 04 00 00 00	Write   [1:0x0924] = 0
002c14	90 92 04 00 00 00	Write   [1:0x0925] = 0
002c15	00 08 98 48 07 00	Write   [0:0x3010] = e91
002c16	e4 ba 02 00 20 00	Branch  0x2bae, [CALL] < _Loop_LO Calibration - RX_LO >
002c17	90 91 84 00 00 00	Write   [1:0x0923] = 1
002c18	10 92 04 00 00 00	Write   [1:0x0924] = 0
002c19	90 92 04 00 00 00	Write   [1:0x0925] = 0
002c1a	00 08 98 75 07 00	Write   [0:0x3010] = eeb
002c1b	14 be 02 00 20 00	Branch  0x2be1, [CALL] < _Loop_IQ Calibration - RX_LO >
002c1c	04 00 00 00 40 00	Branch  0x0, [RET]


CopyLoIqCalResults
002c1d	43 00 00 00 20 00	Wait    4, Tc
002c1e	11 b6 84 36 00 00	Copy    [1:096c] = [1:001b]
002c1f	93 00 00 00 20 00	Wait    9, Tc
002c20	91 b6 84 38 00 00	Copy    [1:096d] = [1:001c]
002c21	93 00 00 00 20 00	Wait    9, Tc
002c22	11 b7 84 3a 00 00	Copy    [1:096e] = [1:001d]
002c23	93 00 00 00 20 00	Wait    9, Tc
002c24	91 b7 84 3c 00 00	Copy    [1:096f] = [1:001e]
002c25	93 00 00 00 20 00	Wait    9, Tc
002c26	11 b8 84 3e 00 00	Copy    [1:0970] = [1:001f]
002c27	93 00 00 00 20 00	Wait    9, Tc
002c28	91 b8 84 40 00 00	Copy    [1:0971] = [1:0020]
002c29	93 00 00 00 20 00	Wait    9, Tc
002c2a	11 b9 84 b6 12 00	Copy    [1:0972] = [1:095b]
002c2b	93 00 00 00 20 00	Wait    9, Tc
002c2c	91 b9 84 b8 12 00	Copy    [1:0973] = [1:095c]
002c2d	93 00 00 00 20 00	Wait    9, Tc
002c2e	11 ba 84 ba 12 00	Copy    [1:0974] = [1:095d]
002c2f	93 00 00 00 20 00	Wait    9, Tc
002c30	91 ba 84 bc 12 00	Copy    [1:0975] = [1:095e]
002c31	93 00 00 00 20 00	Wait    9, Tc
002c32	11 bb 84 be 12 00	Copy    [1:0976] = [1:095f]
002c33	93 00 00 00 20 00	Wait    9, Tc
002c34	91 bb 84 c0 12 00	Copy    [1:0977] = [1:0960]
002c35	93 00 00 00 20 00	Wait    9, Tc
002c36	11 bc 84 c2 12 00	Copy    [1:0978] = [1:0961]
002c37	93 00 00 00 20 00	Wait    9, Tc
002c38	91 bc 84 c4 12 00	Copy    [1:0979] = [1:0962]
002c39	43 00 00 00 20 00	Wait    4, Tc
002c3a	04 00 00 00 40 00	Branch  0x0, [RET]


__If_493
002c3b	43 00 00 00 20 00	Wait    4, Tc
002c3c	91 be 84 01 00 01	Copy    [1:097d] = [SF+0], SrcBase: AI		# If_493_Func_Start
002c3d	06 00 00 00 00 00	Nop     		# Else_493_Func_Start
002c3e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_MinPA::CheckThreshold(void)
002c3f	43 00 00 00 20 00	Wait    4, Tc
002c40	01 4c 98 f6 12 00	Copy    [0:3098] = [1:097b]		# If_493
002c41	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002c42	73 00 00 00 20 00	Wait    7, Tc
002c43	01 4d 98 f8 12 00	Copy    [0:309a] = [1:097c]
002c44	53 00 00 00 20 00	Wait    5, Tc
002c45	02 00 08 00 00 00	Cond    0x00008000

002c46	c4 c4 02 00 90 00	Branch  0x2c4c, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002c47	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002c48	b4 c3 02 00 20 00	Branch  0x2c3b, [CALL] < __If_493 >
002c49	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002c4a	43 00 00 00 20 00	Wait    4, Tc
002c4b	c4 c4 02 00 00 00	Branch  0x2c4c, [JMP]
002c4c	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_493

__If_492
002c4d	43 00 00 00 20 00	Wait    4, Tc		# If_492_Func_Start
002c4e	11 be 84 d8 12 00	Copy    [1:097c] = [1:096c]
002c4f	43 00 00 00 20 00	Wait    4, Tc
002c50	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002c51	f4 c3 02 00 20 00	Branch  0x2c3f, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_MinPA::CheckThreshold(void) >
002c52	06 00 00 00 00 00	Nop     		# Else_492_Func_Start
002c53	04 00 00 00 40 00	Branch  0x0, [RET]


__If_491
002c54	a3 00 00 00 20 00	Wait    10, Tc
002c55	01 48 98 dc 12 00	Copy    [0:3090] = [1:096e]		# If_491_Func_Start
002c56	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002c57	93 00 00 00 20 00	Wait    9, Tc
002c58	02 00 00 01 00 00	Cond    0x00100000

002c59	e4 c5 02 00 90 00	Branch  0x2c5e, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002c5a	d4 c4 02 00 20 00	Branch  0x2c4d, [CALL] < __If_492 >
002c5b	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002c5c	43 00 00 00 20 00	Wait    4, Tc
002c5d	e4 c5 02 00 00 00	Branch  0x2c5e, [JMP]
002c5e	06 00 00 00 00 00	Nop     		# Else_492
002c5f	04 00 00 00 40 00	Branch  0x0, [RET]


__If_490
002c60	a3 00 00 00 20 00	Wait    10, Tc
002c61	01 48 98 da 12 00	Copy    [0:3090] = [1:096d]		# If_490_Func_Start
002c62	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002c63	93 00 00 00 20 00	Wait    9, Tc
002c64	02 00 00 01 00 00	Cond    0x00100000

002c65	b4 c6 02 00 90 00	Branch  0x2c6b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002c66	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002c67	44 c5 02 00 20 00	Branch  0x2c54, [CALL] < __If_491 >
002c68	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002c69	43 00 00 00 20 00	Wait    4, Tc
002c6a	b4 c6 02 00 00 00	Branch  0x2c6b, [JMP]
002c6b	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_491

__If_496
002c6c	43 00 00 00 20 00	Wait    4, Tc		# If_496_Func_Start
002c6d	11 be 84 da 12 00	Copy    [1:097c] = [1:096d]
002c6e	43 00 00 00 20 00	Wait    4, Tc
002c6f	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002c70	f4 c3 02 00 20 00	Branch  0x2c3f, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_MinPA::CheckThreshold(void) >
002c71	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_496
002c72	43 00 00 00 20 00	Wait    4, Tc
002c73	91 be 84 01 00 01	Copy    [1:097d] = [SF+0], SrcBase: AI		# Else_496_Func_Start
002c74	04 00 00 00 40 00	Branch  0x0, [RET]


__If_495
002c75	a3 00 00 00 20 00	Wait    10, Tc
002c76	01 48 98 da 12 00	Copy    [0:3090] = [1:096d]		# If_495_Func_Start
002c77	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002c78	93 00 00 00 20 00	Wait    9, Tc
002c79	02 00 00 01 00 00	Cond    0x00100000

002c7a	f4 c7 02 00 10 00	Branch  0x2c7f, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002c7b	c4 c6 02 00 20 00	Branch  0x2c6c, [CALL] < __If_496 >
002c7c	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002c7d	43 00 00 00 20 00	Wait    4, Tc
002c7e	34 c8 02 00 00 00	Branch  0x2c83, [JMP]
002c7f	00 08 98 3b 05 00	Write   [0:0x3010] = a77		# Else_496
002c80	24 c7 02 00 20 00	Branch  0x2c72, [CALL] < __Else_496 >
002c81	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002c82	43 00 00 00 20 00	Wait    4, Tc
002c83	06 00 00 00 00 00	Nop     		# EndIf_496
002c84	04 00 00 00 40 00	Branch  0x0, [RET]


__If_494
002c85	a3 00 00 00 20 00	Wait    10, Tc
002c86	01 48 98 dc 12 00	Copy    [0:3090] = [1:096e]		# If_494_Func_Start
002c87	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002c88	93 00 00 00 20 00	Wait    9, Tc
002c89	02 00 00 01 00 00	Cond    0x00100000

002c8a	04 c9 02 00 90 00	Branch  0x2c90, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002c8b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002c8c	54 c7 02 00 20 00	Branch  0x2c75, [CALL] < __If_495 >
002c8d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002c8e	43 00 00 00 20 00	Wait    4, Tc
002c8f	04 c9 02 00 00 00	Branch  0x2c90, [JMP]
002c90	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_495

__If_499
002c91	43 00 00 00 20 00	Wait    4, Tc
002c92	91 be 84 01 00 01	Copy    [1:097d] = [SF+0], SrcBase: AI		# If_499_Func_Start
002c93	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_499
002c94	43 00 00 00 20 00	Wait    4, Tc		# Else_499_Func_Start
002c95	11 be 84 dc 12 00	Copy    [1:097c] = [1:096e]
002c96	43 00 00 00 20 00	Wait    4, Tc
002c97	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002c98	f4 c3 02 00 20 00	Branch  0x2c3f, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_MinPA::CheckThreshold(void) >
002c99	04 00 00 00 40 00	Branch  0x0, [RET]


__If_498
002c9a	a3 00 00 00 20 00	Wait    10, Tc
002c9b	01 48 98 dc 12 00	Copy    [0:3090] = [1:096e]		# If_498_Func_Start
002c9c	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002c9d	93 00 00 00 20 00	Wait    9, Tc
002c9e	02 00 00 01 00 00	Cond    0x00100000

002c9f	54 ca 02 00 90 00	Branch  0x2ca5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002ca0	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002ca1	14 c9 02 00 20 00	Branch  0x2c91, [CALL] < __If_499 >
002ca2	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002ca3	43 00 00 00 20 00	Wait    4, Tc
002ca4	84 ca 02 00 00 00	Branch  0x2ca8, [JMP]
002ca5	44 c9 02 00 20 00	Branch  0x2c94, [CALL] < __Else_499 >		# Else_499
002ca6	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002ca7	43 00 00 00 20 00	Wait    4, Tc
002ca8	06 00 00 00 00 00	Nop     		# EndIf_499
002ca9	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_494
002caa	a3 00 00 00 20 00	Wait    10, Tc
002cab	01 48 98 f4 12 00	Copy    [0:3090] = [1:097a]		# Else_494_Func_Start
002cac	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002cad	93 00 00 00 20 00	Wait    9, Tc
002cae	02 00 00 01 00 00	Cond    0x00100000

002caf	54 cb 02 00 90 00	Branch  0x2cb5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002cb0	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002cb1	a4 c9 02 00 20 00	Branch  0x2c9a, [CALL] < __If_498 >
002cb2	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002cb3	43 00 00 00 20 00	Wait    4, Tc
002cb4	54 cb 02 00 00 00	Branch  0x2cb5, [JMP]
002cb5	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_498

__Else_490
002cb6	a3 00 00 00 20 00	Wait    10, Tc
002cb7	01 48 98 f4 12 00	Copy    [0:3090] = [1:097a]		# Else_490_Func_Start
002cb8	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002cb9	93 00 00 00 20 00	Wait    9, Tc
002cba	02 00 00 01 00 00	Cond    0x00100000

002cbb	14 cc 02 00 90 00	Branch  0x2cc1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002cbc	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002cbd	54 c8 02 00 20 00	Branch  0x2c85, [CALL] < __If_494 >
002cbe	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002cbf	43 00 00 00 20 00	Wait    4, Tc
002cc0	54 cc 02 00 00 00	Branch  0x2cc5, [JMP]
002cc1	00 08 18 3c 05 00	Write   [0:0x3010] = a78		# Else_494
002cc2	a4 ca 02 00 20 00	Branch  0x2caa, [CALL] < __Else_494 >
002cc3	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002cc4	43 00 00 00 20 00	Wait    4, Tc
002cc5	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_494

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_MinPA::RunThresholdTest(class std::shared_ptr<class Vayyar::Centipede::ICalibResults>)
002cc6	10 bd 04 00 00 00	Write   [1:0x097a] = 0
002cc7	90 bd 04 10 00 00	Write   [1:0x097b] = 20
002cc8	53 00 00 00 20 00	Wait    5, Tc		# If_490
002cc9	01 48 98 f4 12 00	Copy    [0:3090] = [1:097a]
002cca	00 49 18 00 00 00	Write   [0:0x3092] = 0
002ccb	53 00 00 00 20 00	Wait    5, Tc
002ccc	02 00 00 01 00 00	Cond    0x00100000

002ccd	14 cd 02 00 90 00	Branch  0x2cd1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002cce	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002ccf	04 c6 02 00 20 00	Branch  0x2c60, [CALL] < __If_490 >
002cd0	34 cd 02 00 00 00	Branch  0x2cd3, [JMP]
002cd1	00 08 98 3b 05 00	Write   [0:0x3010] = a77		# Else_490
002cd2	64 cb 02 00 20 00	Branch  0x2cb6, [CALL] < __Else_490 >
002cd3	43 00 00 00 20 00	Wait    4, Tc		# EndIf_490
002cd4	11 bf 84 d8 12 00	Copy    [1:097e] = [1:096c]
002cd5	93 00 00 00 20 00	Wait    9, Tc
002cd6	91 bf 84 da 12 00	Copy    [1:097f] = [1:096d]
002cd7	93 00 00 00 20 00	Wait    9, Tc
002cd8	11 c0 84 dc 12 00	Copy    [1:0980] = [1:096e]
002cd9	93 00 00 00 20 00	Wait    9, Tc
002cda	91 c0 84 fa 12 00	Copy    [1:0981] = [1:097d]
002cdb	43 00 00 00 20 00	Wait    4, Tc
002cdc	10 c1 04 00 00 00	Write   [1:0x0982] = 0
002cdd	90 c1 84 02 00 00	Write   [1:0x0983] = 5
002cde	04 00 00 00 40 00	Branch  0x0, [RET]


__If_501
002cdf	43 00 00 00 20 00	Wait    4, Tc
002ce0	91 c2 04 ee 00 00	Copy    [1:0985] = [0:0077]		# If_501_Func_Start
002ce1	01 48 98 0a 13 00	Copy    [0:3090] = [1:0985]
002ce2	43 00 00 00 20 00	Wait    4, Tc
002ce3	81 48 98 01 00 01	Copy    [0:3091] = [SF+0], SrcBase: AI
002ce4	53 00 00 00 20 00	Wait    5, Tc
002ce5	91 c2 04 20 61 00	Copy    [1:0985] = [0:3090]
002ce6	53 00 00 00 20 00	Wait    5, Tc
002ce7	81 3b 80 0a 13 00	Copy    [0:0077] = [1:0985]
002ce8	06 00 00 00 00 00	Nop     		# Else_501_Func_Start
002ce9	04 00 00 00 40 00	Branch  0x0, [RET]


__If_504
002cea	43 00 00 00 20 00	Wait    4, Tc
002ceb	11 c4 84 01 00 01	Copy    [1:0988] = [SF+0], SrcBase: AI		# If_504_Func_Start
002cec	04 00 00 00 40 00	Branch  0x0, [RET]


__If_505
002ced	43 00 00 00 20 00	Wait    4, Tc
002cee	11 c4 84 01 00 01	Copy    [1:0988] = [SF+0], SrcBase: AI		# If_505_Func_Start
002cef	06 00 00 00 00 00	Nop     		# Else_505_Func_Start
002cf0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_MaxPA::CheckThreshold(void)
002cf1	43 00 00 00 20 00	Wait    4, Tc
002cf2	01 4c 98 12 13 00	Copy    [0:3098] = [1:0989]		# If_505
002cf3	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002cf4	73 00 00 00 20 00	Wait    7, Tc
002cf5	01 4d 98 0e 13 00	Copy    [0:309a] = [1:0987]
002cf6	53 00 00 00 20 00	Wait    5, Tc
002cf7	02 00 08 00 00 00	Cond    0x00008000

002cf8	e4 cf 02 00 90 00	Branch  0x2cfe, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002cf9	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002cfa	d4 ce 02 00 20 00	Branch  0x2ced, [CALL] < __If_505 >
002cfb	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002cfc	43 00 00 00 20 00	Wait    4, Tc
002cfd	e4 cf 02 00 00 00	Branch  0x2cfe, [JMP]
002cfe	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_505

__Else_504
002cff	43 00 00 00 20 00	Wait    4, Tc		# Else_504_Func_Start
002d00	91 c4 84 de 12 00	Copy    [1:0989] = [1:096f]
002d01	43 00 00 00 20 00	Wait    4, Tc
002d02	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002d03	14 cf 02 00 20 00	Branch  0x2cf1, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_MaxPA::CheckThreshold(void) >
002d04	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_503
002d05	a3 00 00 00 20 00	Wait    10, Tc
002d06	01 48 98 e2 12 00	Copy    [0:3090] = [1:0971]		# Else_503_Func_Start
002d07	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002d08	93 00 00 00 20 00	Wait    9, Tc
002d09	02 00 00 01 00 00	Cond    0x00100000

002d0a	04 d1 02 00 10 00	Branch  0x2d10, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002d0b	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002d0c	a4 ce 02 00 20 00	Branch  0x2cea, [CALL] < __If_504 >
002d0d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002d0e	43 00 00 00 20 00	Wait    4, Tc
002d0f	34 d1 02 00 00 00	Branch  0x2d13, [JMP]
002d10	f4 cf 02 00 20 00	Branch  0x2cff, [CALL] < __Else_504 >		# Else_504
002d11	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002d12	43 00 00 00 20 00	Wait    4, Tc
002d13	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_504

__If_502
002d14	a3 00 00 00 20 00	Wait    10, Tc
002d15	01 48 98 e0 12 00	Copy    [0:3090] = [1:0970]		# If_502_Func_Start
002d16	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002d17	93 00 00 00 20 00	Wait    9, Tc
002d18	02 00 00 01 00 00	Cond    0x00100000

002d19	f4 d1 02 00 10 00	Branch  0x2d1f, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002d1a	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002d1b	a4 ce 02 00 20 00	Branch  0x2cea, [CALL] < __If_504 >
002d1c	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002d1d	43 00 00 00 20 00	Wait    4, Tc
002d1e	34 d2 02 00 00 00	Branch  0x2d23, [JMP]
002d1f	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_503
002d20	54 d0 02 00 20 00	Branch  0x2d05, [CALL] < __Else_503 >
002d21	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002d22	43 00 00 00 20 00	Wait    4, Tc
002d23	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_503

__If_508
002d24	43 00 00 00 20 00	Wait    4, Tc		# If_508_Func_Start
002d25	91 c4 84 e0 12 00	Copy    [1:0989] = [1:0970]
002d26	43 00 00 00 20 00	Wait    4, Tc
002d27	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002d28	14 cf 02 00 20 00	Branch  0x2cf1, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_MaxPA::CheckThreshold(void) >
002d29	06 00 00 00 00 00	Nop     		# Else_508_Func_Start
002d2a	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_507
002d2b	a3 00 00 00 20 00	Wait    10, Tc
002d2c	01 48 98 e0 12 00	Copy    [0:3090] = [1:0970]		# Else_507_Func_Start
002d2d	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002d2e	93 00 00 00 20 00	Wait    9, Tc
002d2f	02 00 00 01 00 00	Cond    0x00100000

002d30	54 d3 02 00 10 00	Branch  0x2d35, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002d31	44 d2 02 00 20 00	Branch  0x2d24, [CALL] < __If_508 >
002d32	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002d33	43 00 00 00 20 00	Wait    4, Tc
002d34	54 d3 02 00 00 00	Branch  0x2d35, [JMP]
002d35	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_508

__If_506
002d36	a3 00 00 00 20 00	Wait    10, Tc
002d37	01 48 98 e2 12 00	Copy    [0:3090] = [1:0971]		# If_506_Func_Start
002d38	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002d39	93 00 00 00 20 00	Wait    9, Tc
002d3a	02 00 00 01 00 00	Cond    0x00100000

002d3b	14 d4 02 00 10 00	Branch  0x2d41, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002d3c	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002d3d	a4 ce 02 00 20 00	Branch  0x2cea, [CALL] < __If_504 >
002d3e	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002d3f	43 00 00 00 20 00	Wait    4, Tc
002d40	54 d4 02 00 00 00	Branch  0x2d45, [JMP]
002d41	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_507
002d42	b4 d2 02 00 20 00	Branch  0x2d2b, [CALL] < __Else_507 >
002d43	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002d44	43 00 00 00 20 00	Wait    4, Tc
002d45	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_507

__If_511
002d46	43 00 00 00 20 00	Wait    4, Tc		# If_511_Func_Start
002d47	91 c4 84 e2 12 00	Copy    [1:0989] = [1:0971]
002d48	43 00 00 00 20 00	Wait    4, Tc
002d49	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002d4a	14 cf 02 00 20 00	Branch  0x2cf1, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_MaxPA::CheckThreshold(void) >
002d4b	06 00 00 00 00 00	Nop     		# Else_511_Func_Start
002d4c	04 00 00 00 40 00	Branch  0x0, [RET]


__If_510
002d4d	a3 00 00 00 20 00	Wait    10, Tc
002d4e	01 48 98 e2 12 00	Copy    [0:3090] = [1:0971]		# If_510_Func_Start
002d4f	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002d50	93 00 00 00 20 00	Wait    9, Tc
002d51	02 00 00 01 00 00	Cond    0x00100000

002d52	74 d5 02 00 10 00	Branch  0x2d57, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002d53	64 d4 02 00 20 00	Branch  0x2d46, [CALL] < __If_511 >
002d54	00 08 18 27 05 00	Write   [0:0x3010] = a4e
002d55	43 00 00 00 20 00	Wait    4, Tc
002d56	74 d5 02 00 00 00	Branch  0x2d57, [JMP]
002d57	06 00 00 00 00 00	Nop     		# Else_511
002d58	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_506
002d59	a3 00 00 00 20 00	Wait    10, Tc
002d5a	01 48 98 0c 13 00	Copy    [0:3090] = [1:0986]		# Else_506_Func_Start
002d5b	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002d5c	93 00 00 00 20 00	Wait    9, Tc
002d5d	02 00 00 01 00 00	Cond    0x00100000

002d5e	44 d6 02 00 90 00	Branch  0x2d64, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002d5f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002d60	d4 d4 02 00 20 00	Branch  0x2d4d, [CALL] < __If_510 >
002d61	00 08 98 3c 05 00	Write   [0:0x3010] = a79
002d62	43 00 00 00 20 00	Wait    4, Tc
002d63	44 d6 02 00 00 00	Branch  0x2d64, [JMP]
002d64	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_510

__Else_502
002d65	a3 00 00 00 20 00	Wait    10, Tc
002d66	01 48 98 0c 13 00	Copy    [0:3090] = [1:0986]		# Else_502_Func_Start
002d67	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002d68	93 00 00 00 20 00	Wait    9, Tc
002d69	02 00 00 01 00 00	Cond    0x00100000

002d6a	04 d7 02 00 90 00	Branch  0x2d70, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002d6b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002d6c	64 d3 02 00 20 00	Branch  0x2d36, [CALL] < __If_506 >
002d6d	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002d6e	43 00 00 00 20 00	Wait    4, Tc
002d6f	44 d7 02 00 00 00	Branch  0x2d74, [JMP]
002d70	00 08 18 3c 05 00	Write   [0:0x3010] = a78		# Else_506
002d71	94 d5 02 00 20 00	Branch  0x2d59, [CALL] < __Else_506 >
002d72	00 08 18 3c 05 00	Write   [0:0x3010] = a78
002d73	43 00 00 00 20 00	Wait    4, Tc
002d74	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_506

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_MaxPA::RunThresholdTest(class std::shared_ptr<class Vayyar::Centipede::ICalibResults>)
002d75	10 c3 04 01 00 00	Write   [1:0x0986] = 2
002d76	90 c3 04 40 00 00	Write   [1:0x0987] = 80
002d77	53 00 00 00 20 00	Wait    5, Tc		# If_502
002d78	01 48 98 0c 13 00	Copy    [0:3090] = [1:0986]
002d79	00 49 18 00 00 00	Write   [0:0x3092] = 0
002d7a	53 00 00 00 20 00	Wait    5, Tc
002d7b	02 00 00 01 00 00	Cond    0x00100000

002d7c	04 d8 02 00 90 00	Branch  0x2d80, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002d7d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002d7e	44 d1 02 00 20 00	Branch  0x2d14, [CALL] < __If_502 >
002d7f	24 d8 02 00 00 00	Branch  0x2d82, [JMP]
002d80	00 08 98 3b 05 00	Write   [0:0x3010] = a77		# Else_502
002d81	54 d6 02 00 20 00	Branch  0x2d65, [CALL] < __Else_502 >
002d82	43 00 00 00 20 00	Wait    4, Tc		# EndIf_502
002d83	11 c5 84 de 12 00	Copy    [1:098a] = [1:096f]
002d84	93 00 00 00 20 00	Wait    9, Tc
002d85	91 c5 84 e0 12 00	Copy    [1:098b] = [1:0970]
002d86	93 00 00 00 20 00	Wait    9, Tc
002d87	11 c6 84 e2 12 00	Copy    [1:098c] = [1:0971]
002d88	93 00 00 00 20 00	Wait    9, Tc
002d89	91 c6 84 10 13 00	Copy    [1:098d] = [1:0988]
002d8a	43 00 00 00 20 00	Wait    4, Tc
002d8b	10 c7 04 01 00 00	Write   [1:0x098e] = 2
002d8c	90 c7 84 03 00 00	Write   [1:0x098f] = 7
002d8d	04 00 00 00 40 00	Branch  0x0, [RET]


__If_513
002d8e	43 00 00 00 20 00	Wait    4, Tc
002d8f	91 c2 04 ee 00 00	Copy    [1:0985] = [0:0077]		# If_513_Func_Start
002d90	01 48 98 0a 13 00	Copy    [0:3090] = [1:0985]
002d91	43 00 00 00 20 00	Wait    4, Tc
002d92	81 48 98 01 00 01	Copy    [0:3091] = [SF+0], SrcBase: AI
002d93	53 00 00 00 20 00	Wait    5, Tc
002d94	81 48 98 01 00 01	Copy    [0:3091] = [SF+1], SrcBase: AI
002d95	53 00 00 00 20 00	Wait    5, Tc
002d96	91 c2 04 20 61 00	Copy    [1:0985] = [0:3090]
002d97	53 00 00 00 20 00	Wait    5, Tc
002d98	81 3b 80 0a 13 00	Copy    [0:0077] = [1:0985]
002d99	06 00 00 00 00 00	Nop     		# Else_513_Func_Start
002d9a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::SetThresholds(void)
002d9b	43 00 00 00 20 00	Wait    4, Tc
002d9c	11 c8 84 01 00 01	Copy    [1:0990] = [SF+0], SrcBase: AI
002d9d	91 c8 84 01 00 01	Copy    [1:0991] = [SF+1], SrcBase: AI
002d9e	53 00 00 00 20 00	Wait    5, Tc
002d9f	11 c9 84 01 00 01	Copy    [1:0992] = [SF+2], SrcBase: AI
002da0	13 00 00 00 20 00	Wait    1, Tc
002da1	91 c9 84 01 00 01	Copy    [1:0993] = [SF+3], SrcBase: AI
002da2	13 00 00 00 20 00	Wait    1, Tc
002da3	11 ca 84 01 00 01	Copy    [1:0994] = [SF+4], SrcBase: AI
002da4	13 00 00 00 20 00	Wait    1, Tc
002da5	91 ca 84 01 00 01	Copy    [1:0995] = [SF+5], SrcBase: AI
002da6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short)
002da7	43 00 00 00 20 00	Wait    4, Tc
002da8	01 70 98 2c 13 00	Copy    [0:30e0] = [1:0996]
002da9	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
002daa	33 00 00 00 20 00	Wait    3, Tc
002dab	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
002dac	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
002dad	73 00 00 00 20 00	Wait    7, Tc
002dae	11 cb 04 cc 61 00	Copy    [1:0996] = [0:30e6]
002daf	04 00 00 00 40 00	Branch  0x0, [RET]


__If_514
002db0	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_514_Func_Start
002db1	74 da 02 00 20 00	Branch  0x2da7, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002db2	04 00 00 00 40 00	Branch  0x0, [RET]


__If_515
002db3	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_515_Func_Start
002db4	74 da 02 00 20 00	Branch  0x2da7, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002db5	06 00 00 00 00 00	Nop     		# Else_515_Func_Start
002db6	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_514
002db7	a3 00 00 00 20 00	Wait    10, Tc
002db8	01 48 98 2c 13 00	Copy    [0:3090] = [1:0996]		# Else_514_Func_Start
002db9	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002dba	93 00 00 00 20 00	Wait    9, Tc
002dbb	02 00 00 01 00 00	Cond    0x00100000

002dbc	14 dc 02 00 90 00	Branch  0x2dc1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002dbd	34 db 02 00 20 00	Branch  0x2db3, [CALL] < __If_515 >
002dbe	00 08 98 6e 07 00	Write   [0:0x3010] = edd
002dbf	43 00 00 00 20 00	Wait    4, Tc
002dc0	14 dc 02 00 00 00	Branch  0x2dc1, [JMP]
002dc1	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_515

__If_516
002dc2	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_516_Func_Start
002dc3	74 da 02 00 20 00	Branch  0x2da7, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002dc4	04 00 00 00 40 00	Branch  0x0, [RET]


__If_517
002dc5	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_517_Func_Start
002dc6	74 da 02 00 20 00	Branch  0x2da7, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002dc7	06 00 00 00 00 00	Nop     		# Else_517_Func_Start
002dc8	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_516
002dc9	a3 00 00 00 20 00	Wait    10, Tc
002dca	01 48 98 2c 13 00	Copy    [0:3090] = [1:0996]		# Else_516_Func_Start
002dcb	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002dcc	93 00 00 00 20 00	Wait    9, Tc
002dcd	02 00 00 01 00 00	Cond    0x00100000

002dce	34 dd 02 00 90 00	Branch  0x2dd3, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002dcf	54 dc 02 00 20 00	Branch  0x2dc5, [CALL] < __If_517 >
002dd0	00 08 98 70 07 00	Write   [0:0x3010] = ee1
002dd1	43 00 00 00 20 00	Wait    4, Tc
002dd2	34 dd 02 00 00 00	Branch  0x2dd3, [JMP]
002dd3	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_517

__If_518
002dd4	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_518_Func_Start
002dd5	74 da 02 00 20 00	Branch  0x2da7, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002dd6	04 00 00 00 40 00	Branch  0x0, [RET]


__If_519
002dd7	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_519_Func_Start
002dd8	74 da 02 00 20 00	Branch  0x2da7, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002dd9	06 00 00 00 00 00	Nop     		# Else_519_Func_Start
002dda	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_518
002ddb	a3 00 00 00 20 00	Wait    10, Tc
002ddc	01 48 98 2c 13 00	Copy    [0:3090] = [1:0996]		# Else_518_Func_Start
002ddd	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002dde	93 00 00 00 20 00	Wait    9, Tc
002ddf	02 00 00 01 00 00	Cond    0x00100000

002de0	54 de 02 00 90 00	Branch  0x2de5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002de1	74 dd 02 00 20 00	Branch  0x2dd7, [CALL] < __If_519 >
002de2	00 08 18 71 07 00	Write   [0:0x3010] = ee2
002de3	43 00 00 00 20 00	Wait    4, Tc
002de4	54 de 02 00 00 00	Branch  0x2de5, [JMP]
002de5	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_519

__If_520
002de6	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_520_Func_Start
002de7	74 da 02 00 20 00	Branch  0x2da7, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002de8	04 00 00 00 40 00	Branch  0x0, [RET]


__If_521
002de9	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_521_Func_Start
002dea	74 da 02 00 20 00	Branch  0x2da7, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002deb	06 00 00 00 00 00	Nop     		# Else_521_Func_Start
002dec	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_520
002ded	a3 00 00 00 20 00	Wait    10, Tc
002dee	01 48 98 2c 13 00	Copy    [0:3090] = [1:0996]		# Else_520_Func_Start
002def	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002df0	93 00 00 00 20 00	Wait    9, Tc
002df1	02 00 00 01 00 00	Cond    0x00100000

002df2	74 df 02 00 90 00	Branch  0x2df7, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002df3	94 de 02 00 20 00	Branch  0x2de9, [CALL] < __If_521 >
002df4	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002df5	43 00 00 00 20 00	Wait    4, Tc
002df6	74 df 02 00 00 00	Branch  0x2df7, [JMP]
002df7	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_521

SetMask
002df8	93 00 00 00 20 00	Wait    9, Tc
002df9	11 cb 84 e4 12 00	Copy    [1:0996] = [1:0972]
002dfa	43 00 00 00 20 00	Wait    4, Tc
002dfb	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# If_514
002dfc	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002dfd	73 00 00 00 20 00	Wait    7, Tc
002dfe	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002dff	53 00 00 00 20 00	Wait    5, Tc
002e00	02 00 08 00 00 00	Cond    0x00008000

002e01	64 e0 02 00 90 00	Branch  0x2e06, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e02	04 db 02 00 20 00	Branch  0x2db0, [CALL] < __If_514 >
002e03	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002e04	43 00 00 00 20 00	Wait    4, Tc
002e05	a4 e0 02 00 00 00	Branch  0x2e0a, [JMP]
002e06	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_514
002e07	74 db 02 00 20 00	Branch  0x2db7, [CALL] < __Else_514 >
002e08	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002e09	43 00 00 00 20 00	Wait    4, Tc
002e0a	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_514
002e0b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
002e0c	73 00 00 00 20 00	Wait    7, Tc
002e0d	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
002e0e	53 00 00 00 20 00	Wait    5, Tc
002e0f	02 00 08 00 00 00	Cond    0x00008000

002e10	54 e1 02 00 90 00	Branch  0x2e15, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e11	24 dc 02 00 20 00	Branch  0x2dc2, [CALL] < __If_516 >
002e12	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002e13	43 00 00 00 20 00	Wait    4, Tc
002e14	94 e1 02 00 00 00	Branch  0x2e19, [JMP]
002e15	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_516
002e16	94 dc 02 00 20 00	Branch  0x2dc9, [CALL] < __Else_516 >
002e17	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002e18	43 00 00 00 20 00	Wait    4, Tc
002e19	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_516
002e1a	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
002e1b	73 00 00 00 20 00	Wait    7, Tc
002e1c	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
002e1d	53 00 00 00 20 00	Wait    5, Tc
002e1e	02 00 08 00 00 00	Cond    0x00008000

002e1f	44 e2 02 00 90 00	Branch  0x2e24, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e20	44 dd 02 00 20 00	Branch  0x2dd4, [CALL] < __If_518 >
002e21	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002e22	43 00 00 00 20 00	Wait    4, Tc
002e23	84 e2 02 00 00 00	Branch  0x2e28, [JMP]
002e24	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_518
002e25	b4 dd 02 00 20 00	Branch  0x2ddb, [CALL] < __Else_518 >
002e26	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002e27	43 00 00 00 20 00	Wait    4, Tc
002e28	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_518
002e29	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
002e2a	73 00 00 00 20 00	Wait    7, Tc
002e2b	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
002e2c	53 00 00 00 20 00	Wait    5, Tc
002e2d	02 00 08 00 00 00	Cond    0x00008000

002e2e	34 e3 02 00 90 00	Branch  0x2e33, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e2f	64 de 02 00 20 00	Branch  0x2de6, [CALL] < __If_520 >
002e30	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002e31	43 00 00 00 20 00	Wait    4, Tc
002e32	74 e3 02 00 00 00	Branch  0x2e37, [JMP]
002e33	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_520
002e34	d4 de 02 00 20 00	Branch  0x2ded, [CALL] < __Else_520 >
002e35	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002e36	43 00 00 00 20 00	Wait    4, Tc
002e37	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_520

class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short)
002e38	43 00 00 00 20 00	Wait    4, Tc
002e39	01 70 98 2e 13 00	Copy    [0:30e0] = [1:0997]
002e3a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
002e3b	33 00 00 00 20 00	Wait    3, Tc
002e3c	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
002e3d	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
002e3e	73 00 00 00 20 00	Wait    7, Tc
002e3f	91 cb 04 cc 61 00	Copy    [1:0997] = [0:30e6]
002e40	04 00 00 00 40 00	Branch  0x0, [RET]


__If_522
002e41	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_522_Func_Start
002e42	84 e3 02 00 20 00	Branch  0x2e38, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002e43	04 00 00 00 40 00	Branch  0x0, [RET]


__If_523
002e44	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_523_Func_Start
002e45	84 e3 02 00 20 00	Branch  0x2e38, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002e46	06 00 00 00 00 00	Nop     		# Else_523_Func_Start
002e47	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_522
002e48	a3 00 00 00 20 00	Wait    10, Tc
002e49	01 48 98 2e 13 00	Copy    [0:3090] = [1:0997]		# Else_522_Func_Start
002e4a	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002e4b	93 00 00 00 20 00	Wait    9, Tc
002e4c	02 00 00 01 00 00	Cond    0x00100000

002e4d	24 e5 02 00 90 00	Branch  0x2e52, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e4e	44 e4 02 00 20 00	Branch  0x2e44, [CALL] < __If_523 >
002e4f	00 08 98 6e 07 00	Write   [0:0x3010] = edd
002e50	43 00 00 00 20 00	Wait    4, Tc
002e51	24 e5 02 00 00 00	Branch  0x2e52, [JMP]
002e52	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_523

__If_524
002e53	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_524_Func_Start
002e54	84 e3 02 00 20 00	Branch  0x2e38, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002e55	04 00 00 00 40 00	Branch  0x0, [RET]


__If_525
002e56	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_525_Func_Start
002e57	84 e3 02 00 20 00	Branch  0x2e38, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002e58	06 00 00 00 00 00	Nop     		# Else_525_Func_Start
002e59	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_524
002e5a	a3 00 00 00 20 00	Wait    10, Tc
002e5b	01 48 98 2e 13 00	Copy    [0:3090] = [1:0997]		# Else_524_Func_Start
002e5c	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002e5d	93 00 00 00 20 00	Wait    9, Tc
002e5e	02 00 00 01 00 00	Cond    0x00100000

002e5f	44 e6 02 00 90 00	Branch  0x2e64, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e60	64 e5 02 00 20 00	Branch  0x2e56, [CALL] < __If_525 >
002e61	00 08 98 70 07 00	Write   [0:0x3010] = ee1
002e62	43 00 00 00 20 00	Wait    4, Tc
002e63	44 e6 02 00 00 00	Branch  0x2e64, [JMP]
002e64	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_525

__If_526
002e65	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_526_Func_Start
002e66	84 e3 02 00 20 00	Branch  0x2e38, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002e67	04 00 00 00 40 00	Branch  0x0, [RET]


__If_527
002e68	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_527_Func_Start
002e69	84 e3 02 00 20 00	Branch  0x2e38, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002e6a	06 00 00 00 00 00	Nop     		# Else_527_Func_Start
002e6b	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_526
002e6c	a3 00 00 00 20 00	Wait    10, Tc
002e6d	01 48 98 2e 13 00	Copy    [0:3090] = [1:0997]		# Else_526_Func_Start
002e6e	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002e6f	93 00 00 00 20 00	Wait    9, Tc
002e70	02 00 00 01 00 00	Cond    0x00100000

002e71	64 e7 02 00 90 00	Branch  0x2e76, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e72	84 e6 02 00 20 00	Branch  0x2e68, [CALL] < __If_527 >
002e73	00 08 18 71 07 00	Write   [0:0x3010] = ee2
002e74	43 00 00 00 20 00	Wait    4, Tc
002e75	64 e7 02 00 00 00	Branch  0x2e76, [JMP]
002e76	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_527

__If_528
002e77	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_528_Func_Start
002e78	84 e3 02 00 20 00	Branch  0x2e38, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002e79	04 00 00 00 40 00	Branch  0x0, [RET]


__If_529
002e7a	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_529_Func_Start
002e7b	84 e3 02 00 20 00	Branch  0x2e38, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002e7c	06 00 00 00 00 00	Nop     		# Else_529_Func_Start
002e7d	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_528
002e7e	a3 00 00 00 20 00	Wait    10, Tc
002e7f	01 48 98 2e 13 00	Copy    [0:3090] = [1:0997]		# Else_528_Func_Start
002e80	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002e81	93 00 00 00 20 00	Wait    9, Tc
002e82	02 00 00 01 00 00	Cond    0x00100000

002e83	84 e8 02 00 90 00	Branch  0x2e88, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e84	a4 e7 02 00 20 00	Branch  0x2e7a, [CALL] < __If_529 >
002e85	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002e86	43 00 00 00 20 00	Wait    4, Tc
002e87	84 e8 02 00 00 00	Branch  0x2e88, [JMP]
002e88	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_529

SetMask
002e89	93 00 00 00 20 00	Wait    9, Tc
002e8a	91 cb 84 24 13 00	Copy    [1:0997] = [1:0992]
002e8b	43 00 00 00 20 00	Wait    4, Tc
002e8c	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# If_522
002e8d	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002e8e	73 00 00 00 20 00	Wait    7, Tc
002e8f	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002e90	53 00 00 00 20 00	Wait    5, Tc
002e91	02 00 08 00 00 00	Cond    0x00008000

002e92	74 e9 02 00 90 00	Branch  0x2e97, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002e93	14 e4 02 00 20 00	Branch  0x2e41, [CALL] < __If_522 >
002e94	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002e95	43 00 00 00 20 00	Wait    4, Tc
002e96	b4 e9 02 00 00 00	Branch  0x2e9b, [JMP]
002e97	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_522
002e98	84 e4 02 00 20 00	Branch  0x2e48, [CALL] < __Else_522 >
002e99	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002e9a	43 00 00 00 20 00	Wait    4, Tc
002e9b	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_522
002e9c	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
002e9d	73 00 00 00 20 00	Wait    7, Tc
002e9e	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
002e9f	53 00 00 00 20 00	Wait    5, Tc
002ea0	02 00 08 00 00 00	Cond    0x00008000

002ea1	64 ea 02 00 90 00	Branch  0x2ea6, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002ea2	34 e5 02 00 20 00	Branch  0x2e53, [CALL] < __If_524 >
002ea3	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002ea4	43 00 00 00 20 00	Wait    4, Tc
002ea5	a4 ea 02 00 00 00	Branch  0x2eaa, [JMP]
002ea6	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_524
002ea7	a4 e5 02 00 20 00	Branch  0x2e5a, [CALL] < __Else_524 >
002ea8	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002ea9	43 00 00 00 20 00	Wait    4, Tc
002eaa	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_524
002eab	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
002eac	73 00 00 00 20 00	Wait    7, Tc
002ead	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
002eae	53 00 00 00 20 00	Wait    5, Tc
002eaf	02 00 08 00 00 00	Cond    0x00008000

002eb0	54 eb 02 00 90 00	Branch  0x2eb5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002eb1	54 e6 02 00 20 00	Branch  0x2e65, [CALL] < __If_526 >
002eb2	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002eb3	43 00 00 00 20 00	Wait    4, Tc
002eb4	94 eb 02 00 00 00	Branch  0x2eb9, [JMP]
002eb5	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_526
002eb6	c4 e6 02 00 20 00	Branch  0x2e6c, [CALL] < __Else_526 >
002eb7	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002eb8	43 00 00 00 20 00	Wait    4, Tc
002eb9	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_526
002eba	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
002ebb	73 00 00 00 20 00	Wait    7, Tc
002ebc	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
002ebd	53 00 00 00 20 00	Wait    5, Tc
002ebe	02 00 08 00 00 00	Cond    0x00008000

002ebf	44 ec 02 00 90 00	Branch  0x2ec4, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002ec0	74 e7 02 00 20 00	Branch  0x2e77, [CALL] < __If_528 >
002ec1	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002ec2	43 00 00 00 20 00	Wait    4, Tc
002ec3	84 ec 02 00 00 00	Branch  0x2ec8, [JMP]
002ec4	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_528
002ec5	e4 e7 02 00 20 00	Branch  0x2e7e, [CALL] < __Else_528 >
002ec6	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002ec7	43 00 00 00 20 00	Wait    4, Tc
002ec8	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_528

class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short)
002ec9	43 00 00 00 20 00	Wait    4, Tc
002eca	01 70 98 30 13 00	Copy    [0:30e0] = [1:0998]
002ecb	81 70 98 01 00 01	Copy    [0:30e1] = [SF+0], SrcBase: AI
002ecc	33 00 00 00 20 00	Wait    3, Tc
002ecd	81 71 98 01 00 01	Copy    [0:30e3] = [SF+1], SrcBase: AI
002ece	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
002ecf	73 00 00 00 20 00	Wait    7, Tc
002ed0	11 cc 04 cc 61 00	Copy    [1:0998] = [0:30e6]
002ed1	04 00 00 00 40 00	Branch  0x0, [RET]


__If_530
002ed2	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_530_Func_Start
002ed3	94 ec 02 00 20 00	Branch  0x2ec9, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002ed4	04 00 00 00 40 00	Branch  0x0, [RET]


__If_531
002ed5	00 08 98 6c 07 00	Write   [0:0x3010] = ed9		# If_531_Func_Start
002ed6	94 ec 02 00 20 00	Branch  0x2ec9, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002ed7	06 00 00 00 00 00	Nop     		# Else_531_Func_Start
002ed8	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_530
002ed9	a3 00 00 00 20 00	Wait    10, Tc
002eda	01 48 98 30 13 00	Copy    [0:3090] = [1:0998]		# Else_530_Func_Start
002edb	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002edc	93 00 00 00 20 00	Wait    9, Tc
002edd	02 00 00 01 00 00	Cond    0x00100000

002ede	34 ee 02 00 90 00	Branch  0x2ee3, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002edf	54 ed 02 00 20 00	Branch  0x2ed5, [CALL] < __If_531 >
002ee0	00 08 98 6e 07 00	Write   [0:0x3010] = edd
002ee1	43 00 00 00 20 00	Wait    4, Tc
002ee2	34 ee 02 00 00 00	Branch  0x2ee3, [JMP]
002ee3	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_531

__If_532
002ee4	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_532_Func_Start
002ee5	94 ec 02 00 20 00	Branch  0x2ec9, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002ee6	04 00 00 00 40 00	Branch  0x0, [RET]


__If_533
002ee7	00 08 98 6e 07 00	Write   [0:0x3010] = edd		# If_533_Func_Start
002ee8	94 ec 02 00 20 00	Branch  0x2ec9, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002ee9	06 00 00 00 00 00	Nop     		# Else_533_Func_Start
002eea	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_532
002eeb	a3 00 00 00 20 00	Wait    10, Tc
002eec	01 48 98 30 13 00	Copy    [0:3090] = [1:0998]		# Else_532_Func_Start
002eed	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002eee	93 00 00 00 20 00	Wait    9, Tc
002eef	02 00 00 01 00 00	Cond    0x00100000

002ef0	54 ef 02 00 90 00	Branch  0x2ef5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002ef1	74 ee 02 00 20 00	Branch  0x2ee7, [CALL] < __If_533 >
002ef2	00 08 98 70 07 00	Write   [0:0x3010] = ee1
002ef3	43 00 00 00 20 00	Wait    4, Tc
002ef4	54 ef 02 00 00 00	Branch  0x2ef5, [JMP]
002ef5	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_533

__If_534
002ef6	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_534_Func_Start
002ef7	94 ec 02 00 20 00	Branch  0x2ec9, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002ef8	04 00 00 00 40 00	Branch  0x0, [RET]


__If_535
002ef9	00 08 18 2a 05 00	Write   [0:0x3010] = a54		# If_535_Func_Start
002efa	94 ec 02 00 20 00	Branch  0x2ec9, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002efb	06 00 00 00 00 00	Nop     		# Else_535_Func_Start
002efc	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_534
002efd	a3 00 00 00 20 00	Wait    10, Tc
002efe	01 48 98 30 13 00	Copy    [0:3090] = [1:0998]		# Else_534_Func_Start
002eff	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002f00	93 00 00 00 20 00	Wait    9, Tc
002f01	02 00 00 01 00 00	Cond    0x00100000

002f02	74 f0 02 00 90 00	Branch  0x2f07, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f03	94 ef 02 00 20 00	Branch  0x2ef9, [CALL] < __If_535 >
002f04	00 08 18 71 07 00	Write   [0:0x3010] = ee2
002f05	43 00 00 00 20 00	Wait    4, Tc
002f06	74 f0 02 00 00 00	Branch  0x2f07, [JMP]
002f07	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_535

__If_536
002f08	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_536_Func_Start
002f09	94 ec 02 00 20 00	Branch  0x2ec9, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002f0a	04 00 00 00 40 00	Branch  0x0, [RET]


__If_537
002f0b	00 08 18 71 07 00	Write   [0:0x3010] = ee2		# If_537_Func_Start
002f0c	94 ec 02 00 20 00	Branch  0x2ec9, [CALL] < Vayyar::SequencerMath::SubShortImd(const class IILParam &,const class IILParam &,unsigned short) >
002f0d	06 00 00 00 00 00	Nop     		# Else_537_Func_Start
002f0e	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_536
002f0f	a3 00 00 00 20 00	Wait    10, Tc
002f10	01 48 98 30 13 00	Copy    [0:3090] = [1:0998]		# Else_536_Func_Start
002f11	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
002f12	93 00 00 00 20 00	Wait    9, Tc
002f13	02 00 00 01 00 00	Cond    0x00100000

002f14	94 f1 02 00 90 00	Branch  0x2f19, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f15	b4 f0 02 00 20 00	Branch  0x2f0b, [CALL] < __If_537 >
002f16	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002f17	43 00 00 00 20 00	Wait    4, Tc
002f18	94 f1 02 00 00 00	Branch  0x2f19, [JMP]
002f19	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_537

SetMask
002f1a	93 00 00 00 20 00	Wait    9, Tc
002f1b	11 cc 84 26 13 00	Copy    [1:0998] = [1:0993]
002f1c	43 00 00 00 20 00	Wait    4, Tc
002f1d	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# If_530
002f1e	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002f1f	73 00 00 00 20 00	Wait    7, Tc
002f20	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002f21	53 00 00 00 20 00	Wait    5, Tc
002f22	02 00 08 00 00 00	Cond    0x00008000

002f23	84 f2 02 00 90 00	Branch  0x2f28, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f24	24 ed 02 00 20 00	Branch  0x2ed2, [CALL] < __If_530 >
002f25	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002f26	43 00 00 00 20 00	Wait    4, Tc
002f27	c4 f2 02 00 00 00	Branch  0x2f2c, [JMP]
002f28	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_530
002f29	94 ed 02 00 20 00	Branch  0x2ed9, [CALL] < __Else_530 >
002f2a	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002f2b	43 00 00 00 20 00	Wait    4, Tc
002f2c	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_530
002f2d	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
002f2e	73 00 00 00 20 00	Wait    7, Tc
002f2f	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
002f30	53 00 00 00 20 00	Wait    5, Tc
002f31	02 00 08 00 00 00	Cond    0x00008000

002f32	74 f3 02 00 90 00	Branch  0x2f37, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f33	44 ee 02 00 20 00	Branch  0x2ee4, [CALL] < __If_532 >
002f34	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002f35	43 00 00 00 20 00	Wait    4, Tc
002f36	b4 f3 02 00 00 00	Branch  0x2f3b, [JMP]
002f37	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_532
002f38	b4 ee 02 00 20 00	Branch  0x2eeb, [CALL] < __Else_532 >
002f39	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002f3a	43 00 00 00 20 00	Wait    4, Tc
002f3b	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_532
002f3c	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
002f3d	73 00 00 00 20 00	Wait    7, Tc
002f3e	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
002f3f	53 00 00 00 20 00	Wait    5, Tc
002f40	02 00 08 00 00 00	Cond    0x00008000

002f41	64 f4 02 00 90 00	Branch  0x2f46, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f42	64 ef 02 00 20 00	Branch  0x2ef6, [CALL] < __If_534 >
002f43	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002f44	43 00 00 00 20 00	Wait    4, Tc
002f45	a4 f4 02 00 00 00	Branch  0x2f4a, [JMP]
002f46	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_534
002f47	d4 ef 02 00 20 00	Branch  0x2efd, [CALL] < __Else_534 >
002f48	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002f49	43 00 00 00 20 00	Wait    4, Tc
002f4a	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_534
002f4b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
002f4c	73 00 00 00 20 00	Wait    7, Tc
002f4d	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
002f4e	53 00 00 00 20 00	Wait    5, Tc
002f4f	02 00 08 00 00 00	Cond    0x00008000

002f50	54 f5 02 00 90 00	Branch  0x2f55, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f51	84 f0 02 00 20 00	Branch  0x2f08, [CALL] < __If_536 >
002f52	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002f53	43 00 00 00 20 00	Wait    4, Tc
002f54	94 f5 02 00 00 00	Branch  0x2f59, [JMP]
002f55	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_536
002f56	f4 f0 02 00 20 00	Branch  0x2f0f, [CALL] < __Else_536 >
002f57	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002f58	43 00 00 00 20 00	Wait    4, Tc
002f59	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_536

__If_538
002f5a	43 00 00 00 20 00	Wait    4, Tc
002f5b	11 cd 84 01 00 01	Copy    [1:099a] = [SF+0], SrcBase: AI		# If_538_Func_Start
002f5c	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_538
002f5d	43 00 00 00 20 00	Wait    4, Tc
002f5e	11 cd 84 01 00 01	Copy    [1:099a] = [SF+0], SrcBase: AI		# Else_538_Func_Start
002f5f	04 00 00 00 40 00	Branch  0x0, [RET]


IsParamNeg
002f60	43 00 00 00 20 00	Wait    4, Tc
002f61	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]
002f62	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002f63	73 00 00 00 20 00	Wait    7, Tc
002f64	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002f65	53 00 00 00 20 00	Wait    5, Tc
002f66	02 00 08 00 00 00	Cond    0x00008000

002f67	74 2d 03 00 90 00	Branch  0x32d7, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f68	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002f69	a4 f5 02 00 20 00	Branch  0x2f5a, [CALL] < __If_538 >
002f6a	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002f6b	43 00 00 00 20 00	Wait    4, Tc
002f6c	b4 2d 03 00 00 00	Branch  0x32db, [JMP]
002f6d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
002f6e	d4 f5 02 00 20 00	Branch  0x2f5d, [CALL] < __Else_538 >
002f6f	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002f70	43 00 00 00 20 00	Wait    4, Tc
002f71	04 00 00 00 40 00	Branch  0x0, [RET]


__If_540
002f72	43 00 00 00 20 00	Wait    4, Tc
002f73	91 cd 84 01 00 01	Copy    [1:099b] = [SF+0], SrcBase: AI		# If_540_Func_Start
002f74	43 00 00 00 20 00	Wait    4, Tc
002f75	91 cc 84 36 13 00	Copy    [1:0999] = [1:099b]
002f76	43 00 00 00 20 00	Wait    4, Tc
002f77	06 00 00 00 00 00	Nop     		# Else_540_Func_Start
002f78	04 00 00 00 40 00	Branch  0x0, [RET]


__If_539
002f79	43 00 00 00 20 00	Wait    4, Tc
002f7a	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# If_539_Func_Start
002f7b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002f7c	73 00 00 00 20 00	Wait    7, Tc
002f7d	01 4d 98 2c 13 00	Copy    [0:309a] = [1:0996]
002f7e	53 00 00 00 20 00	Wait    5, Tc
002f7f	02 00 08 00 00 00	Cond    0x00008000

002f80	64 f8 02 00 90 00	Branch  0x2f86, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f81	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002f82	24 f7 02 00 20 00	Branch  0x2f72, [CALL] < __If_540 >
002f83	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002f84	43 00 00 00 20 00	Wait    4, Tc
002f85	64 f8 02 00 00 00	Branch  0x2f86, [JMP]
002f86	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_540

__Else_539
002f87	43 00 00 00 20 00	Wait    4, Tc
002f88	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# Else_539_Func_Start
002f89	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002f8a	73 00 00 00 20 00	Wait    7, Tc
002f8b	01 4d 98 2e 13 00	Copy    [0:309a] = [1:0997]
002f8c	53 00 00 00 20 00	Wait    5, Tc
002f8d	02 00 08 00 00 00	Cond    0x00008000

002f8e	44 f9 02 00 90 00	Branch  0x2f94, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002f8f	00 08 98 3b 05 00	Write   [0:0x3010] = a77
002f90	24 f7 02 00 20 00	Branch  0x2f72, [CALL] < __If_540 >
002f91	00 08 98 74 07 00	Write   [0:0x3010] = ee9
002f92	43 00 00 00 20 00	Wait    4, Tc
002f93	44 f9 02 00 00 00	Branch  0x2f94, [JMP]
002f94	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_541

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &)
002f95	43 00 00 00 20 00	Wait    4, Tc
002f96	91 cc 84 01 00 01	Copy    [1:0999] = [SF+0], SrcBase: AI
002f97	00 08 18 73 07 00	Write   [0:0x3010] = ee6
002f98	04 f6 02 00 20 00	Branch  0x2f60, [CALL] < IsParamNeg >
002f99	00 08 18 2c 05 00	Write   [0:0x3010] = a58
002f9a	a3 00 00 00 20 00	Wait    10, Tc
002f9b	01 48 98 34 13 00	Copy    [0:3090] = [1:099a]		# If_539
002f9c	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
002f9d	93 00 00 00 20 00	Wait    9, Tc
002f9e	02 00 00 01 00 00	Cond    0x00100000

002f9f	54 fa 02 00 90 00	Branch  0x2fa5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002fa0	00 08 18 74 07 00	Write   [0:0x3010] = ee8
002fa1	94 f7 02 00 20 00	Branch  0x2f79, [CALL] < __If_539 >
002fa2	00 08 98 2c 05 00	Write   [0:0x3010] = a59
002fa3	43 00 00 00 20 00	Wait    4, Tc
002fa4	94 fa 02 00 00 00	Branch  0x2fa9, [JMP]
002fa5	00 08 18 74 07 00	Write   [0:0x3010] = ee8		# Else_539
002fa6	74 f8 02 00 20 00	Branch  0x2f87, [CALL] < __Else_539 >
002fa7	00 08 98 2c 05 00	Write   [0:0x3010] = a59
002fa8	93 00 00 00 20 00	Wait    9, Tc
002fa9	11 ce 84 2c 13 00	Copy    [1:099c] = [1:0996]		# EndIf_539
002faa	93 00 00 00 20 00	Wait    9, Tc
002fab	91 ce 84 34 13 00	Copy    [1:099d] = [1:099a]
002fac	93 00 00 00 20 00	Wait    9, Tc
002fad	11 cf 84 32 13 00	Copy    [1:099e] = [1:0999]
002fae	43 00 00 00 20 00	Wait    4, Tc
002faf	04 00 00 00 40 00	Branch  0x0, [RET]


SetMask
002fb0	93 00 00 00 20 00	Wait    9, Tc
002fb1	11 cb 84 e6 12 00	Copy    [1:0996] = [1:0973]
002fb2	43 00 00 00 20 00	Wait    4, Tc
002fb3	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# If_542
002fb4	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002fb5	73 00 00 00 20 00	Wait    7, Tc
002fb6	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002fb7	53 00 00 00 20 00	Wait    5, Tc
002fb8	02 00 08 00 00 00	Cond    0x00008000

002fb9	e4 fb 02 00 90 00	Branch  0x2fbe, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002fba	04 db 02 00 20 00	Branch  0x2db0, [CALL] < __If_514 >
002fbb	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002fbc	43 00 00 00 20 00	Wait    4, Tc
002fbd	24 fc 02 00 00 00	Branch  0x2fc2, [JMP]
002fbe	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_542
002fbf	74 db 02 00 20 00	Branch  0x2db7, [CALL] < __Else_514 >
002fc0	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002fc1	43 00 00 00 20 00	Wait    4, Tc
002fc2	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_542
002fc3	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
002fc4	73 00 00 00 20 00	Wait    7, Tc
002fc5	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
002fc6	53 00 00 00 20 00	Wait    5, Tc
002fc7	02 00 08 00 00 00	Cond    0x00008000

002fc8	d4 fc 02 00 90 00	Branch  0x2fcd, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002fc9	24 dc 02 00 20 00	Branch  0x2dc2, [CALL] < __If_516 >
002fca	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002fcb	43 00 00 00 20 00	Wait    4, Tc
002fcc	14 fd 02 00 00 00	Branch  0x2fd1, [JMP]
002fcd	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_544
002fce	94 dc 02 00 20 00	Branch  0x2dc9, [CALL] < __Else_516 >
002fcf	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
002fd0	43 00 00 00 20 00	Wait    4, Tc
002fd1	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_544
002fd2	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
002fd3	73 00 00 00 20 00	Wait    7, Tc
002fd4	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
002fd5	53 00 00 00 20 00	Wait    5, Tc
002fd6	02 00 08 00 00 00	Cond    0x00008000

002fd7	c4 fd 02 00 90 00	Branch  0x2fdc, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002fd8	44 dd 02 00 20 00	Branch  0x2dd4, [CALL] < __If_518 >
002fd9	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002fda	43 00 00 00 20 00	Wait    4, Tc
002fdb	04 fe 02 00 00 00	Branch  0x2fe0, [JMP]
002fdc	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_546
002fdd	b4 dd 02 00 20 00	Branch  0x2ddb, [CALL] < __Else_518 >
002fde	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
002fdf	43 00 00 00 20 00	Wait    4, Tc
002fe0	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_546
002fe1	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
002fe2	73 00 00 00 20 00	Wait    7, Tc
002fe3	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
002fe4	53 00 00 00 20 00	Wait    5, Tc
002fe5	02 00 08 00 00 00	Cond    0x00008000

002fe6	b4 fe 02 00 90 00	Branch  0x2feb, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002fe7	64 de 02 00 20 00	Branch  0x2de6, [CALL] < __If_520 >
002fe8	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002fe9	43 00 00 00 20 00	Wait    4, Tc
002fea	f4 fe 02 00 00 00	Branch  0x2fef, [JMP]
002feb	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_548
002fec	d4 de 02 00 20 00	Branch  0x2ded, [CALL] < __Else_520 >
002fed	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
002fee	43 00 00 00 20 00	Wait    4, Tc
002fef	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_548

SetMask
002ff0	93 00 00 00 20 00	Wait    9, Tc
002ff1	91 cb 84 28 13 00	Copy    [1:0997] = [1:0994]
002ff2	43 00 00 00 20 00	Wait    4, Tc
002ff3	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# If_550
002ff4	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
002ff5	73 00 00 00 20 00	Wait    7, Tc
002ff6	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
002ff7	53 00 00 00 20 00	Wait    5, Tc
002ff8	02 00 08 00 00 00	Cond    0x00008000

002ff9	e4 ff 02 00 90 00	Branch  0x2ffe, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
002ffa	14 e4 02 00 20 00	Branch  0x2e41, [CALL] < __If_522 >
002ffb	00 08 98 69 07 00	Write   [0:0x3010] = ed3
002ffc	43 00 00 00 20 00	Wait    4, Tc
002ffd	24 00 03 00 00 00	Branch  0x3002, [JMP]
002ffe	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_550
002fff	84 e4 02 00 20 00	Branch  0x2e48, [CALL] < __Else_522 >
003000	00 08 98 69 07 00	Write   [0:0x3010] = ed3
003001	43 00 00 00 20 00	Wait    4, Tc
003002	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_550
003003	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
003004	73 00 00 00 20 00	Wait    7, Tc
003005	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
003006	53 00 00 00 20 00	Wait    5, Tc
003007	02 00 08 00 00 00	Cond    0x00008000

003008	d4 00 03 00 90 00	Branch  0x300d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003009	34 e5 02 00 20 00	Branch  0x2e53, [CALL] < __If_524 >
00300a	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
00300b	43 00 00 00 20 00	Wait    4, Tc
00300c	14 01 03 00 00 00	Branch  0x3011, [JMP]
00300d	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_552
00300e	a4 e5 02 00 20 00	Branch  0x2e5a, [CALL] < __Else_524 >
00300f	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
003010	43 00 00 00 20 00	Wait    4, Tc
003011	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_552
003012	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
003013	73 00 00 00 20 00	Wait    7, Tc
003014	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
003015	53 00 00 00 20 00	Wait    5, Tc
003016	02 00 08 00 00 00	Cond    0x00008000

003017	c4 01 03 00 90 00	Branch  0x301c, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003018	54 e6 02 00 20 00	Branch  0x2e65, [CALL] < __If_526 >
003019	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
00301a	43 00 00 00 20 00	Wait    4, Tc
00301b	04 02 03 00 00 00	Branch  0x3020, [JMP]
00301c	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_554
00301d	c4 e6 02 00 20 00	Branch  0x2e6c, [CALL] < __Else_526 >
00301e	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
00301f	43 00 00 00 20 00	Wait    4, Tc
003020	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_554
003021	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
003022	73 00 00 00 20 00	Wait    7, Tc
003023	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
003024	53 00 00 00 20 00	Wait    5, Tc
003025	02 00 08 00 00 00	Cond    0x00008000

003026	b4 02 03 00 90 00	Branch  0x302b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003027	74 e7 02 00 20 00	Branch  0x2e77, [CALL] < __If_528 >
003028	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003029	43 00 00 00 20 00	Wait    4, Tc
00302a	f4 02 03 00 00 00	Branch  0x302f, [JMP]
00302b	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_556
00302c	e4 e7 02 00 20 00	Branch  0x2e7e, [CALL] < __Else_528 >
00302d	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
00302e	43 00 00 00 20 00	Wait    4, Tc
00302f	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_556

SetMask
003030	93 00 00 00 20 00	Wait    9, Tc
003031	11 cc 84 2a 13 00	Copy    [1:0998] = [1:0995]
003032	43 00 00 00 20 00	Wait    4, Tc
003033	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# If_558
003034	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
003035	73 00 00 00 20 00	Wait    7, Tc
003036	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
003037	53 00 00 00 20 00	Wait    5, Tc
003038	02 00 08 00 00 00	Cond    0x00008000

003039	e4 03 03 00 90 00	Branch  0x303e, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00303a	24 ed 02 00 20 00	Branch  0x2ed2, [CALL] < __If_530 >
00303b	00 08 98 69 07 00	Write   [0:0x3010] = ed3
00303c	43 00 00 00 20 00	Wait    4, Tc
00303d	24 04 03 00 00 00	Branch  0x3042, [JMP]
00303e	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_558
00303f	94 ed 02 00 20 00	Branch  0x2ed9, [CALL] < __Else_530 >
003040	00 08 98 69 07 00	Write   [0:0x3010] = ed3
003041	43 00 00 00 20 00	Wait    4, Tc
003042	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_558
003043	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
003044	73 00 00 00 20 00	Wait    7, Tc
003045	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
003046	53 00 00 00 20 00	Wait    5, Tc
003047	02 00 08 00 00 00	Cond    0x00008000

003048	d4 04 03 00 90 00	Branch  0x304d, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003049	44 ee 02 00 20 00	Branch  0x2ee4, [CALL] < __If_532 >
00304a	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
00304b	43 00 00 00 20 00	Wait    4, Tc
00304c	14 05 03 00 00 00	Branch  0x3051, [JMP]
00304d	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_560
00304e	b4 ee 02 00 20 00	Branch  0x2eeb, [CALL] < __Else_532 >
00304f	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
003050	43 00 00 00 20 00	Wait    4, Tc
003051	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_560
003052	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
003053	73 00 00 00 20 00	Wait    7, Tc
003054	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
003055	53 00 00 00 20 00	Wait    5, Tc
003056	02 00 08 00 00 00	Cond    0x00008000

003057	c4 05 03 00 90 00	Branch  0x305c, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003058	64 ef 02 00 20 00	Branch  0x2ef6, [CALL] < __If_534 >
003059	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
00305a	43 00 00 00 20 00	Wait    4, Tc
00305b	04 06 03 00 00 00	Branch  0x3060, [JMP]
00305c	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_562
00305d	d4 ef 02 00 20 00	Branch  0x2efd, [CALL] < __Else_534 >
00305e	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
00305f	43 00 00 00 20 00	Wait    4, Tc
003060	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_562
003061	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
003062	73 00 00 00 20 00	Wait    7, Tc
003063	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
003064	53 00 00 00 20 00	Wait    5, Tc
003065	02 00 08 00 00 00	Cond    0x00008000

003066	b4 06 03 00 90 00	Branch  0x306b, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003067	84 f0 02 00 20 00	Branch  0x2f08, [CALL] < __If_536 >
003068	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003069	43 00 00 00 20 00	Wait    4, Tc
00306a	f4 06 03 00 00 00	Branch  0x306f, [JMP]
00306b	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_564
00306c	f4 f0 02 00 20 00	Branch  0x2f0f, [CALL] < __Else_536 >
00306d	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
00306e	43 00 00 00 20 00	Wait    4, Tc
00306f	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_564

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &)
003070	43 00 00 00 20 00	Wait    4, Tc
003071	91 cc 84 01 00 01	Copy    [1:0999] = [SF+0], SrcBase: AI
003072	00 08 18 73 07 00	Write   [0:0x3010] = ee6
003073	04 f6 02 00 20 00	Branch  0x2f60, [CALL] < IsParamNeg >
003074	00 08 18 2c 05 00	Write   [0:0x3010] = a58
003075	a3 00 00 00 20 00	Wait    10, Tc
003076	01 48 98 34 13 00	Copy    [0:3090] = [1:099a]		# If_567
003077	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
003078	93 00 00 00 20 00	Wait    9, Tc
003079	02 00 00 01 00 00	Cond    0x00100000

00307a	04 08 03 00 90 00	Branch  0x3080, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00307b	00 08 18 74 07 00	Write   [0:0x3010] = ee8
00307c	94 f7 02 00 20 00	Branch  0x2f79, [CALL] < __If_539 >
00307d	00 08 98 2c 05 00	Write   [0:0x3010] = a59
00307e	43 00 00 00 20 00	Wait    4, Tc
00307f	44 08 03 00 00 00	Branch  0x3084, [JMP]
003080	00 08 18 74 07 00	Write   [0:0x3010] = ee8		# Else_567
003081	74 f8 02 00 20 00	Branch  0x2f87, [CALL] < __Else_539 >
003082	00 08 98 2c 05 00	Write   [0:0x3010] = a59
003083	93 00 00 00 20 00	Wait    9, Tc
003084	91 cf 84 2c 13 00	Copy    [1:099f] = [1:0996]		# EndIf_567
003085	93 00 00 00 20 00	Wait    9, Tc
003086	11 d0 84 34 13 00	Copy    [1:09a0] = [1:099a]
003087	93 00 00 00 20 00	Wait    9, Tc
003088	91 d0 84 32 13 00	Copy    [1:09a1] = [1:0999]
003089	43 00 00 00 20 00	Wait    4, Tc
00308a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::RunThresholdTest(class ILParamShort &,class ILParamShort &)
00308b	00 08 18 dc 07 00	Write   [0:0x3010] = fb8
00308c	b4 d9 02 00 20 00	Branch  0x2d9b, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::SetThresholds(void) >
00308d	00 08 98 68 07 00	Write   [0:0x3010] = ed1
00308e	84 df 02 00 20 00	Branch  0x2df8, [CALL] < SetMask >
00308f	00 08 98 68 07 00	Write   [0:0x3010] = ed1
003090	94 e8 02 00 20 00	Branch  0x2e89, [CALL] < SetMask >
003091	00 08 98 68 07 00	Write   [0:0x3010] = ed1
003092	a4 f1 02 00 20 00	Branch  0x2f1a, [CALL] < SetMask >
003093	00 08 98 2b 05 00	Write   [0:0x3010] = a57
003094	54 f9 02 00 20 00	Branch  0x2f95, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &) >
003095	00 08 98 68 07 00	Write   [0:0x3010] = ed1
003096	04 fb 02 00 20 00	Branch  0x2fb0, [CALL] < SetMask >
003097	00 08 98 68 07 00	Write   [0:0x3010] = ed1
003098	04 ff 02 00 20 00	Branch  0x2ff0, [CALL] < SetMask >
003099	00 08 98 68 07 00	Write   [0:0x3010] = ed1
00309a	04 03 03 00 20 00	Branch  0x3030, [CALL] < SetMask >
00309b	00 08 98 2b 05 00	Write   [0:0x3010] = a57
00309c	04 07 03 00 20 00	Branch  0x3070, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &) >
00309d	04 00 00 00 40 00	Branch  0x0, [RET]


__If_570
00309e	91 c2 04 ee 00 00	Copy    [1:0985] = [0:0077]		# If_570_Func_Start
00309f	01 48 98 0a 13 00	Copy    [0:3090] = [1:0985]
0030a0	33 00 00 00 20 00	Wait    3, Tc
0030a1	80 48 98 00 00 00	Write   [0:0x3091] = 1
0030a2	53 00 00 00 20 00	Wait    5, Tc
0030a3	80 48 98 00 00 00	Write   [0:0x3091] = 1
0030a4	53 00 00 00 20 00	Wait    5, Tc
0030a5	80 48 98 00 00 00	Write   [0:0x3091] = 1
0030a6	53 00 00 00 20 00	Wait    5, Tc
0030a7	80 48 98 00 00 00	Write   [0:0x3091] = 1
0030a8	53 00 00 00 20 00	Wait    5, Tc
0030a9	91 c2 04 20 61 00	Copy    [1:0985] = [0:3090]
0030aa	53 00 00 00 20 00	Wait    5, Tc
0030ab	81 3b 80 0a 13 00	Copy    [0:0077] = [1:0985]
0030ac	06 00 00 00 00 00	Nop     		# Else_570_Func_Start
0030ad	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::SetThresholds(void)
0030ae	43 00 00 00 20 00	Wait    4, Tc
0030af	11 d1 84 01 00 01	Copy    [1:09a2] = [SF+0], SrcBase: AI
0030b0	91 d1 84 01 00 01	Copy    [1:09a3] = [SF+1], SrcBase: AI
0030b1	53 00 00 00 20 00	Wait    5, Tc
0030b2	11 d2 84 01 00 01	Copy    [1:09a4] = [SF+2], SrcBase: AI
0030b3	13 00 00 00 20 00	Wait    1, Tc
0030b4	91 d2 84 01 00 01	Copy    [1:09a5] = [SF+3], SrcBase: AI
0030b5	13 00 00 00 20 00	Wait    1, Tc
0030b6	11 d3 84 01 00 01	Copy    [1:09a6] = [SF+4], SrcBase: AI
0030b7	13 00 00 00 20 00	Wait    1, Tc
0030b8	91 d3 84 01 00 01	Copy    [1:09a7] = [SF+5], SrcBase: AI
0030b9	04 00 00 00 40 00	Branch  0x0, [RET]


SetMask
0030ba	93 00 00 00 20 00	Wait    9, Tc
0030bb	11 cb 84 e8 12 00	Copy    [1:0996] = [1:0974]
0030bc	43 00 00 00 20 00	Wait    4, Tc
0030bd	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# If_571
0030be	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0030bf	73 00 00 00 20 00	Wait    7, Tc
0030c0	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0030c1	53 00 00 00 20 00	Wait    5, Tc
0030c2	02 00 08 00 00 00	Cond    0x00008000

0030c3	84 0c 03 00 90 00	Branch  0x30c8, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0030c4	04 db 02 00 20 00	Branch  0x2db0, [CALL] < __If_514 >
0030c5	00 08 98 69 07 00	Write   [0:0x3010] = ed3
0030c6	43 00 00 00 20 00	Wait    4, Tc
0030c7	c4 0c 03 00 00 00	Branch  0x30cc, [JMP]
0030c8	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_571
0030c9	74 db 02 00 20 00	Branch  0x2db7, [CALL] < __Else_514 >
0030ca	00 08 98 69 07 00	Write   [0:0x3010] = ed3
0030cb	43 00 00 00 20 00	Wait    4, Tc
0030cc	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_571
0030cd	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
0030ce	73 00 00 00 20 00	Wait    7, Tc
0030cf	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
0030d0	53 00 00 00 20 00	Wait    5, Tc
0030d1	02 00 08 00 00 00	Cond    0x00008000

0030d2	74 0d 03 00 90 00	Branch  0x30d7, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0030d3	24 dc 02 00 20 00	Branch  0x2dc2, [CALL] < __If_516 >
0030d4	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0030d5	43 00 00 00 20 00	Wait    4, Tc
0030d6	b4 0d 03 00 00 00	Branch  0x30db, [JMP]
0030d7	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_573
0030d8	94 dc 02 00 20 00	Branch  0x2dc9, [CALL] < __Else_516 >
0030d9	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0030da	43 00 00 00 20 00	Wait    4, Tc
0030db	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_573
0030dc	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
0030dd	73 00 00 00 20 00	Wait    7, Tc
0030de	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
0030df	53 00 00 00 20 00	Wait    5, Tc
0030e0	02 00 08 00 00 00	Cond    0x00008000

0030e1	64 0e 03 00 90 00	Branch  0x30e6, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0030e2	44 dd 02 00 20 00	Branch  0x2dd4, [CALL] < __If_518 >
0030e3	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0030e4	43 00 00 00 20 00	Wait    4, Tc
0030e5	a4 0e 03 00 00 00	Branch  0x30ea, [JMP]
0030e6	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_575
0030e7	b4 dd 02 00 20 00	Branch  0x2ddb, [CALL] < __Else_518 >
0030e8	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0030e9	43 00 00 00 20 00	Wait    4, Tc
0030ea	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_575
0030eb	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
0030ec	73 00 00 00 20 00	Wait    7, Tc
0030ed	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
0030ee	53 00 00 00 20 00	Wait    5, Tc
0030ef	02 00 08 00 00 00	Cond    0x00008000

0030f0	54 0f 03 00 90 00	Branch  0x30f5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0030f1	64 de 02 00 20 00	Branch  0x2de6, [CALL] < __If_520 >
0030f2	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
0030f3	43 00 00 00 20 00	Wait    4, Tc
0030f4	94 0f 03 00 00 00	Branch  0x30f9, [JMP]
0030f5	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_577
0030f6	d4 de 02 00 20 00	Branch  0x2ded, [CALL] < __Else_520 >
0030f7	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
0030f8	43 00 00 00 20 00	Wait    4, Tc
0030f9	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_577

SetMask
0030fa	93 00 00 00 20 00	Wait    9, Tc
0030fb	91 cb 84 48 13 00	Copy    [1:0997] = [1:09a4]
0030fc	43 00 00 00 20 00	Wait    4, Tc
0030fd	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# If_579
0030fe	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0030ff	73 00 00 00 20 00	Wait    7, Tc
003100	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
003101	53 00 00 00 20 00	Wait    5, Tc
003102	02 00 08 00 00 00	Cond    0x00008000

003103	84 10 03 00 90 00	Branch  0x3108, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003104	14 e4 02 00 20 00	Branch  0x2e41, [CALL] < __If_522 >
003105	00 08 98 69 07 00	Write   [0:0x3010] = ed3
003106	43 00 00 00 20 00	Wait    4, Tc
003107	c4 10 03 00 00 00	Branch  0x310c, [JMP]
003108	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_579
003109	84 e4 02 00 20 00	Branch  0x2e48, [CALL] < __Else_522 >
00310a	00 08 98 69 07 00	Write   [0:0x3010] = ed3
00310b	43 00 00 00 20 00	Wait    4, Tc
00310c	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_579
00310d	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
00310e	73 00 00 00 20 00	Wait    7, Tc
00310f	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
003110	53 00 00 00 20 00	Wait    5, Tc
003111	02 00 08 00 00 00	Cond    0x00008000

003112	74 11 03 00 90 00	Branch  0x3117, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003113	34 e5 02 00 20 00	Branch  0x2e53, [CALL] < __If_524 >
003114	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
003115	43 00 00 00 20 00	Wait    4, Tc
003116	b4 11 03 00 00 00	Branch  0x311b, [JMP]
003117	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_581
003118	a4 e5 02 00 20 00	Branch  0x2e5a, [CALL] < __Else_524 >
003119	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
00311a	43 00 00 00 20 00	Wait    4, Tc
00311b	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_581
00311c	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
00311d	73 00 00 00 20 00	Wait    7, Tc
00311e	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
00311f	53 00 00 00 20 00	Wait    5, Tc
003120	02 00 08 00 00 00	Cond    0x00008000

003121	64 12 03 00 90 00	Branch  0x3126, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003122	54 e6 02 00 20 00	Branch  0x2e65, [CALL] < __If_526 >
003123	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
003124	43 00 00 00 20 00	Wait    4, Tc
003125	a4 12 03 00 00 00	Branch  0x312a, [JMP]
003126	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_583
003127	c4 e6 02 00 20 00	Branch  0x2e6c, [CALL] < __Else_526 >
003128	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
003129	43 00 00 00 20 00	Wait    4, Tc
00312a	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_583
00312b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
00312c	73 00 00 00 20 00	Wait    7, Tc
00312d	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
00312e	53 00 00 00 20 00	Wait    5, Tc
00312f	02 00 08 00 00 00	Cond    0x00008000

003130	54 13 03 00 90 00	Branch  0x3135, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003131	74 e7 02 00 20 00	Branch  0x2e77, [CALL] < __If_528 >
003132	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003133	43 00 00 00 20 00	Wait    4, Tc
003134	94 13 03 00 00 00	Branch  0x3139, [JMP]
003135	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_585
003136	e4 e7 02 00 20 00	Branch  0x2e7e, [CALL] < __Else_528 >
003137	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003138	43 00 00 00 20 00	Wait    4, Tc
003139	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_585

SetMask
00313a	93 00 00 00 20 00	Wait    9, Tc
00313b	11 cc 84 4a 13 00	Copy    [1:0998] = [1:09a5]
00313c	43 00 00 00 20 00	Wait    4, Tc
00313d	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# If_587
00313e	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00313f	73 00 00 00 20 00	Wait    7, Tc
003140	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
003141	53 00 00 00 20 00	Wait    5, Tc
003142	02 00 08 00 00 00	Cond    0x00008000

003143	84 14 03 00 90 00	Branch  0x3148, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003144	24 ed 02 00 20 00	Branch  0x2ed2, [CALL] < __If_530 >
003145	00 08 98 69 07 00	Write   [0:0x3010] = ed3
003146	43 00 00 00 20 00	Wait    4, Tc
003147	c4 14 03 00 00 00	Branch  0x314c, [JMP]
003148	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_587
003149	94 ed 02 00 20 00	Branch  0x2ed9, [CALL] < __Else_530 >
00314a	00 08 98 69 07 00	Write   [0:0x3010] = ed3
00314b	43 00 00 00 20 00	Wait    4, Tc
00314c	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_587
00314d	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
00314e	73 00 00 00 20 00	Wait    7, Tc
00314f	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
003150	53 00 00 00 20 00	Wait    5, Tc
003151	02 00 08 00 00 00	Cond    0x00008000

003152	74 15 03 00 90 00	Branch  0x3157, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003153	44 ee 02 00 20 00	Branch  0x2ee4, [CALL] < __If_532 >
003154	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
003155	43 00 00 00 20 00	Wait    4, Tc
003156	b4 15 03 00 00 00	Branch  0x315b, [JMP]
003157	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_589
003158	b4 ee 02 00 20 00	Branch  0x2eeb, [CALL] < __Else_532 >
003159	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
00315a	43 00 00 00 20 00	Wait    4, Tc
00315b	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_589
00315c	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
00315d	73 00 00 00 20 00	Wait    7, Tc
00315e	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
00315f	53 00 00 00 20 00	Wait    5, Tc
003160	02 00 08 00 00 00	Cond    0x00008000

003161	64 16 03 00 90 00	Branch  0x3166, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003162	64 ef 02 00 20 00	Branch  0x2ef6, [CALL] < __If_534 >
003163	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
003164	43 00 00 00 20 00	Wait    4, Tc
003165	a4 16 03 00 00 00	Branch  0x316a, [JMP]
003166	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_591
003167	d4 ef 02 00 20 00	Branch  0x2efd, [CALL] < __Else_534 >
003168	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
003169	43 00 00 00 20 00	Wait    4, Tc
00316a	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_591
00316b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
00316c	73 00 00 00 20 00	Wait    7, Tc
00316d	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
00316e	53 00 00 00 20 00	Wait    5, Tc
00316f	02 00 08 00 00 00	Cond    0x00008000

003170	54 17 03 00 90 00	Branch  0x3175, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003171	84 f0 02 00 20 00	Branch  0x2f08, [CALL] < __If_536 >
003172	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003173	43 00 00 00 20 00	Wait    4, Tc
003174	94 17 03 00 00 00	Branch  0x3179, [JMP]
003175	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_593
003176	f4 f0 02 00 20 00	Branch  0x2f0f, [CALL] < __Else_536 >
003177	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003178	43 00 00 00 20 00	Wait    4, Tc
003179	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_593

__If_597
00317a	43 00 00 00 20 00	Wait    4, Tc
00317b	11 d4 84 01 00 01	Copy    [1:09a8] = [SF+0], SrcBase: AI		# If_597_Func_Start
00317c	43 00 00 00 20 00	Wait    4, Tc
00317d	91 cc 84 50 13 00	Copy    [1:0999] = [1:09a8]
00317e	43 00 00 00 20 00	Wait    4, Tc
00317f	06 00 00 00 00 00	Nop     		# Else_597_Func_Start
003180	04 00 00 00 40 00	Branch  0x0, [RET]


__If_596
003181	43 00 00 00 20 00	Wait    4, Tc
003182	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# If_596_Func_Start
003183	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
003184	73 00 00 00 20 00	Wait    7, Tc
003185	01 4d 98 2c 13 00	Copy    [0:309a] = [1:0996]
003186	53 00 00 00 20 00	Wait    5, Tc
003187	02 00 08 00 00 00	Cond    0x00008000

003188	e4 18 03 00 90 00	Branch  0x318e, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003189	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00318a	a4 17 03 00 20 00	Branch  0x317a, [CALL] < __If_597 >
00318b	00 08 98 74 07 00	Write   [0:0x3010] = ee9
00318c	43 00 00 00 20 00	Wait    4, Tc
00318d	e4 18 03 00 00 00	Branch  0x318e, [JMP]
00318e	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_597

__Else_596
00318f	43 00 00 00 20 00	Wait    4, Tc
003190	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# Else_596_Func_Start
003191	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
003192	73 00 00 00 20 00	Wait    7, Tc
003193	01 4d 98 2e 13 00	Copy    [0:309a] = [1:0997]
003194	53 00 00 00 20 00	Wait    5, Tc
003195	02 00 08 00 00 00	Cond    0x00008000

003196	c4 19 03 00 90 00	Branch  0x319c, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003197	00 08 98 3b 05 00	Write   [0:0x3010] = a77
003198	a4 17 03 00 20 00	Branch  0x317a, [CALL] < __If_597 >
003199	00 08 98 74 07 00	Write   [0:0x3010] = ee9
00319a	43 00 00 00 20 00	Wait    4, Tc
00319b	c4 19 03 00 00 00	Branch  0x319c, [JMP]
00319c	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_598

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &)
00319d	43 00 00 00 20 00	Wait    4, Tc
00319e	91 cc 84 01 00 01	Copy    [1:0999] = [SF+0], SrcBase: AI
00319f	00 08 18 73 07 00	Write   [0:0x3010] = ee6
0031a0	04 f6 02 00 20 00	Branch  0x2f60, [CALL] < IsParamNeg >
0031a1	00 08 18 2c 05 00	Write   [0:0x3010] = a58
0031a2	a3 00 00 00 20 00	Wait    10, Tc
0031a3	01 48 98 34 13 00	Copy    [0:3090] = [1:099a]		# If_596
0031a4	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
0031a5	93 00 00 00 20 00	Wait    9, Tc
0031a6	02 00 00 01 00 00	Cond    0x00100000

0031a7	d4 1a 03 00 90 00	Branch  0x31ad, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0031a8	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0031a9	14 18 03 00 20 00	Branch  0x3181, [CALL] < __If_596 >
0031aa	00 08 98 2c 05 00	Write   [0:0x3010] = a59
0031ab	43 00 00 00 20 00	Wait    4, Tc
0031ac	14 1b 03 00 00 00	Branch  0x31b1, [JMP]
0031ad	00 08 18 74 07 00	Write   [0:0x3010] = ee8		# Else_596
0031ae	f4 18 03 00 20 00	Branch  0x318f, [CALL] < __Else_596 >
0031af	00 08 98 2c 05 00	Write   [0:0x3010] = a59
0031b0	93 00 00 00 20 00	Wait    9, Tc
0031b1	91 d4 84 2c 13 00	Copy    [1:09a9] = [1:0996]		# EndIf_596
0031b2	93 00 00 00 20 00	Wait    9, Tc
0031b3	11 d5 84 34 13 00	Copy    [1:09aa] = [1:099a]
0031b4	93 00 00 00 20 00	Wait    9, Tc
0031b5	91 d5 84 32 13 00	Copy    [1:09ab] = [1:0999]
0031b6	43 00 00 00 20 00	Wait    4, Tc
0031b7	04 00 00 00 40 00	Branch  0x0, [RET]


SetMask
0031b8	93 00 00 00 20 00	Wait    9, Tc
0031b9	11 cb 84 ea 12 00	Copy    [1:0996] = [1:0975]
0031ba	43 00 00 00 20 00	Wait    4, Tc
0031bb	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# If_599
0031bc	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0031bd	73 00 00 00 20 00	Wait    7, Tc
0031be	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0031bf	53 00 00 00 20 00	Wait    5, Tc
0031c0	02 00 08 00 00 00	Cond    0x00008000

0031c1	64 1c 03 00 90 00	Branch  0x31c6, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0031c2	04 db 02 00 20 00	Branch  0x2db0, [CALL] < __If_514 >
0031c3	00 08 98 69 07 00	Write   [0:0x3010] = ed3
0031c4	43 00 00 00 20 00	Wait    4, Tc
0031c5	a4 1c 03 00 00 00	Branch  0x31ca, [JMP]
0031c6	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_599
0031c7	74 db 02 00 20 00	Branch  0x2db7, [CALL] < __Else_514 >
0031c8	00 08 98 69 07 00	Write   [0:0x3010] = ed3
0031c9	43 00 00 00 20 00	Wait    4, Tc
0031ca	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_599
0031cb	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
0031cc	73 00 00 00 20 00	Wait    7, Tc
0031cd	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
0031ce	53 00 00 00 20 00	Wait    5, Tc
0031cf	02 00 08 00 00 00	Cond    0x00008000

0031d0	54 1d 03 00 90 00	Branch  0x31d5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0031d1	24 dc 02 00 20 00	Branch  0x2dc2, [CALL] < __If_516 >
0031d2	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0031d3	43 00 00 00 20 00	Wait    4, Tc
0031d4	94 1d 03 00 00 00	Branch  0x31d9, [JMP]
0031d5	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_601
0031d6	94 dc 02 00 20 00	Branch  0x2dc9, [CALL] < __Else_516 >
0031d7	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
0031d8	43 00 00 00 20 00	Wait    4, Tc
0031d9	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_601
0031da	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
0031db	73 00 00 00 20 00	Wait    7, Tc
0031dc	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
0031dd	53 00 00 00 20 00	Wait    5, Tc
0031de	02 00 08 00 00 00	Cond    0x00008000

0031df	44 1e 03 00 90 00	Branch  0x31e4, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0031e0	44 dd 02 00 20 00	Branch  0x2dd4, [CALL] < __If_518 >
0031e1	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0031e2	43 00 00 00 20 00	Wait    4, Tc
0031e3	84 1e 03 00 00 00	Branch  0x31e8, [JMP]
0031e4	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_603
0031e5	b4 dd 02 00 20 00	Branch  0x2ddb, [CALL] < __Else_518 >
0031e6	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
0031e7	43 00 00 00 20 00	Wait    4, Tc
0031e8	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# EndIf_603
0031e9	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
0031ea	73 00 00 00 20 00	Wait    7, Tc
0031eb	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
0031ec	53 00 00 00 20 00	Wait    5, Tc
0031ed	02 00 08 00 00 00	Cond    0x00008000

0031ee	34 1f 03 00 90 00	Branch  0x31f3, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0031ef	64 de 02 00 20 00	Branch  0x2de6, [CALL] < __If_520 >
0031f0	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
0031f1	43 00 00 00 20 00	Wait    4, Tc
0031f2	74 1f 03 00 00 00	Branch  0x31f7, [JMP]
0031f3	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_605
0031f4	d4 de 02 00 20 00	Branch  0x2ded, [CALL] < __Else_520 >
0031f5	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
0031f6	43 00 00 00 20 00	Wait    4, Tc
0031f7	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_605

SetMask
0031f8	93 00 00 00 20 00	Wait    9, Tc
0031f9	91 cb 84 4c 13 00	Copy    [1:0997] = [1:09a6]
0031fa	43 00 00 00 20 00	Wait    4, Tc
0031fb	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# If_607
0031fc	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0031fd	73 00 00 00 20 00	Wait    7, Tc
0031fe	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0031ff	53 00 00 00 20 00	Wait    5, Tc
003200	02 00 08 00 00 00	Cond    0x00008000

003201	64 20 03 00 90 00	Branch  0x3206, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003202	14 e4 02 00 20 00	Branch  0x2e41, [CALL] < __If_522 >
003203	00 08 98 69 07 00	Write   [0:0x3010] = ed3
003204	43 00 00 00 20 00	Wait    4, Tc
003205	a4 20 03 00 00 00	Branch  0x320a, [JMP]
003206	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_607
003207	84 e4 02 00 20 00	Branch  0x2e48, [CALL] < __Else_522 >
003208	00 08 98 69 07 00	Write   [0:0x3010] = ed3
003209	43 00 00 00 20 00	Wait    4, Tc
00320a	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_607
00320b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
00320c	73 00 00 00 20 00	Wait    7, Tc
00320d	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
00320e	53 00 00 00 20 00	Wait    5, Tc
00320f	02 00 08 00 00 00	Cond    0x00008000

003210	54 21 03 00 90 00	Branch  0x3215, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003211	34 e5 02 00 20 00	Branch  0x2e53, [CALL] < __If_524 >
003212	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
003213	43 00 00 00 20 00	Wait    4, Tc
003214	94 21 03 00 00 00	Branch  0x3219, [JMP]
003215	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_609
003216	a4 e5 02 00 20 00	Branch  0x2e5a, [CALL] < __Else_524 >
003217	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
003218	43 00 00 00 20 00	Wait    4, Tc
003219	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_609
00321a	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
00321b	73 00 00 00 20 00	Wait    7, Tc
00321c	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
00321d	53 00 00 00 20 00	Wait    5, Tc
00321e	02 00 08 00 00 00	Cond    0x00008000

00321f	44 22 03 00 90 00	Branch  0x3224, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003220	54 e6 02 00 20 00	Branch  0x2e65, [CALL] < __If_526 >
003221	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
003222	43 00 00 00 20 00	Wait    4, Tc
003223	84 22 03 00 00 00	Branch  0x3228, [JMP]
003224	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_611
003225	c4 e6 02 00 20 00	Branch  0x2e6c, [CALL] < __Else_526 >
003226	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
003227	43 00 00 00 20 00	Wait    4, Tc
003228	01 4c 98 2e 13 00	Copy    [0:3098] = [1:0997]		# EndIf_611
003229	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
00322a	73 00 00 00 20 00	Wait    7, Tc
00322b	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
00322c	53 00 00 00 20 00	Wait    5, Tc
00322d	02 00 08 00 00 00	Cond    0x00008000

00322e	34 23 03 00 90 00	Branch  0x3233, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00322f	74 e7 02 00 20 00	Branch  0x2e77, [CALL] < __If_528 >
003230	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003231	43 00 00 00 20 00	Wait    4, Tc
003232	74 23 03 00 00 00	Branch  0x3237, [JMP]
003233	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_613
003234	e4 e7 02 00 20 00	Branch  0x2e7e, [CALL] < __Else_528 >
003235	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003236	43 00 00 00 20 00	Wait    4, Tc
003237	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_613

SetMask
003238	93 00 00 00 20 00	Wait    9, Tc
003239	11 cc 84 4e 13 00	Copy    [1:0998] = [1:09a7]
00323a	43 00 00 00 20 00	Wait    4, Tc
00323b	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# If_615
00323c	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
00323d	73 00 00 00 20 00	Wait    7, Tc
00323e	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
00323f	53 00 00 00 20 00	Wait    5, Tc
003240	02 00 08 00 00 00	Cond    0x00008000

003241	64 24 03 00 90 00	Branch  0x3246, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003242	24 ed 02 00 20 00	Branch  0x2ed2, [CALL] < __If_530 >
003243	00 08 98 69 07 00	Write   [0:0x3010] = ed3
003244	43 00 00 00 20 00	Wait    4, Tc
003245	a4 24 03 00 00 00	Branch  0x324a, [JMP]
003246	00 08 18 6e 07 00	Write   [0:0x3010] = edc		# Else_615
003247	94 ed 02 00 20 00	Branch  0x2ed9, [CALL] < __Else_530 >
003248	00 08 98 69 07 00	Write   [0:0x3010] = ed3
003249	43 00 00 00 20 00	Wait    4, Tc
00324a	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_615
00324b	81 4c 98 01 00 01	Copy    [0:3099] = [SF+2], SrcBase: AI
00324c	73 00 00 00 20 00	Wait    7, Tc
00324d	01 4d 98 01 00 01	Copy    [0:309a] = [SF+3], SrcBase: AI
00324e	53 00 00 00 20 00	Wait    5, Tc
00324f	02 00 08 00 00 00	Cond    0x00008000

003250	54 25 03 00 90 00	Branch  0x3255, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003251	44 ee 02 00 20 00	Branch  0x2ee4, [CALL] < __If_532 >
003252	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
003253	43 00 00 00 20 00	Wait    4, Tc
003254	94 25 03 00 00 00	Branch  0x3259, [JMP]
003255	00 08 18 70 07 00	Write   [0:0x3010] = ee0		# Else_617
003256	b4 ee 02 00 20 00	Branch  0x2eeb, [CALL] < __Else_532 >
003257	00 08 98 6a 07 00	Write   [0:0x3010] = ed5
003258	43 00 00 00 20 00	Wait    4, Tc
003259	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_617
00325a	81 4c 98 01 00 01	Copy    [0:3099] = [SF+4], SrcBase: AI
00325b	73 00 00 00 20 00	Wait    7, Tc
00325c	01 4d 98 01 00 01	Copy    [0:309a] = [SF+5], SrcBase: AI
00325d	53 00 00 00 20 00	Wait    5, Tc
00325e	02 00 08 00 00 00	Cond    0x00008000

00325f	44 26 03 00 90 00	Branch  0x3264, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003260	64 ef 02 00 20 00	Branch  0x2ef6, [CALL] < __If_534 >
003261	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
003262	43 00 00 00 20 00	Wait    4, Tc
003263	84 26 03 00 00 00	Branch  0x3268, [JMP]
003264	00 08 98 70 07 00	Write   [0:0x3010] = ee1		# Else_619
003265	d4 ef 02 00 20 00	Branch  0x2efd, [CALL] < __Else_534 >
003266	00 08 98 6b 07 00	Write   [0:0x3010] = ed7
003267	43 00 00 00 20 00	Wait    4, Tc
003268	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# EndIf_619
003269	81 4c 98 01 00 01	Copy    [0:3099] = [SF+6], SrcBase: AI
00326a	73 00 00 00 20 00	Wait    7, Tc
00326b	01 4d 98 01 00 01	Copy    [0:309a] = [SF+7], SrcBase: AI
00326c	53 00 00 00 20 00	Wait    5, Tc
00326d	02 00 08 00 00 00	Cond    0x00008000

00326e	34 27 03 00 90 00	Branch  0x3273, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00326f	84 f0 02 00 20 00	Branch  0x2f08, [CALL] < __If_536 >
003270	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003271	43 00 00 00 20 00	Wait    4, Tc
003272	74 27 03 00 00 00	Branch  0x3277, [JMP]
003273	00 08 98 72 07 00	Write   [0:0x3010] = ee5		# Else_621
003274	f4 f0 02 00 20 00	Branch  0x2f0f, [CALL] < __Else_536 >
003275	00 08 98 6c 07 00	Write   [0:0x3010] = ed9
003276	43 00 00 00 20 00	Wait    4, Tc
003277	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_621

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &)
003278	43 00 00 00 20 00	Wait    4, Tc
003279	91 cc 84 01 00 01	Copy    [1:0999] = [SF+0], SrcBase: AI
00327a	00 08 18 73 07 00	Write   [0:0x3010] = ee6
00327b	04 f6 02 00 20 00	Branch  0x2f60, [CALL] < IsParamNeg >
00327c	00 08 18 2c 05 00	Write   [0:0x3010] = a58
00327d	a3 00 00 00 20 00	Wait    10, Tc
00327e	01 48 98 34 13 00	Copy    [0:3090] = [1:099a]		# If_624
00327f	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
003280	93 00 00 00 20 00	Wait    9, Tc
003281	02 00 00 01 00 00	Cond    0x00100000

003282	84 28 03 00 90 00	Branch  0x3288, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003283	00 08 18 74 07 00	Write   [0:0x3010] = ee8
003284	14 18 03 00 20 00	Branch  0x3181, [CALL] < __If_596 >
003285	00 08 98 2c 05 00	Write   [0:0x3010] = a59
003286	43 00 00 00 20 00	Wait    4, Tc
003287	c4 28 03 00 00 00	Branch  0x328c, [JMP]
003288	00 08 18 74 07 00	Write   [0:0x3010] = ee8		# Else_624
003289	f4 18 03 00 20 00	Branch  0x318f, [CALL] < __Else_596 >
00328a	00 08 98 2c 05 00	Write   [0:0x3010] = a59
00328b	93 00 00 00 20 00	Wait    9, Tc
00328c	11 d6 84 2c 13 00	Copy    [1:09ac] = [1:0996]		# EndIf_624
00328d	93 00 00 00 20 00	Wait    9, Tc
00328e	91 d6 84 34 13 00	Copy    [1:09ad] = [1:099a]
00328f	93 00 00 00 20 00	Wait    9, Tc
003290	11 d7 84 32 13 00	Copy    [1:09ae] = [1:0999]
003291	43 00 00 00 20 00	Wait    4, Tc
003292	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::RunThresholdTest(class ILParamShort &,class ILParamShort &)
003293	00 08 18 dc 07 00	Write   [0:0x3010] = fb8
003294	e4 0a 03 00 20 00	Branch  0x30ae, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::SetThresholds(void) >
003295	00 08 98 68 07 00	Write   [0:0x3010] = ed1
003296	a4 0b 03 00 20 00	Branch  0x30ba, [CALL] < SetMask >
003297	00 08 98 68 07 00	Write   [0:0x3010] = ed1
003298	a4 0f 03 00 20 00	Branch  0x30fa, [CALL] < SetMask >
003299	00 08 98 68 07 00	Write   [0:0x3010] = ed1
00329a	a4 13 03 00 20 00	Branch  0x313a, [CALL] < SetMask >
00329b	00 08 98 2b 05 00	Write   [0:0x3010] = a57
00329c	d4 19 03 00 20 00	Branch  0x319d, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &) >
00329d	00 08 98 68 07 00	Write   [0:0x3010] = ed1
00329e	84 1b 03 00 20 00	Branch  0x31b8, [CALL] < SetMask >
00329f	00 08 98 68 07 00	Write   [0:0x3010] = ed1
0032a0	84 1f 03 00 20 00	Branch  0x31f8, [CALL] < SetMask >
0032a1	00 08 98 68 07 00	Write   [0:0x3010] = ed1
0032a2	84 23 03 00 20 00	Branch  0x3238, [CALL] < SetMask >
0032a3	00 08 98 2b 05 00	Write   [0:0x3010] = a57
0032a4	84 27 03 00 20 00	Branch  0x3278, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &) >
0032a5	04 00 00 00 40 00	Branch  0x0, [RET]


__If_627
0032a6	91 c2 04 ee 00 00	Copy    [1:0985] = [0:0077]		# If_627_Func_Start
0032a7	01 48 98 0a 13 00	Copy    [0:3090] = [1:0985]
0032a8	33 00 00 00 20 00	Wait    3, Tc
0032a9	80 48 98 00 00 00	Write   [0:0x3091] = 1
0032aa	53 00 00 00 20 00	Wait    5, Tc
0032ab	80 48 98 00 00 00	Write   [0:0x3091] = 1
0032ac	53 00 00 00 20 00	Wait    5, Tc
0032ad	80 48 98 00 00 00	Write   [0:0x3091] = 1
0032ae	53 00 00 00 20 00	Wait    5, Tc
0032af	80 48 98 00 00 00	Write   [0:0x3091] = 1
0032b0	53 00 00 00 20 00	Wait    5, Tc
0032b1	80 48 98 00 00 00	Write   [0:0x3091] = 1
0032b2	53 00 00 00 20 00	Wait    5, Tc
0032b3	80 48 98 00 00 00	Write   [0:0x3091] = 1
0032b4	53 00 00 00 20 00	Wait    5, Tc
0032b5	80 48 98 00 00 00	Write   [0:0x3091] = 1
0032b6	53 00 00 00 20 00	Wait    5, Tc
0032b7	80 48 98 00 00 00	Write   [0:0x3091] = 1
0032b8	53 00 00 00 20 00	Wait    5, Tc
0032b9	91 c2 04 20 61 00	Copy    [1:0985] = [0:3090]
0032ba	53 00 00 00 20 00	Wait    5, Tc
0032bb	81 3b 80 0a 13 00	Copy    [0:0077] = [1:0985]
0032bc	06 00 00 00 00 00	Nop     		# Else_627_Func_Start
0032bd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::SetThresholds(void)
0032be	43 00 00 00 20 00	Wait    4, Tc
0032bf	91 d7 84 01 00 01	Copy    [1:09af] = [SF+0], SrcBase: AI
0032c0	11 d8 84 01 00 01	Copy    [1:09b0] = [SF+1], SrcBase: AI
0032c1	53 00 00 00 20 00	Wait    5, Tc
0032c2	91 d8 84 01 00 01	Copy    [1:09b1] = [SF+2], SrcBase: AI
0032c3	13 00 00 00 20 00	Wait    1, Tc
0032c4	11 d9 84 01 00 01	Copy    [1:09b2] = [SF+3], SrcBase: AI
0032c5	13 00 00 00 20 00	Wait    1, Tc
0032c6	91 d9 84 01 00 01	Copy    [1:09b3] = [SF+4], SrcBase: AI
0032c7	13 00 00 00 20 00	Wait    1, Tc
0032c8	11 da 84 01 00 01	Copy    [1:09b4] = [SF+5], SrcBase: AI
0032c9	04 00 00 00 40 00	Branch  0x0, [RET]


IsParamNeg
0032ca	43 00 00 00 20 00	Wait    4, Tc
0032cb	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# If_538
0032cc	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0032cd	73 00 00 00 20 00	Wait    7, Tc
0032ce	01 4d 98 01 00 01	Copy    [0:309a] = [SF+1], SrcBase: AI
0032cf	53 00 00 00 20 00	Wait    5, Tc
0032d0	02 00 08 00 00 00	Cond    0x00008000

0032d1	74 2d 03 00 90 00	Branch  0x32d7, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0032d2	00 08 98 3b 05 00	Write   [0:0x3010] = a77
0032d3	a4 f5 02 00 20 00	Branch  0x2f5a, [CALL] < __If_538 >
0032d4	00 08 98 75 07 00	Write   [0:0x3010] = eeb
0032d5	43 00 00 00 20 00	Wait    4, Tc
0032d6	b4 2d 03 00 00 00	Branch  0x32db, [JMP]
0032d7	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_538
0032d8	d4 f5 02 00 20 00	Branch  0x2f5d, [CALL] < __Else_538 >
0032d9	00 08 98 75 07 00	Write   [0:0x3010] = eeb
0032da	43 00 00 00 20 00	Wait    4, Tc
0032db	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_538

__If_630
0032dc	43 00 00 00 20 00	Wait    4, Tc
0032dd	91 da 84 01 00 01	Copy    [1:09b5] = [SF+0], SrcBase: AI		# If_630_Func_Start
0032de	43 00 00 00 20 00	Wait    4, Tc
0032df	91 cc 84 6a 13 00	Copy    [1:0999] = [1:09b5]
0032e0	43 00 00 00 20 00	Wait    4, Tc
0032e1	06 00 00 00 00 00	Nop     		# Else_630_Func_Start
0032e2	04 00 00 00 40 00	Branch  0x0, [RET]


__If_629
0032e3	43 00 00 00 20 00	Wait    4, Tc
0032e4	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# If_629_Func_Start
0032e5	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0032e6	73 00 00 00 20 00	Wait    7, Tc
0032e7	01 4d 98 2c 13 00	Copy    [0:309a] = [1:0996]
0032e8	53 00 00 00 20 00	Wait    5, Tc
0032e9	02 00 08 00 00 00	Cond    0x00008000

0032ea	04 2f 03 00 90 00	Branch  0x32f0, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0032eb	00 08 98 3b 05 00	Write   [0:0x3010] = a77
0032ec	c4 2d 03 00 20 00	Branch  0x32dc, [CALL] < __If_630 >
0032ed	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0032ee	43 00 00 00 20 00	Wait    4, Tc
0032ef	04 2f 03 00 00 00	Branch  0x32f0, [JMP]
0032f0	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_630

__Else_629
0032f1	43 00 00 00 20 00	Wait    4, Tc
0032f2	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# Else_629_Func_Start
0032f3	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0032f4	73 00 00 00 20 00	Wait    7, Tc
0032f5	01 4d 98 2e 13 00	Copy    [0:309a] = [1:0997]
0032f6	53 00 00 00 20 00	Wait    5, Tc
0032f7	02 00 08 00 00 00	Cond    0x00008000

0032f8	e4 2f 03 00 90 00	Branch  0x32fe, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0032f9	00 08 98 3b 05 00	Write   [0:0x3010] = a77
0032fa	c4 2d 03 00 20 00	Branch  0x32dc, [CALL] < __If_630 >
0032fb	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0032fc	43 00 00 00 20 00	Wait    4, Tc
0032fd	e4 2f 03 00 00 00	Branch  0x32fe, [JMP]
0032fe	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_631

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &)
0032ff	43 00 00 00 20 00	Wait    4, Tc
003300	91 cc 84 01 00 01	Copy    [1:0999] = [SF+0], SrcBase: AI
003301	00 08 98 74 07 00	Write   [0:0x3010] = ee9
003302	a4 2c 03 00 20 00	Branch  0x32ca, [CALL] < IsParamNeg >
003303	00 08 18 2c 05 00	Write   [0:0x3010] = a58
003304	a3 00 00 00 20 00	Wait    10, Tc
003305	01 48 98 34 13 00	Copy    [0:3090] = [1:099a]		# If_629
003306	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
003307	93 00 00 00 20 00	Wait    9, Tc
003308	02 00 00 01 00 00	Cond    0x00100000

003309	f4 30 03 00 90 00	Branch  0x330f, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00330a	00 08 18 74 07 00	Write   [0:0x3010] = ee8
00330b	34 2e 03 00 20 00	Branch  0x32e3, [CALL] < __If_629 >
00330c	00 08 98 2c 05 00	Write   [0:0x3010] = a59
00330d	43 00 00 00 20 00	Wait    4, Tc
00330e	34 31 03 00 00 00	Branch  0x3313, [JMP]
00330f	00 08 18 74 07 00	Write   [0:0x3010] = ee8		# Else_629
003310	14 2f 03 00 20 00	Branch  0x32f1, [CALL] < __Else_629 >
003311	00 08 98 2c 05 00	Write   [0:0x3010] = a59
003312	93 00 00 00 20 00	Wait    9, Tc
003313	11 db 84 2c 13 00	Copy    [1:09b6] = [1:0996]		# EndIf_629
003314	93 00 00 00 20 00	Wait    9, Tc
003315	91 db 84 34 13 00	Copy    [1:09b7] = [1:099a]
003316	93 00 00 00 20 00	Wait    9, Tc
003317	11 dc 84 32 13 00	Copy    [1:09b8] = [1:0999]
003318	43 00 00 00 20 00	Wait    4, Tc
003319	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &)
00331a	43 00 00 00 20 00	Wait    4, Tc
00331b	91 cc 84 01 00 01	Copy    [1:0999] = [SF+0], SrcBase: AI
00331c	00 08 98 74 07 00	Write   [0:0x3010] = ee9
00331d	a4 2c 03 00 20 00	Branch  0x32ca, [CALL] < IsParamNeg >
00331e	00 08 18 2c 05 00	Write   [0:0x3010] = a58
00331f	a3 00 00 00 20 00	Wait    10, Tc
003320	01 48 98 34 13 00	Copy    [0:3090] = [1:099a]		# If_633
003321	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
003322	93 00 00 00 20 00	Wait    9, Tc
003323	02 00 00 01 00 00	Cond    0x00100000

003324	a4 32 03 00 90 00	Branch  0x332a, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003325	00 08 18 74 07 00	Write   [0:0x3010] = ee8
003326	34 2e 03 00 20 00	Branch  0x32e3, [CALL] < __If_629 >
003327	00 08 98 2c 05 00	Write   [0:0x3010] = a59
003328	43 00 00 00 20 00	Wait    4, Tc
003329	e4 32 03 00 00 00	Branch  0x332e, [JMP]
00332a	00 08 18 74 07 00	Write   [0:0x3010] = ee8		# Else_633
00332b	14 2f 03 00 20 00	Branch  0x32f1, [CALL] < __Else_629 >
00332c	00 08 98 2c 05 00	Write   [0:0x3010] = a59
00332d	93 00 00 00 20 00	Wait    9, Tc
00332e	91 dc 84 2c 13 00	Copy    [1:09b9] = [1:0996]		# EndIf_633
00332f	93 00 00 00 20 00	Wait    9, Tc
003330	11 dd 84 34 13 00	Copy    [1:09ba] = [1:099a]
003331	93 00 00 00 20 00	Wait    9, Tc
003332	91 dd 84 32 13 00	Copy    [1:09bb] = [1:0999]
003333	43 00 00 00 20 00	Wait    4, Tc
003334	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::RunThresholdTest(class ILParamShort &,class ILParamShort &)
003335	00 08 18 df 07 00	Write   [0:0x3010] = fbe
003336	e4 2b 03 00 20 00	Branch  0x32be, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::SetThresholds(void) >
003337	43 00 00 00 20 00	Wait    4, Tc
003338	11 cb 84 ec 12 00	Copy    [1:0996] = [1:0976]
003339	93 00 00 00 20 00	Wait    9, Tc
00333a	91 cb 84 62 13 00	Copy    [1:0997] = [1:09b1]
00333b	93 00 00 00 20 00	Wait    9, Tc
00333c	11 cc 84 64 13 00	Copy    [1:0998] = [1:09b2]
00333d	43 00 00 00 20 00	Wait    4, Tc
00333e	00 08 98 2b 05 00	Write   [0:0x3010] = a57
00333f	f4 2f 03 00 20 00	Branch  0x32ff, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &) >
003340	43 00 00 00 20 00	Wait    4, Tc
003341	11 cb 84 ee 12 00	Copy    [1:0996] = [1:0977]
003342	93 00 00 00 20 00	Wait    9, Tc
003343	91 cb 84 66 13 00	Copy    [1:0997] = [1:09b3]
003344	93 00 00 00 20 00	Wait    9, Tc
003345	11 cc 84 68 13 00	Copy    [1:0998] = [1:09b4]
003346	43 00 00 00 20 00	Wait    4, Tc
003347	00 08 98 2b 05 00	Write   [0:0x3010] = a57
003348	a4 31 03 00 20 00	Branch  0x331a, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &) >
003349	04 00 00 00 40 00	Branch  0x0, [RET]


__If_636
00334a	91 c2 04 ee 00 00	Copy    [1:0985] = [0:0077]		# If_636_Func_Start
00334b	01 48 98 0a 13 00	Copy    [0:3090] = [1:0985]
00334c	33 00 00 00 20 00	Wait    3, Tc
00334d	80 48 98 00 00 00	Write   [0:0x3091] = 1
00334e	53 00 00 00 20 00	Wait    5, Tc
00334f	80 48 98 00 00 00	Write   [0:0x3091] = 1
003350	53 00 00 00 20 00	Wait    5, Tc
003351	80 48 98 00 00 00	Write   [0:0x3091] = 1
003352	53 00 00 00 20 00	Wait    5, Tc
003353	80 48 98 00 00 00	Write   [0:0x3091] = 1
003354	53 00 00 00 20 00	Wait    5, Tc
003355	80 48 98 00 00 00	Write   [0:0x3091] = 1
003356	53 00 00 00 20 00	Wait    5, Tc
003357	80 48 98 00 00 00	Write   [0:0x3091] = 1
003358	53 00 00 00 20 00	Wait    5, Tc
003359	80 48 98 00 00 00	Write   [0:0x3091] = 1
00335a	53 00 00 00 20 00	Wait    5, Tc
00335b	80 48 98 00 00 00	Write   [0:0x3091] = 1
00335c	53 00 00 00 20 00	Wait    5, Tc
00335d	80 48 98 00 00 00	Write   [0:0x3091] = 1
00335e	53 00 00 00 20 00	Wait    5, Tc
00335f	80 48 98 00 00 00	Write   [0:0x3091] = 1
003360	53 00 00 00 20 00	Wait    5, Tc
003361	80 48 98 00 00 00	Write   [0:0x3091] = 1
003362	53 00 00 00 20 00	Wait    5, Tc
003363	80 48 98 00 00 00	Write   [0:0x3091] = 1
003364	53 00 00 00 20 00	Wait    5, Tc
003365	80 48 98 00 00 00	Write   [0:0x3091] = 1
003366	53 00 00 00 20 00	Wait    5, Tc
003367	80 48 98 00 00 00	Write   [0:0x3091] = 1
003368	53 00 00 00 20 00	Wait    5, Tc
003369	80 48 98 00 00 00	Write   [0:0x3091] = 1
00336a	53 00 00 00 20 00	Wait    5, Tc
00336b	80 48 98 00 00 00	Write   [0:0x3091] = 1
00336c	53 00 00 00 20 00	Wait    5, Tc
00336d	91 c2 04 20 61 00	Copy    [1:0985] = [0:3090]
00336e	53 00 00 00 20 00	Wait    5, Tc
00336f	81 3b 80 0a 13 00	Copy    [0:0077] = [1:0985]
003370	06 00 00 00 00 00	Nop     		# Else_636_Func_Start
003371	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::SetThresholds(void)
003372	43 00 00 00 20 00	Wait    4, Tc
003373	11 de 84 01 00 01	Copy    [1:09bc] = [SF+0], SrcBase: AI
003374	91 de 84 01 00 01	Copy    [1:09bd] = [SF+1], SrcBase: AI
003375	53 00 00 00 20 00	Wait    5, Tc
003376	11 df 84 01 00 01	Copy    [1:09be] = [SF+2], SrcBase: AI
003377	13 00 00 00 20 00	Wait    1, Tc
003378	91 df 84 01 00 01	Copy    [1:09bf] = [SF+3], SrcBase: AI
003379	13 00 00 00 20 00	Wait    1, Tc
00337a	11 e0 84 01 00 01	Copy    [1:09c0] = [SF+4], SrcBase: AI
00337b	13 00 00 00 20 00	Wait    1, Tc
00337c	91 e0 84 01 00 01	Copy    [1:09c1] = [SF+5], SrcBase: AI
00337d	04 00 00 00 40 00	Branch  0x0, [RET]


__If_639
00337e	43 00 00 00 20 00	Wait    4, Tc
00337f	11 e1 84 01 00 01	Copy    [1:09c2] = [SF+0], SrcBase: AI		# If_639_Func_Start
003380	43 00 00 00 20 00	Wait    4, Tc
003381	91 cc 84 84 13 00	Copy    [1:0999] = [1:09c2]
003382	43 00 00 00 20 00	Wait    4, Tc
003383	06 00 00 00 00 00	Nop     		# Else_639_Func_Start
003384	04 00 00 00 40 00	Branch  0x0, [RET]


__If_638
003385	43 00 00 00 20 00	Wait    4, Tc
003386	01 4c 98 30 13 00	Copy    [0:3098] = [1:0998]		# If_638_Func_Start
003387	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
003388	73 00 00 00 20 00	Wait    7, Tc
003389	01 4d 98 2c 13 00	Copy    [0:309a] = [1:0996]
00338a	53 00 00 00 20 00	Wait    5, Tc
00338b	02 00 08 00 00 00	Cond    0x00008000

00338c	24 39 03 00 90 00	Branch  0x3392, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00338d	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00338e	e4 37 03 00 20 00	Branch  0x337e, [CALL] < __If_639 >
00338f	00 08 98 74 07 00	Write   [0:0x3010] = ee9
003390	43 00 00 00 20 00	Wait    4, Tc
003391	24 39 03 00 00 00	Branch  0x3392, [JMP]
003392	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_639

__Else_638
003393	43 00 00 00 20 00	Wait    4, Tc
003394	01 4c 98 2c 13 00	Copy    [0:3098] = [1:0996]		# Else_638_Func_Start
003395	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
003396	73 00 00 00 20 00	Wait    7, Tc
003397	01 4d 98 2e 13 00	Copy    [0:309a] = [1:0997]
003398	53 00 00 00 20 00	Wait    5, Tc
003399	02 00 08 00 00 00	Cond    0x00008000

00339a	04 3a 03 00 90 00	Branch  0x33a0, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00339b	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00339c	e4 37 03 00 20 00	Branch  0x337e, [CALL] < __If_639 >
00339d	00 08 98 74 07 00	Write   [0:0x3010] = ee9
00339e	43 00 00 00 20 00	Wait    4, Tc
00339f	04 3a 03 00 00 00	Branch  0x33a0, [JMP]
0033a0	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_640

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &)
0033a1	43 00 00 00 20 00	Wait    4, Tc
0033a2	91 cc 84 01 00 01	Copy    [1:0999] = [SF+0], SrcBase: AI
0033a3	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0033a4	a4 2c 03 00 20 00	Branch  0x32ca, [CALL] < IsParamNeg >
0033a5	00 08 18 2c 05 00	Write   [0:0x3010] = a58
0033a6	a3 00 00 00 20 00	Wait    10, Tc
0033a7	01 48 98 34 13 00	Copy    [0:3090] = [1:099a]		# If_638
0033a8	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
0033a9	93 00 00 00 20 00	Wait    9, Tc
0033aa	02 00 00 01 00 00	Cond    0x00100000

0033ab	14 3b 03 00 90 00	Branch  0x33b1, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0033ac	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0033ad	54 38 03 00 20 00	Branch  0x3385, [CALL] < __If_638 >
0033ae	00 08 98 2c 05 00	Write   [0:0x3010] = a59
0033af	43 00 00 00 20 00	Wait    4, Tc
0033b0	54 3b 03 00 00 00	Branch  0x33b5, [JMP]
0033b1	00 08 18 74 07 00	Write   [0:0x3010] = ee8		# Else_638
0033b2	34 39 03 00 20 00	Branch  0x3393, [CALL] < __Else_638 >
0033b3	00 08 98 2c 05 00	Write   [0:0x3010] = a59
0033b4	93 00 00 00 20 00	Wait    9, Tc
0033b5	91 e1 84 2c 13 00	Copy    [1:09c3] = [1:0996]		# EndIf_638
0033b6	93 00 00 00 20 00	Wait    9, Tc
0033b7	11 e2 84 34 13 00	Copy    [1:09c4] = [1:099a]
0033b8	93 00 00 00 20 00	Wait    9, Tc
0033b9	91 e2 84 32 13 00	Copy    [1:09c5] = [1:0999]
0033ba	43 00 00 00 20 00	Wait    4, Tc
0033bb	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &)
0033bc	43 00 00 00 20 00	Wait    4, Tc
0033bd	91 cc 84 01 00 01	Copy    [1:0999] = [SF+0], SrcBase: AI
0033be	00 08 98 74 07 00	Write   [0:0x3010] = ee9
0033bf	a4 2c 03 00 20 00	Branch  0x32ca, [CALL] < IsParamNeg >
0033c0	00 08 18 2c 05 00	Write   [0:0x3010] = a58
0033c1	a3 00 00 00 20 00	Wait    10, Tc
0033c2	01 48 98 34 13 00	Copy    [0:3090] = [1:099a]		# If_642
0033c3	01 49 98 01 00 01	Copy    [0:3092] = [SF+1], SrcBase: AI
0033c4	93 00 00 00 20 00	Wait    9, Tc
0033c5	02 00 00 01 00 00	Cond    0x00100000

0033c6	c4 3c 03 00 90 00	Branch  0x33cc, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0033c7	00 08 18 74 07 00	Write   [0:0x3010] = ee8
0033c8	54 38 03 00 20 00	Branch  0x3385, [CALL] < __If_638 >
0033c9	00 08 98 2c 05 00	Write   [0:0x3010] = a59
0033ca	43 00 00 00 20 00	Wait    4, Tc
0033cb	04 3d 03 00 00 00	Branch  0x33d0, [JMP]
0033cc	00 08 18 74 07 00	Write   [0:0x3010] = ee8		# Else_642
0033cd	34 39 03 00 20 00	Branch  0x3393, [CALL] < __Else_638 >
0033ce	00 08 98 2c 05 00	Write   [0:0x3010] = a59
0033cf	93 00 00 00 20 00	Wait    9, Tc
0033d0	11 e3 84 2c 13 00	Copy    [1:09c6] = [1:0996]		# EndIf_642
0033d1	93 00 00 00 20 00	Wait    9, Tc
0033d2	91 e3 84 34 13 00	Copy    [1:09c7] = [1:099a]
0033d3	93 00 00 00 20 00	Wait    9, Tc
0033d4	11 e4 84 32 13 00	Copy    [1:09c8] = [1:0999]
0033d5	43 00 00 00 20 00	Wait    4, Tc
0033d6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::RunThresholdTest(class ILParamShort &,class ILParamShort &)
0033d7	00 08 18 df 07 00	Write   [0:0x3010] = fbe
0033d8	24 37 03 00 20 00	Branch  0x3372, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::SetThresholds(void) >
0033d9	43 00 00 00 20 00	Wait    4, Tc
0033da	11 cb 84 f0 12 00	Copy    [1:0996] = [1:0978]
0033db	93 00 00 00 20 00	Wait    9, Tc
0033dc	91 cb 84 7c 13 00	Copy    [1:0997] = [1:09be]
0033dd	93 00 00 00 20 00	Wait    9, Tc
0033de	11 cc 84 7e 13 00	Copy    [1:0998] = [1:09bf]
0033df	43 00 00 00 20 00	Wait    4, Tc
0033e0	00 08 98 2b 05 00	Write   [0:0x3010] = a57
0033e1	14 3a 03 00 20 00	Branch  0x33a1, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &) >
0033e2	43 00 00 00 20 00	Wait    4, Tc
0033e3	11 cb 84 f2 12 00	Copy    [1:0996] = [1:0979]
0033e4	93 00 00 00 20 00	Wait    9, Tc
0033e5	91 cb 84 80 13 00	Copy    [1:0997] = [1:09c0]
0033e6	93 00 00 00 20 00	Wait    9, Tc
0033e7	11 cc 84 82 13 00	Copy    [1:0998] = [1:09c1]
0033e8	43 00 00 00 20 00	Wait    4, Tc
0033e9	00 08 98 2b 05 00	Write   [0:0x3010] = a57
0033ea	c4 3b 03 00 20 00	Branch  0x33bc, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::CheckThreshold(int,const class ILParamShort &,const class ILParamShort &,const class ILParamShort &) >
0033eb	04 00 00 00 40 00	Branch  0x0, [RET]


__If_645
0033ec	91 c2 04 ee 00 00	Copy    [1:0985] = [0:0077]		# If_645_Func_Start
0033ed	01 48 98 0a 13 00	Copy    [0:3090] = [1:0985]
0033ee	33 00 00 00 20 00	Wait    3, Tc
0033ef	80 48 98 00 00 00	Write   [0:0x3091] = 1
0033f0	53 00 00 00 20 00	Wait    5, Tc
0033f1	80 48 98 00 00 00	Write   [0:0x3091] = 1
0033f2	53 00 00 00 20 00	Wait    5, Tc
0033f3	80 48 98 00 00 00	Write   [0:0x3091] = 1
0033f4	53 00 00 00 20 00	Wait    5, Tc
0033f5	80 48 98 00 00 00	Write   [0:0x3091] = 1
0033f6	53 00 00 00 20 00	Wait    5, Tc
0033f7	80 48 98 00 00 00	Write   [0:0x3091] = 1
0033f8	53 00 00 00 20 00	Wait    5, Tc
0033f9	80 48 98 00 00 00	Write   [0:0x3091] = 1
0033fa	53 00 00 00 20 00	Wait    5, Tc
0033fb	80 48 98 00 00 00	Write   [0:0x3091] = 1
0033fc	53 00 00 00 20 00	Wait    5, Tc
0033fd	80 48 98 00 00 00	Write   [0:0x3091] = 1
0033fe	53 00 00 00 20 00	Wait    5, Tc
0033ff	80 48 98 00 00 00	Write   [0:0x3091] = 1
003400	53 00 00 00 20 00	Wait    5, Tc
003401	80 48 98 00 00 00	Write   [0:0x3091] = 1
003402	53 00 00 00 20 00	Wait    5, Tc
003403	80 48 98 00 00 00	Write   [0:0x3091] = 1
003404	53 00 00 00 20 00	Wait    5, Tc
003405	80 48 98 00 00 00	Write   [0:0x3091] = 1
003406	53 00 00 00 20 00	Wait    5, Tc
003407	80 48 98 00 00 00	Write   [0:0x3091] = 1
003408	53 00 00 00 20 00	Wait    5, Tc
003409	80 48 98 00 00 00	Write   [0:0x3091] = 1
00340a	53 00 00 00 20 00	Wait    5, Tc
00340b	80 48 98 00 00 00	Write   [0:0x3091] = 1
00340c	53 00 00 00 20 00	Wait    5, Tc
00340d	80 48 98 00 00 00	Write   [0:0x3091] = 1
00340e	53 00 00 00 20 00	Wait    5, Tc
00340f	80 48 98 00 00 00	Write   [0:0x3091] = 1
003410	53 00 00 00 20 00	Wait    5, Tc
003411	80 48 98 00 00 00	Write   [0:0x3091] = 1
003412	53 00 00 00 20 00	Wait    5, Tc
003413	80 48 98 00 00 00	Write   [0:0x3091] = 1
003414	53 00 00 00 20 00	Wait    5, Tc
003415	80 48 98 00 00 00	Write   [0:0x3091] = 1
003416	53 00 00 00 20 00	Wait    5, Tc
003417	80 48 98 00 00 00	Write   [0:0x3091] = 1
003418	53 00 00 00 20 00	Wait    5, Tc
003419	80 48 98 00 00 00	Write   [0:0x3091] = 1
00341a	53 00 00 00 20 00	Wait    5, Tc
00341b	80 48 98 00 00 00	Write   [0:0x3091] = 1
00341c	53 00 00 00 20 00	Wait    5, Tc
00341d	80 48 98 00 00 00	Write   [0:0x3091] = 1
00341e	53 00 00 00 20 00	Wait    5, Tc
00341f	80 48 98 00 00 00	Write   [0:0x3091] = 1
003420	53 00 00 00 20 00	Wait    5, Tc
003421	80 48 98 00 00 00	Write   [0:0x3091] = 1
003422	53 00 00 00 20 00	Wait    5, Tc
003423	80 48 98 00 00 00	Write   [0:0x3091] = 1
003424	53 00 00 00 20 00	Wait    5, Tc
003425	80 48 98 00 00 00	Write   [0:0x3091] = 1
003426	53 00 00 00 20 00	Wait    5, Tc
003427	80 48 98 00 00 00	Write   [0:0x3091] = 1
003428	53 00 00 00 20 00	Wait    5, Tc
003429	80 48 98 00 00 00	Write   [0:0x3091] = 1
00342a	53 00 00 00 20 00	Wait    5, Tc
00342b	80 48 98 00 00 00	Write   [0:0x3091] = 1
00342c	53 00 00 00 20 00	Wait    5, Tc
00342d	80 48 98 00 00 00	Write   [0:0x3091] = 1
00342e	53 00 00 00 20 00	Wait    5, Tc
00342f	91 c2 04 20 61 00	Copy    [1:0985] = [0:3090]
003430	53 00 00 00 20 00	Wait    5, Tc
003431	81 3b 80 0a 13 00	Copy    [0:0077] = [1:0985]
003432	06 00 00 00 00 00	Nop     		# Else_645_Func_Start
003433	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::ICentipedeCalibrationProcess::RunThresholdTest(class std::shared_ptr<class Vayyar::Centipede::ICalibResults>)
003434	64 cc 02 00 20 00	Branch  0x2cc6, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_MinPA::RunThresholdTest(class std::shared_ptr<class Vayyar::Centipede::ICalibResults>) >
003435	43 00 00 00 20 00	Wait    4, Tc
003436	11 c2 84 fa 12 00	Copy    [1:0984] = [1:097d]
003437	a3 00 00 00 20 00	Wait    10, Tc
003438	01 48 98 08 13 00	Copy    [0:3090] = [1:0984]		# If_501
003439	00 49 18 00 00 00	Write   [0:0x3092] = 0
00343a	53 00 00 00 20 00	Wait    5, Tc
00343b	02 00 00 01 00 00	Cond    0x00100000

00343c	04 44 03 00 10 00	Branch  0x3440, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00343d	00 08 98 3b 05 00	Write   [0:0x3010] = a77
00343e	f4 cd 02 00 20 00	Branch  0x2cdf, [CALL] < __If_501 >
00343f	04 44 03 00 00 00	Branch  0x3440, [JMP]
003440	54 d7 02 00 20 00	Branch  0x2d75, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_MaxPA::RunThresholdTest(class std::shared_ptr<class Vayyar::Centipede::ICalibResults>) >		# Else_501
003441	43 00 00 00 20 00	Wait    4, Tc
003442	11 c2 84 10 13 00	Copy    [1:0984] = [1:0988]
003443	a3 00 00 00 20 00	Wait    10, Tc
003444	01 48 98 08 13 00	Copy    [0:3090] = [1:0984]		# If_513
003445	00 49 18 00 00 00	Write   [0:0x3092] = 0
003446	53 00 00 00 20 00	Wait    5, Tc
003447	02 00 00 01 00 00	Cond    0x00100000

003448	c4 44 03 00 10 00	Branch  0x344c, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003449	00 08 18 ed 04 00	Write   [0:0x3010] = 9da
00344a	e4 d8 02 00 20 00	Branch  0x2d8e, [CALL] < __If_513 >
00344b	c4 44 03 00 00 00	Branch  0x344c, [JMP]
00344c	b4 08 03 00 20 00	Branch  0x308b, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::RunThresholdTest(class ILParamShort &,class ILParamShort &) >		# Else_513
00344d	43 00 00 00 20 00	Wait    4, Tc
00344e	11 c2 84 36 13 00	Copy    [1:0984] = [1:099b]
00344f	a3 00 00 00 20 00	Wait    10, Tc
003450	01 48 98 08 13 00	Copy    [0:3090] = [1:0984]		# If_570
003451	00 49 18 00 00 00	Write   [0:0x3092] = 0
003452	53 00 00 00 20 00	Wait    5, Tc
003453	02 00 00 01 00 00	Cond    0x00100000

003454	74 45 03 00 10 00	Branch  0x3457, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003455	e4 09 03 00 20 00	Branch  0x309e, [CALL] < __If_570 >
003456	74 45 03 00 00 00	Branch  0x3457, [JMP]
003457	34 29 03 00 20 00	Branch  0x3293, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::RunThresholdTest(class ILParamShort &,class ILParamShort &) >		# Else_570
003458	43 00 00 00 20 00	Wait    4, Tc
003459	11 c2 84 50 13 00	Copy    [1:0984] = [1:09a8]
00345a	a3 00 00 00 20 00	Wait    10, Tc
00345b	01 48 98 08 13 00	Copy    [0:3090] = [1:0984]		# If_627
00345c	00 49 18 00 00 00	Write   [0:0x3092] = 0
00345d	53 00 00 00 20 00	Wait    5, Tc
00345e	02 00 00 01 00 00	Cond    0x00100000

00345f	24 46 03 00 10 00	Branch  0x3462, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003460	64 2a 03 00 20 00	Branch  0x32a6, [CALL] < __If_627 >
003461	24 46 03 00 00 00	Branch  0x3462, [JMP]
003462	54 33 03 00 20 00	Branch  0x3335, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::RunThresholdTest(class ILParamShort &,class ILParamShort &) >		# Else_627
003463	43 00 00 00 20 00	Wait    4, Tc
003464	11 c2 84 6a 13 00	Copy    [1:0984] = [1:09b5]
003465	a3 00 00 00 20 00	Wait    10, Tc
003466	01 48 98 08 13 00	Copy    [0:3090] = [1:0984]		# If_636
003467	00 49 18 00 00 00	Write   [0:0x3092] = 0
003468	53 00 00 00 20 00	Wait    5, Tc
003469	02 00 00 01 00 00	Cond    0x00100000

00346a	d4 46 03 00 10 00	Branch  0x346d, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
00346b	a4 34 03 00 20 00	Branch  0x334a, [CALL] < __If_636 >
00346c	d4 46 03 00 00 00	Branch  0x346d, [JMP]
00346d	74 3d 03 00 20 00	Branch  0x33d7, [CALL] < Vayyar::Centipede::CalibrationParamResultHandler_QuantMinMax::RunThresholdTest(class ILParamShort &,class ILParamShort &) >		# Else_636
00346e	43 00 00 00 20 00	Wait    4, Tc
00346f	11 c2 84 84 13 00	Copy    [1:0984] = [1:09c2]
003470	a3 00 00 00 20 00	Wait    10, Tc
003471	01 48 98 08 13 00	Copy    [0:3090] = [1:0984]		# If_645
003472	00 49 18 00 00 00	Write   [0:0x3092] = 0
003473	53 00 00 00 20 00	Wait    5, Tc
003474	02 00 00 01 00 00	Cond    0x00100000

003475	84 47 03 00 10 00	Branch  0x3478, [JMP], Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003476	c4 3e 03 00 20 00	Branch  0x33ec, [CALL] < __If_645 >
003477	84 47 03 00 00 00	Branch  0x3478, [JMP]
003478	04 00 00 00 40 00	Branch  0x0, [RET]
		# Else_645

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOffSequence(void)
003479	43 00 00 00 20 00	Wait    4, Tc
00347a	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+0], SrcBase: AI
00347b	c3 1c 02 00 20 00	Wait    8652, Tc
00347c	01 f1 a8 01 00 01	Copy    [0:51e2] = [SF+1], SrcBase: AI
00347d	b3 00 00 00 20 00	Wait    11, Tc
00347e	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+2], SrcBase: AI
00347f	c3 1c 02 00 20 00	Wait    8652, Tc
003480	01 f1 a8 01 00 01	Copy    [0:51e2] = [SF+3], SrcBase: AI
003481	c3 1c 02 00 20 00	Wait    8652, Tc
003482	01 f1 a8 01 00 01	Copy    [0:51e2] = [SF+4], SrcBase: AI
003483	b3 00 00 00 20 00	Wait    11, Tc
003484	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+5], SrcBase: AI
003485	b3 00 00 00 20 00	Wait    11, Tc
003486	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+6], SrcBase: AI
003487	b3 00 00 00 20 00	Wait    11, Tc
003488	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+7], SrcBase: AI
003489	b3 00 00 00 20 00	Wait    11, Tc
00348a	01 f0 a8 01 00 01	Copy    [0:51e0] = [SF+8], SrcBase: AI
00348b	b3 00 00 00 20 00	Wait    11, Tc
00348c	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+9], SrcBase: AI
00348d	b3 00 00 00 20 00	Wait    11, Tc
00348e	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+10], SrcBase: AI
00348f	c3 2c 01 00 20 00	Wait    4812, Tc
003490	81 e9 a8 01 00 01	Copy    [0:51d3] = [SF+11], SrcBase: AI
003491	b3 00 00 00 20 00	Wait    11, Tc
003492	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void)
003493	43 00 00 00 20 00	Wait    4, Tc
003494	81 e9 a8 01 00 01	Copy    [0:51d3] = [SF+0], SrcBase: AI
003495	b3 00 00 00 20 00	Wait    11, Tc
003496	81 e9 a8 01 00 01	Copy    [0:51d3] = [SF+1], SrcBase: AI
003497	b3 00 00 00 20 00	Wait    11, Tc
003498	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+2], SrcBase: AI
003499	b3 00 00 00 20 00	Wait    11, Tc
00349a	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+3], SrcBase: AI
00349b	b3 00 00 00 20 00	Wait    11, Tc
00349c	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+4], SrcBase: AI
00349d	b3 00 00 00 20 00	Wait    11, Tc
00349e	81 e9 a8 01 00 01	Copy    [0:51d3] = [SF+5], SrcBase: AI
00349f	b3 00 00 00 20 00	Wait    11, Tc
0034a0	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+6], SrcBase: AI
0034a1	c3 3c 00 00 20 00	Wait    972, Tc
0034a2	01 e8 a8 01 00 01	Copy    [0:51d0] = [SF+7], SrcBase: AI
0034a3	b3 00 00 00 20 00	Wait    11, Tc
0034a4	01 e9 a8 01 00 01	Copy    [0:51d2] = [SF+8], SrcBase: AI
0034a5	b3 00 00 00 20 00	Wait    11, Tc
0034a6	81 e1 a8 01 00 01	Copy    [0:51c3] = [SF+9], SrcBase: AI
0034a7	b3 00 00 00 20 00	Wait    11, Tc
0034a8	01 e0 a8 01 00 01	Copy    [0:51c0] = [SF+10], SrcBase: AI
0034a9	b3 00 00 00 20 00	Wait    11, Tc
0034aa	81 e0 a8 01 00 01	Copy    [0:51c1] = [SF+11], SrcBase: AI
0034ab	b3 00 00 00 20 00	Wait    11, Tc
0034ac	81 e0 b8 01 00 01	Copy    [0:71c1] = [SF+12], SrcBase: AI
0034ad	b3 00 00 00 20 00	Wait    11, Tc
0034ae	01 e0 b8 01 00 01	Copy    [0:71c0] = [SF+13], SrcBase: AI
0034af	b3 00 00 00 20 00	Wait    11, Tc
0034b0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOffSequence(void)
0034b1	00 f0 28 00 00 00	Write   [0:0x51e0] = 0
0034b2	c3 1c 02 00 20 00	Wait    8652, Tc
0034b3	00 f1 28 10 00 00	Write   [0:0x51e2] = 20
0034b4	b3 00 00 00 20 00	Wait    11, Tc
0034b5	00 f0 b8 07 00 00	Write   [0:0x71e0] = f
0034b6	c3 1c 02 00 20 00	Wait    8652, Tc
0034b7	00 f1 38 06 00 00	Write   [0:0x71e2] = c
0034b8	c3 1c 02 00 20 00	Wait    8652, Tc
0034b9	00 f0 b8 03 00 00	Write   [0:0x71e0] = 7
0034ba	b3 00 00 00 20 00	Wait    11, Tc
0034bb	00 f0 b8 01 00 00	Write   [0:0x71e0] = 3
0034bc	b3 00 00 00 20 00	Wait    11, Tc
0034bd	00 f0 b8 00 00 00	Write   [0:0x71e0] = 1
0034be	b3 00 00 00 20 00	Wait    11, Tc
0034bf	00 f0 38 00 00 00	Write   [0:0x71e0] = 0
0034c0	b3 00 00 00 20 00	Wait    11, Tc
0034c1	80 e1 b8 26 05 00	Write   [0:0x71c3] = a4d
0034c2	b3 00 00 00 20 00	Wait    11, Tc
0034c3	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
0034c4	c3 2c 01 00 20 00	Wait    4812, Tc
0034c5	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
0034c6	b3 00 00 00 20 00	Wait    11, Tc
0034c7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void)
0034c8	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
0034c9	b3 00 00 00 20 00	Wait    11, Tc
0034ca	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
0034cb	b3 00 00 00 20 00	Wait    11, Tc
0034cc	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
0034cd	b3 00 00 00 20 00	Wait    11, Tc
0034ce	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
0034cf	b3 00 00 00 20 00	Wait    11, Tc
0034d0	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
0034d1	b3 00 00 00 20 00	Wait    11, Tc
0034d2	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
0034d3	b3 00 00 00 20 00	Wait    11, Tc
0034d4	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
0034d5	c3 3c 00 00 20 00	Wait    972, Tc
0034d6	00 e8 38 00 00 00	Write   [0:0x71d0] = 0
0034d7	b3 00 00 00 20 00	Wait    11, Tc
0034d8	00 e9 38 80 07 00	Write   [0:0x71d2] = f00
0034d9	b3 00 00 00 20 00	Wait    11, Tc
0034da	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
0034db	b3 00 00 00 20 00	Wait    11, Tc
0034dc	80 e0 28 00 00 00	Write   [0:0x51c1] = 0
0034dd	b3 00 00 00 20 00	Wait    11, Tc
0034de	00 e1 28 00 00 00	Write   [0:0x51c2] = 0
0034df	b3 00 00 00 20 00	Wait    11, Tc
0034e0	00 e1 38 00 00 00	Write   [0:0x71c2] = 0
0034e1	b3 00 00 00 20 00	Wait    11, Tc
0034e2	80 e0 38 00 00 00	Write   [0:0x71c1] = 0
0034e3	b3 00 00 00 20 00	Wait    11, Tc
0034e4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedePortStateCommand::Set(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,bool,bool,bool,enum Vayyar::Centipede::BAND)
0034e5	80 00 28 01 00 00	Write   [0:0x5001] = 2
0034e6	b3 00 00 00 20 00	Wait    11, Tc
0034e7	00 00 28 00 00 00	Write   [0:0x5000] = 0
0034e8	c3 94 02 00 20 00	Wait    10572, Tc
0034e9	00 08 18 e2 07 00	Write   [0:0x3010] = fc4
0034ea	94 47 03 00 20 00	Branch  0x3479, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOffSequence(void) >
0034eb	00 08 18 e8 07 00	Write   [0:0x3010] = fd0
0034ec	34 49 03 00 20 00	Branch  0x3493, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void) >
0034ed	14 4b 03 00 20 00	Branch  0x34b1, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOffSequence(void) >
0034ee	84 4c 03 00 20 00	Branch  0x34c8, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void) >
0034ef	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::LogenPowerDown(class std::array<enum Vayyar::Centipede::PLL_POWER,2>,bool)
0034f0	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0034f1	80 09 18 00 00 00	Write   [0:0x3013] = 0
0034f2	43 00 00 00 20 00	Wait    4, Tc
0034f3	40 09 80 19 00 00	Write   [0:0x0012] = 33, DestBase: A
0034f4	b3 00 00 00 20 00	Wait    11, Tc
0034f5	00 09 18 00 00 00	Write   [0:0x3012] = 0
0034f6	80 09 18 00 00 00	Write   [0:0x3013] = 0
0034f7	43 00 00 00 20 00	Wait    4, Tc
0034f8	a4 59 00 00 20 00	Branch  0x59a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::Initialize(double) >
0034f9	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0034fa	80 09 18 00 00 00	Write   [0:0x3013] = 0
0034fb	43 00 00 00 20 00	Wait    4, Tc
0034fc	40 20 00 84 38 00	Write   [0:0x0040] = 7108, DestBase: A
0034fd	b3 00 00 00 20 00	Wait    11, Tc
0034fe	00 09 18 00 00 00	Write   [0:0x3012] = 0
0034ff	80 09 18 00 00 00	Write   [0:0x3013] = 0
003500	43 00 00 00 20 00	Wait    4, Tc
003501	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003502	80 09 18 00 00 00	Write   [0:0x3013] = 0
003503	43 00 00 00 20 00	Wait    4, Tc
003504	40 20 00 00 30 00	Write   [0:0x0040] = 6000, DestBase: A
003505	b3 00 00 00 20 00	Wait    11, Tc
003506	00 09 18 00 00 00	Write   [0:0x3012] = 0
003507	80 09 18 00 00 00	Write   [0:0x3013] = 0
003508	43 00 00 00 20 00	Wait    4, Tc
003509	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00350a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00350b	43 00 00 00 20 00	Wait    4, Tc
00350c	40 48 00 84 38 00	Write   [0:0x0090] = 7108, DestBase: A
00350d	b3 00 00 00 20 00	Wait    11, Tc
00350e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00350f	80 09 18 00 00 00	Write   [0:0x3013] = 0
003510	43 00 00 00 20 00	Wait    4, Tc
003511	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003512	80 09 18 00 00 00	Write   [0:0x3013] = 0
003513	43 00 00 00 20 00	Wait    4, Tc
003514	40 48 00 00 30 00	Write   [0:0x0090] = 6000, DestBase: A
003515	b3 00 00 00 20 00	Wait    11, Tc
003516	00 09 18 00 00 00	Write   [0:0x3012] = 0
003517	80 09 18 00 00 00	Write   [0:0x3013] = 0
003518	43 00 00 00 20 00	Wait    4, Tc
003519	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00351a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00351b	43 00 00 00 20 00	Wait    4, Tc
00351c	c0 11 00 05 05 00	Write   [0:0x0023] = a0a, DestBase: A
00351d	b3 00 00 00 20 00	Wait    11, Tc
00351e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00351f	80 09 18 00 00 00	Write   [0:0x3013] = 0
003520	43 00 00 00 20 00	Wait    4, Tc
003521	90 10 00 00 00 00	Write   [1:0x0021] = 0
003522	04 00 00 00 40 00	Branch  0x0, [RET]


struct Vayyar::Centipede::CalibrationsSweepData_Output __cdecl Vayyar::Centipede::CentipedeCalibrationBlockLib::BuildSweepCalibration(bool)
003523	44 4c 00 00 20 00	Branch  0x4c4, [CALL] < ResetCalibrationParametersVariables >
003524	44 4f 00 00 20 00	Branch  0x4f4, [CALL] < GetSevenTapParams >
003525	90 14 80 05 10 00	Write   [1:0x0029] = 200b
003526	10 15 00 05 10 00	Write   [1:0x002a] = 200a
003527	90 15 00 00 00 00	Write   [1:0x002b] = 0
003528	90 11 00 00 00 00	Write   [1:0x0023] = 0
003529	10 16 00 00 08 00	Write   [1:0x002c] = 1000
00352a	74 67 00 00 20 00	Branch  0x677, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::Initialize(enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,double,double) >
00352b	64 70 00 00 20 00	Branch  0x706, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetMode(struct Vayyar::Centipede::LoMode []) >
00352c	b4 af 01 00 20 00	Branch  0x1afb, [CALL] < Calibration_InlineSwAbs >
00352d	e4 67 02 00 20 00	Branch  0x267e, [CALL] < loToCalibrate_innerLoop >
00352e	74 67 00 00 20 00	Branch  0x677, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::Initialize(enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,double,double) >
00352f	c4 6b 02 00 20 00	Branch  0x26bc, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetMode(struct Vayyar::Centipede::LoMode []) >
003530	64 c0 02 00 20 00	Branch  0x2c06, [CALL] < loToCalibrate_innerLoop >
003531	d4 c1 02 00 20 00	Branch  0x2c1d, [CALL] < CopyLoIqCalResults >
003532	44 43 03 00 20 00	Branch  0x3434, [CALL] < Vayyar::Centipede::ICentipedeCalibrationProcess::RunThresholdTest(class std::shared_ptr<class Vayyar::Centipede::ICalibResults>) >
003533	54 4e 03 00 20 00	Branch  0x34e5, [CALL] < Vayyar::Centipede::CentipedePortStateCommand::Set(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,bool,bool,bool,enum Vayyar::Centipede::BAND) >
003534	04 4f 03 00 20 00	Branch  0x34f0, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::LogenPowerDown(class std::array<enum Vayyar::Centipede::PLL_POWER,2>,bool) >
003535	04 00 00 00 40 00	Branch  0x0, [RET]


CopyFromDsp
003536	00 08 00 05 10 00	Write   [0:0x0010] = 200a
003537	80 08 00 00 00 00	Write   [0:0x0011] = 0
003538	c3 12 00 00 20 00	Wait    300, Tc
003539	91 e7 04 24 00 00	Copy    [1:09cf] = [0:0012]
00353a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short)
00353b	43 00 00 00 20 00	Wait    4, Tc
00353c	81 74 98 01 00 01	Copy    [0:30e9] = [SF+0], SrcBase: AI
00353d	01 70 98 9e 13 00	Copy    [0:30e0] = [1:09cf]
00353e	33 00 00 00 20 00	Wait    3, Tc
00353f	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003540	01 71 98 01 00 01	Copy    [0:30e2] = [SF+2], SrcBase: AI
003541	33 00 00 00 20 00	Wait    3, Tc
003542	81 71 98 01 00 01	Copy    [0:30e3] = [SF+3], SrcBase: AI
003543	33 00 00 00 20 00	Wait    3, Tc
003544	91 ea 04 d2 61 00	Copy    [1:09d5] = [0:30e9]
003545	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)_sub_6
003546	01 71 98 a0 13 00	Copy    [0:30e2] = [1:09d0]
003547	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003548	33 00 00 00 20 00	Wait    3, Tc
003549	01 70 98 01 00 01	Copy    [0:30e0] = [SF+1], SrcBase: AI
00354a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+2], SrcBase: AI
00354b	73 00 00 00 20 00	Wait    7, Tc
00354c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)
00354d	43 00 00 00 20 00	Wait    4, Tc
00354e	64 54 03 00 20 00	Branch  0x3546, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)_sub_6 >
00354f	11 ec 04 c8 61 00	Copy    [1:09d8] = [0:30e4]
003550	04 00 00 00 40 00	Branch  0x0, [RET]


CopyFromDsp
003551	43 00 00 00 20 00	Wait    4, Tc
003552	01 08 80 b0 13 00	Copy    [0:0010] = [1:09d8]
003553	81 08 80 01 00 01	Copy    [0:0011] = [SF+0], SrcBase: AI
003554	03 13 00 00 20 00	Wait    304, Tc
003555	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
003556	01 09 98 a2 13 00	Copy    [0:3012] = [1:09d1]
003557	83 00 00 00 20 00	Wait    8, Tc
003558	51 00 00 24 00 00	Copy    [1:0000] = [0:0012], DestBase: A
003559	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
00355a	83 00 00 00 20 00	Wait    8, Tc
00355b	04 00 00 00 40 00	Branch  0x0, [RET]


CopyFromDsp
00355c	43 00 00 00 20 00	Wait    4, Tc
00355d	01 08 80 b0 13 00	Copy    [0:0010] = [1:09d8]
00355e	81 08 80 01 00 01	Copy    [0:0011] = [SF+0], SrcBase: AI
00355f	03 13 00 00 20 00	Wait    304, Tc
003560	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
003561	01 09 98 a4 13 00	Copy    [0:3012] = [1:09d2]
003562	83 00 00 00 20 00	Wait    8, Tc
003563	51 00 00 24 00 00	Copy    [1:0000] = [0:0012], DestBase: A
003564	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
003565	83 00 00 00 20 00	Wait    8, Tc
003566	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)
003567	43 00 00 00 20 00	Wait    4, Tc
003568	64 54 03 00 20 00	Branch  0x3546, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short)_sub_6 >
003569	11 e8 04 c8 61 00	Copy    [1:09d0] = [0:30e4]
00356a	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_CopyOneTapResults_LO0
00356b	43 00 00 00 20 00	Wait    4, Tc
00356c	91 eb 04 20 60 00	Copy    [1:09d7] = [0:3010]		# While_13_Func_Start
00356d	53 00 00 00 20 00	Wait    5, Tc
00356e	01 08 98 ae 13 00	Copy    [0:3010] = [1:09d7]		# While_13
00356f	01 4c 98 aa 13 00	Copy    [0:3098] = [1:09d5]
003570	33 00 00 00 20 00	Wait    3, Tc
003571	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
003572	33 00 00 00 20 00	Wait    3, Tc
003573	01 4d 98 ac 13 00	Copy    [0:309a] = [1:09d6]
003574	53 00 00 00 20 00	Wait    5, Tc
003575	02 00 08 00 00 00	Cond    0x00008000

003576	54 59 03 00 90 00	Branch  0x3595, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003577	00 08 18 64 07 00	Write   [0:0x3010] = ec8
003578	d4 54 03 00 20 00	Branch  0x354d, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
003579	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00357a	14 55 03 00 20 00	Branch  0x3551, [CALL] < CopyFromDsp >
00357b	00 08 98 65 07 00	Write   [0:0x3010] = ecb
00357c	d4 54 03 00 20 00	Branch  0x354d, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
00357d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00357e	c4 55 03 00 20 00	Branch  0x355c, [CALL] < CopyFromDsp >
00357f	00 08 98 ef 07 00	Write   [0:0x3010] = fdf
003580	43 00 00 00 20 00	Wait    4, Tc
003581	01 48 98 a2 13 00	Copy    [0:3090] = [1:09d1]
003582	81 48 98 01 00 01	Copy    [0:3091] = [SF+1], SrcBase: AI
003583	93 00 00 00 20 00	Wait    9, Tc
003584	91 e8 04 20 61 00	Copy    [1:09d1] = [0:3090]
003585	53 00 00 00 20 00	Wait    5, Tc
003586	01 48 98 a4 13 00	Copy    [0:3090] = [1:09d2]
003587	81 48 98 01 00 01	Copy    [0:3091] = [SF+2], SrcBase: AI
003588	93 00 00 00 20 00	Wait    9, Tc
003589	11 e9 04 20 61 00	Copy    [1:09d2] = [0:3090]
00358a	53 00 00 00 20 00	Wait    5, Tc
00358b	00 08 18 67 07 00	Write   [0:0x3010] = ece
00358c	74 56 03 00 20 00	Branch  0x3567, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
00358d	00 08 98 f0 07 00	Write   [0:0x3010] = fe1
00358e	43 00 00 00 20 00	Wait    4, Tc
00358f	01 48 98 ac 13 00	Copy    [0:3090] = [1:09d6]
003590	81 48 98 01 00 01	Copy    [0:3091] = [SF+3], SrcBase: AI
003591	93 00 00 00 20 00	Wait    9, Tc
003592	11 eb 04 20 61 00	Copy    [1:09d6] = [0:3090]
003593	53 00 00 00 20 00	Wait    5, Tc
003594	e4 56 03 00 00 00	Branch  0x356e, [JMP]
003595	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_13

CopyFromDsp
003596	43 00 00 00 20 00	Wait    4, Tc
003597	01 08 80 b0 13 00	Copy    [0:0010] = [1:09d8]
003598	81 08 80 01 00 01	Copy    [0:0011] = [SF+0], SrcBase: AI
003599	03 13 00 00 20 00	Wait    304, Tc
00359a	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
00359b	01 09 98 a6 13 00	Copy    [0:3012] = [1:09d3]
00359c	83 00 00 00 20 00	Wait    8, Tc
00359d	51 00 00 24 00 00	Copy    [1:0000] = [0:0012], DestBase: A
00359e	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
00359f	83 00 00 00 20 00	Wait    8, Tc
0035a0	04 00 00 00 40 00	Branch  0x0, [RET]


CopyFromDsp
0035a1	43 00 00 00 20 00	Wait    4, Tc
0035a2	01 08 80 b0 13 00	Copy    [0:0010] = [1:09d8]
0035a3	81 08 80 01 00 01	Copy    [0:0011] = [SF+0], SrcBase: AI
0035a4	03 13 00 00 20 00	Wait    304, Tc
0035a5	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
0035a6	01 09 98 a8 13 00	Copy    [0:3012] = [1:09d4]
0035a7	83 00 00 00 20 00	Wait    8, Tc
0035a8	51 00 00 24 00 00	Copy    [1:0000] = [0:0012], DestBase: A
0035a9	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
0035aa	83 00 00 00 20 00	Wait    8, Tc
0035ab	04 00 00 00 40 00	Branch  0x0, [RET]


_Loop_CopyOneTapResults_LO0
0035ac	43 00 00 00 20 00	Wait    4, Tc
0035ad	91 ec 04 20 60 00	Copy    [1:09d9] = [0:3010]		# While_14_Func_Start
0035ae	53 00 00 00 20 00	Wait    5, Tc
0035af	01 08 98 b2 13 00	Copy    [0:3010] = [1:09d9]		# While_14
0035b0	01 4c 98 aa 13 00	Copy    [0:3098] = [1:09d5]
0035b1	33 00 00 00 20 00	Wait    3, Tc
0035b2	81 4c 98 01 00 01	Copy    [0:3099] = [SF+0], SrcBase: AI
0035b3	33 00 00 00 20 00	Wait    3, Tc
0035b4	01 4d 98 ac 13 00	Copy    [0:309a] = [1:09d6]
0035b5	53 00 00 00 20 00	Wait    5, Tc
0035b6	02 00 08 00 00 00	Cond    0x00008000

0035b7	64 5d 03 00 90 00	Branch  0x35d6, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0035b8	00 08 18 64 07 00	Write   [0:0x3010] = ec8
0035b9	d4 54 03 00 20 00	Branch  0x354d, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0035ba	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0035bb	64 59 03 00 20 00	Branch  0x3596, [CALL] < CopyFromDsp >
0035bc	00 08 98 65 07 00	Write   [0:0x3010] = ecb
0035bd	d4 54 03 00 20 00	Branch  0x354d, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0035be	00 08 98 26 05 00	Write   [0:0x3010] = a4d
0035bf	14 5a 03 00 20 00	Branch  0x35a1, [CALL] < CopyFromDsp >
0035c0	00 08 98 ef 07 00	Write   [0:0x3010] = fdf
0035c1	43 00 00 00 20 00	Wait    4, Tc
0035c2	01 48 98 a6 13 00	Copy    [0:3090] = [1:09d3]
0035c3	81 48 98 01 00 01	Copy    [0:3091] = [SF+1], SrcBase: AI
0035c4	93 00 00 00 20 00	Wait    9, Tc
0035c5	91 e9 04 20 61 00	Copy    [1:09d3] = [0:3090]
0035c6	53 00 00 00 20 00	Wait    5, Tc
0035c7	01 48 98 a8 13 00	Copy    [0:3090] = [1:09d4]
0035c8	81 48 98 01 00 01	Copy    [0:3091] = [SF+2], SrcBase: AI
0035c9	93 00 00 00 20 00	Wait    9, Tc
0035ca	11 ea 04 20 61 00	Copy    [1:09d4] = [0:3090]
0035cb	53 00 00 00 20 00	Wait    5, Tc
0035cc	00 08 18 67 07 00	Write   [0:0x3010] = ece
0035cd	74 56 03 00 20 00	Branch  0x3567, [CALL] < Vayyar::SequencerMath::AddShortImd(const class IILParam &,const class IILParam &,unsigned short) >
0035ce	00 08 98 f0 07 00	Write   [0:0x3010] = fe1
0035cf	43 00 00 00 20 00	Wait    4, Tc
0035d0	01 48 98 ac 13 00	Copy    [0:3090] = [1:09d6]
0035d1	81 48 98 01 00 01	Copy    [0:3091] = [SF+3], SrcBase: AI
0035d2	93 00 00 00 20 00	Wait    9, Tc
0035d3	11 eb 04 20 61 00	Copy    [1:09d6] = [0:3090]
0035d4	53 00 00 00 20 00	Wait    5, Tc
0035d5	f4 5a 03 00 00 00	Branch  0x35af, [JMP]
0035d6	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndWhile_14

SetIqBal_OneTapParams
0035d7	64 53 03 00 20 00	Branch  0x3536, [CALL] < CopyFromDsp >
0035d8	10 e8 84 05 10 00	Write   [1:0x09d0] = 200b
0035d9	43 00 00 00 20 00	Wait    4, Tc
0035da	91 e8 84 da 10 00	Copy    [1:09d1] = [1:086d]
0035db	93 00 00 00 20 00	Wait    9, Tc
0035dc	11 e9 84 e4 10 00	Copy    [1:09d2] = [1:0872]
0035dd	93 00 00 00 20 00	Wait    9, Tc
0035de	91 e9 84 7a 11 00	Copy    [1:09d3] = [1:08bd]
0035df	93 00 00 00 20 00	Wait    9, Tc
0035e0	11 ea 84 84 11 00	Copy    [1:09d4] = [1:08c2]
0035e1	43 00 00 00 20 00	Wait    4, Tc
0035e2	00 08 98 3c 05 00	Write   [0:0x3010] = a79
0035e3	b4 53 03 00 20 00	Branch  0x353b, [CALL] < Vayyar::SequencerMath::DivideShortPowerOf2(const class IILParam &,const class IILParam &,unsigned short) >
0035e4	10 eb 04 00 00 00	Write   [1:0x09d6] = 0
0035e5	00 08 18 ef 07 00	Write   [0:0x3010] = fde
0035e6	b4 56 03 00 20 00	Branch  0x356b, [CALL] < _Loop_CopyOneTapResults_LO0 >
0035e7	10 eb 04 00 00 00	Write   [1:0x09d6] = 0
0035e8	00 08 18 ef 07 00	Write   [0:0x3010] = fde
0035e9	c4 5a 03 00 20 00	Branch  0x35ac, [CALL] < _Loop_CopyOneTapResults_LO0 >
0035ea	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::LogenPowerUpHelper(class std::array<enum Vayyar::Centipede::PLL_POWER,2>,bool)
0035eb	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0035ec	80 09 18 00 00 00	Write   [0:0x3013] = 0
0035ed	43 00 00 00 20 00	Wait    4, Tc
0035ee	c0 11 80 05 05 00	Write   [0:0x0023] = a0b, DestBase: A
0035ef	b3 00 00 00 20 00	Wait    11, Tc
0035f0	00 09 18 00 00 00	Write   [0:0x3012] = 0
0035f1	80 09 18 00 00 00	Write   [0:0x3013] = 0
0035f2	53 14 00 00 20 00	Wait    325, Tc
0035f3	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0035f4	80 09 18 00 00 00	Write   [0:0x3013] = 0
0035f5	43 00 00 00 20 00	Wait    4, Tc
0035f6	40 20 00 40 30 00	Write   [0:0x0040] = 6080, DestBase: A
0035f7	b3 00 00 00 20 00	Wait    11, Tc
0035f8	00 09 18 00 00 00	Write   [0:0x3012] = 0
0035f9	80 09 18 00 00 00	Write   [0:0x3013] = 0
0035fa	53 a0 86 01 20 00	Wait    1600005, Tc
0035fb	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0035fc	80 09 18 00 00 00	Write   [0:0x3013] = 0
0035fd	43 00 00 00 20 00	Wait    4, Tc
0035fe	40 20 00 c4 38 00	Write   [0:0x0040] = 7188, DestBase: A
0035ff	b3 00 00 00 20 00	Wait    11, Tc
003600	00 09 18 00 00 00	Write   [0:0x3012] = 0
003601	80 09 18 00 00 00	Write   [0:0x3013] = 0
003602	53 d0 07 00 20 00	Wait    32005, Tc
003603	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003604	80 09 18 00 00 00	Write   [0:0x3013] = 0
003605	43 00 00 00 20 00	Wait    4, Tc
003606	40 48 00 40 30 00	Write   [0:0x0090] = 6080, DestBase: A
003607	b3 00 00 00 20 00	Wait    11, Tc
003608	00 09 18 00 00 00	Write   [0:0x3012] = 0
003609	80 09 18 00 00 00	Write   [0:0x3013] = 0
00360a	53 a0 86 01 20 00	Wait    1600005, Tc
00360b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::Initialize(enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,double,double)
00360c	f4 4f 00 00 20 00	Branch  0x4ff, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::InitRfRegs(void) >
00360d	64 50 00 00 20 00	Branch  0x506, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetDefaultValues(class std::unordered_map<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,struct std::hash<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,struct std::equal_to<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,class std::allocator<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,int> > > &) >
00360e	a4 59 00 00 20 00	Branch  0x59a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::Initialize(double) >
00360f	24 62 00 00 20 00	Branch  0x622, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::Initialize(void) >
003610	00 08 18 15 05 00	Write   [0:0x3010] = a2a
003611	14 64 00 00 20 00	Branch  0x641, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::ManualTune(int,struct Vayyar::Centipede::Subband,struct Vayyar::Centipede::Divider) >
003612	03 64 00 00 20 00	Wait    1600, Tc
003613	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003614	80 09 18 00 00 00	Write   [0:0x3013] = 0
003615	43 00 00 00 20 00	Wait    4, Tc
003616	c0 41 00 00 00 00	Write   [0:0x0083] = 0, DestBase: A
003617	b3 00 00 00 20 00	Wait    11, Tc
003618	00 09 18 00 00 00	Write   [0:0x3012] = 0
003619	80 09 18 00 00 00	Write   [0:0x3013] = 0
00361a	43 00 00 00 20 00	Wait    4, Tc
00361b	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00361c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00361d	43 00 00 00 20 00	Wait    4, Tc
00361e	c0 41 80 00 08 00	Write   [0:0x0083] = 1001, DestBase: A
00361f	b3 00 00 00 20 00	Wait    11, Tc
003620	00 09 18 00 00 00	Write   [0:0x3012] = 0
003621	80 09 18 00 00 00	Write   [0:0x3013] = 0
003622	43 00 00 00 20 00	Wait    4, Tc
003623	80 03 10 00 06 00	Write   [0:0x2007] = c00
003624	00 06 90 3c 14 00	Write   [0:0x200c] = 2879
003625	00 17 90 3f 00 00	Write   [0:0x202e] = 7f
003626	80 03 10 00 06 00	Write   [0:0x2007] = c00
003627	80 06 90 3c 14 00	Write   [0:0x200d] = 2879
003628	80 17 90 3f 00 00	Write   [0:0x202f] = 7f
003629	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int)
00362a	43 00 00 00 20 00	Wait    4, Tc
00362b	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00362c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00362d	43 00 00 00 20 00	Wait    4, Tc
00362e	41 08 80 01 00 01	Copy    [0:0010] = [SF+0], DestBase: A, SrcBase: AI
00362f	b3 00 00 00 20 00	Wait    11, Tc
003630	11 11 80 01 00 01	Copy    [1:0022] = [SF+1], SrcBase: AI
003631	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003632	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003633	00 08 18 f2 07 00	Write   [0:0x3010] = fe4
003634	43 00 00 00 20 00	Wait    4, Tc
003635	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003636	80 09 18 00 00 00	Write   [0:0x3013] = 0
003637	43 00 00 00 20 00	Wait    4, Tc
003638	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
003639	b3 00 00 00 20 00	Wait    11, Tc
00363a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetMode(struct Vayyar::Centipede::LoMode [])
00363b	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00363c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00363d	43 00 00 00 20 00	Wait    4, Tc
00363e	40 01 80 01 02 00	Write   [0:0x0002] = 403, DestBase: A
00363f	b3 00 00 00 20 00	Wait    11, Tc
003640	00 09 18 00 00 00	Write   [0:0x3012] = 0
003641	80 09 18 00 00 00	Write   [0:0x3013] = 0
003642	43 00 00 00 20 00	Wait    4, Tc
003643	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003644	80 09 18 00 00 00	Write   [0:0x3013] = 0
003645	43 00 00 00 20 00	Wait    4, Tc
003646	c0 10 80 87 09 00	Write   [0:0x0021] = 130f, DestBase: A
003647	b3 00 00 00 20 00	Wait    11, Tc
003648	00 09 18 00 00 00	Write   [0:0x3012] = 0
003649	80 09 18 00 00 00	Write   [0:0x3013] = 0
00364a	43 00 00 00 20 00	Wait    4, Tc
00364b	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00364c	80 09 18 00 00 00	Write   [0:0x3013] = 0
00364d	43 00 00 00 20 00	Wait    4, Tc
00364e	40 10 80 7f 0a 00	Write   [0:0x0020] = 14ff, DestBase: A
00364f	b3 00 00 00 20 00	Wait    11, Tc
003650	00 09 18 00 00 00	Write   [0:0x3012] = 0
003651	80 09 18 00 00 00	Write   [0:0x3013] = 0
003652	43 00 00 00 20 00	Wait    4, Tc
003653	00 08 98 17 05 00	Write   [0:0x3010] = a2f
003654	84 6a 00 00 20 00	Branch  0x6a8, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int) >
003655	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003656	80 09 18 00 00 00	Write   [0:0x3013] = 0
003657	43 00 00 00 20 00	Wait    4, Tc
003658	40 21 80 b5 07 00	Write   [0:0x0042] = f6b, DestBase: A
003659	b3 00 00 00 20 00	Wait    11, Tc
00365a	00 09 18 00 00 00	Write   [0:0x3012] = 0
00365b	80 09 18 00 00 00	Write   [0:0x3013] = 0
00365c	43 00 00 00 20 00	Wait    4, Tc
00365d	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00365e	80 09 18 00 00 00	Write   [0:0x3013] = 0
00365f	43 00 00 00 20 00	Wait    4, Tc
003660	40 28 00 01 45 00	Write   [0:0x0050] = 8a02, DestBase: A
003661	b3 00 00 00 20 00	Wait    11, Tc
003662	00 09 18 00 00 00	Write   [0:0x3012] = 0
003663	80 09 18 00 00 00	Write   [0:0x3013] = 0
003664	43 00 00 00 20 00	Wait    4, Tc
003665	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003666	80 09 18 00 00 00	Write   [0:0x3013] = 0
003667	43 00 00 00 20 00	Wait    4, Tc
003668	40 28 80 01 45 00	Write   [0:0x0050] = 8a03, DestBase: A
003669	b3 00 00 00 20 00	Wait    11, Tc
00366a	00 09 18 00 00 00	Write   [0:0x3012] = 0
00366b	80 09 18 00 00 00	Write   [0:0x3013] = 0
00366c	43 00 00 00 20 00	Wait    4, Tc
00366d	00 08 98 18 05 00	Write   [0:0x3010] = a31
00366e	94 6b 00 00 20 00	Branch  0x6b9, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllSetMode(int) >
00366f	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003670	80 09 18 00 00 00	Write   [0:0x3013] = 0
003671	43 00 00 00 20 00	Wait    4, Tc
003672	40 28 80 93 45 00	Write   [0:0x0050] = 8b27, DestBase: A
003673	b3 00 00 00 20 00	Wait    11, Tc
003674	00 09 18 00 00 00	Write   [0:0x3012] = 0
003675	80 09 18 00 00 00	Write   [0:0x3013] = 0
003676	43 00 00 00 20 00	Wait    4, Tc
003677	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003678	80 09 18 00 00 00	Write   [0:0x3013] = 0
003679	43 00 00 00 20 00	Wait    4, Tc
00367a	c0 10 80 87 09 00	Write   [0:0x0021] = 130f, DestBase: A
00367b	b3 00 00 00 20 00	Wait    11, Tc
00367c	00 09 18 00 00 00	Write   [0:0x3012] = 0
00367d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00367e	43 00 00 00 20 00	Wait    4, Tc
00367f	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003680	80 09 18 00 00 00	Write   [0:0x3013] = 0
003681	43 00 00 00 20 00	Wait    4, Tc
003682	40 10 80 7f 0a 00	Write   [0:0x0020] = 14ff, DestBase: A
003683	b3 00 00 00 20 00	Wait    11, Tc
003684	00 09 18 00 00 00	Write   [0:0x3012] = 0
003685	80 09 18 00 00 00	Write   [0:0x3013] = 0
003686	43 00 00 00 20 00	Wait    4, Tc
003687	00 08 18 f1 07 00	Write   [0:0x3010] = fe2
003688	a4 62 03 00 20 00	Branch  0x362a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::BasebandSetMode(int) >
003689	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00368a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00368b	43 00 00 00 20 00	Wait    4, Tc
00368c	40 21 80 b5 07 00	Write   [0:0x0042] = f6b, DestBase: A
00368d	b3 00 00 00 20 00	Wait    11, Tc
00368e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00368f	80 09 18 00 00 00	Write   [0:0x3013] = 0
003690	43 00 00 00 20 00	Wait    4, Tc
003691	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003692	80 09 18 00 00 00	Write   [0:0x3013] = 0
003693	43 00 00 00 20 00	Wait    4, Tc
003694	40 28 00 93 45 00	Write   [0:0x0050] = 8b26, DestBase: A
003695	b3 00 00 00 20 00	Wait    11, Tc
003696	00 09 18 00 00 00	Write   [0:0x3012] = 0
003697	80 09 18 00 00 00	Write   [0:0x3013] = 0
003698	43 00 00 00 20 00	Wait    4, Tc
003699	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00369a	80 09 18 00 00 00	Write   [0:0x3013] = 0
00369b	43 00 00 00 20 00	Wait    4, Tc
00369c	40 28 80 93 45 00	Write   [0:0x0050] = 8b27, DestBase: A
00369d	b3 00 00 00 20 00	Wait    11, Tc
00369e	00 09 18 00 00 00	Write   [0:0x3012] = 0
00369f	80 09 18 00 00 00	Write   [0:0x3013] = 0
0036a0	43 00 00 00 20 00	Wait    4, Tc
0036a1	00 08 18 f2 07 00	Write   [0:0x3010] = fe4
0036a2	94 6b 00 00 20 00	Branch  0x6b9, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::PllSetMode(int) >
0036a3	00 09 18 00 40 00	Write   [0:0x3012] = 8000
0036a4	80 09 18 00 00 00	Write   [0:0x3013] = 0
0036a5	43 00 00 00 20 00	Wait    4, Tc
0036a6	40 28 80 9b 45 00	Write   [0:0x0050] = 8b37, DestBase: A
0036a7	b3 00 00 00 20 00	Wait    11, Tc
0036a8	00 09 18 00 00 00	Write   [0:0x3012] = 0
0036a9	80 09 18 00 00 00	Write   [0:0x3013] = 0
0036aa	43 00 00 00 20 00	Wait    4, Tc
0036ab	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxIntegratorModule::Initialize(unsigned int,unsigned int,unsigned int)
0036ac	00 90 08 00 00 00	Write   [0:0x1120] = 0
0036ad	80 90 08 03 00 00	Write   [0:0x1121] = 6
0036ae	00 91 08 d6 00 00	Write   [0:0x1122] = 1ac
0036af	80 91 08 04 00 00	Write   [0:0x1123] = 8
0036b0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxRecorderModule::Initialize(enum Vayyar::Centipede::CENTIPEDE_RECORDING_MODE,int,enum Vayyar::Centipede::INPUT_SELECT_MODE,int)
0036b1	43 00 00 00 20 00	Wait    4, Tc
0036b2	24 05 00 00 20 00	Branch  0x52, [CALL] < Vayyar::Centipede::CentipedeRxRecorderModule::RxAbortProcedure(void) >
0036b3	00 08 18 f4 07 00	Write   [0:0x3010] = fe8
0036b4	43 00 00 00 20 00	Wait    4, Tc
0036b5	01 00 88 01 00 01	Copy    [0:1000] = [SF+0], SrcBase: AI
0036b6	01 00 88 01 00 01	Copy    [0:1000] = [SF+1], SrcBase: AI
0036b7	33 00 00 00 20 00	Wait    3, Tc
0036b8	01 34 88 01 00 01	Copy    [0:1068] = [SF+2], SrcBase: AI
0036b9	81 34 88 01 00 01	Copy    [0:1069] = [SF+3], SrcBase: AI
0036ba	33 00 00 00 20 00	Wait    3, Tc
0036bb	04 00 00 00 40 00	Branch  0x0, [RET]


CentipedeRxLineupCommand::Initialize()_default
0036bc	c4 6a 03 00 20 00	Branch  0x36ac, [CALL] < Vayyar::Centipede::CentipedeRxIntegratorModule::Initialize(unsigned int,unsigned int,unsigned int) >
0036bd	00 08 18 f4 07 00	Write   [0:0x3010] = fe8
0036be	14 6b 03 00 20 00	Branch  0x36b1, [CALL] < Vayyar::Centipede::CentipedeRxRecorderModule::Initialize(enum Vayyar::Centipede::CENTIPEDE_RECORDING_MODE,int,enum Vayyar::Centipede::INPUT_SELECT_MODE,int) >
0036bf	00 30 08 00 40 00	Write   [0:0x1060] = 8000
0036c0	80 30 88 00 00 00	Write   [0:0x1061] = 1
0036c1	00 60 88 00 00 00	Write   [0:0x10c0] = 1
0036c2	80 b7 80 00 00 00	Write   [0:0x016f] = 1
0036c3	80 bf 00 18 00 00	Write   [0:0x017f] = 30
0036c4	80 bf 00 80 7f 00	Write   [0:0x017f] = ff00
0036c5	00 d5 00 20 20 00	Write   [0:0x01aa] = 4040
0036c6	04 00 00 00 40 00	Branch  0x0, [RET]


ReadModifyWrite_Direct
0036c7	43 00 00 00 20 00	Wait    4, Tc
0036c8	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0036c9	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0036ca	73 00 00 00 20 00	Wait    7, Tc
0036cb	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0036cc	01 08 98 1c 02 00	Copy    [0:3010] = [1:010e]
0036cd	83 00 00 00 20 00	Wait    8, Tc
0036ce	01 70 18 01 00 00	Copy    [0:30e0] = [0:0000], SrcBase: A
0036cf	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0036d0	83 00 00 00 20 00	Wait    8, Tc
0036d1	01 71 98 22 02 00	Copy    [0:30e2] = [1:0111]
0036d2	33 00 00 00 20 00	Wait    3, Tc
0036d3	01 70 18 d0 61 00	Copy    [0:30e0] = [0:30e8]
0036d4	01 71 98 24 02 00	Copy    [0:30e2] = [1:0112]
0036d5	73 00 00 00 20 00	Wait    7, Tc
0036d6	01 70 18 d2 61 00	Copy    [0:30e0] = [0:30e9]
0036d7	01 71 98 1e 02 00	Copy    [0:30e2] = [1:010f]
0036d8	73 00 00 00 20 00	Wait    7, Tc
0036d9	01 71 18 d0 61 00	Copy    [0:30e2] = [0:30e8]
0036da	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0036db	33 00 00 00 20 00	Wait    3, Tc
0036dc	01 08 98 1c 02 00	Copy    [0:3010] = [1:010e]
0036dd	43 00 00 00 20 00	Wait    4, Tc
0036de	01 70 18 01 00 00	Copy    [0:30e0] = [0:0000], SrcBase: A
0036df	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0036e0	c3 00 00 00 20 00	Wait    12, Tc
0036e1	01 70 18 cc 61 00	Copy    [0:30e0] = [0:30e6]
0036e2	01 71 98 26 02 00	Copy    [0:30e2] = [1:0113]
0036e3	73 00 00 00 20 00	Wait    7, Tc
0036e4	91 08 00 24 60 00	Copy    [1:0011] = [0:3012]
0036e5	01 09 98 1c 02 00	Copy    [0:3012] = [1:010e]
0036e6	83 00 00 00 20 00	Wait    8, Tc
0036e7	41 00 00 c8 61 00	Copy    [0:0000] = [0:30e4], DestBase: A
0036e8	01 09 98 22 00 00	Copy    [0:3012] = [1:0011]
0036e9	c3 00 00 00 20 00	Wait    12, Tc
0036ea	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::SetChirpOnRecord(void)
0036eb	43 00 00 00 20 00	Wait    4, Tc
0036ec	00 10 10 00 00 00	Write   [0:0x2020] = 0
0036ed	80 10 10 00 00 00	Write   [0:0x2021] = 0
0036ee	00 13 10 00 00 00	Write   [0:0x2026] = 0
0036ef	80 13 10 00 00 00	Write   [0:0x2027] = 0
0036f0	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_646_[PllIdx == 0]
0036f1	f4 8b 00 00 20 00	Branch  0x8bf, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >		# Else_646_Func_Start
0036f2	94 8d 00 00 20 00	Branch  0x8d9, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0036f3	34 8f 00 00 20 00	Branch  0x8f3, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0036f4	d4 90 00 00 20 00	Branch  0x90d, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0036f5	74 92 00 00 20 00	Branch  0x927, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0036f6	14 94 00 00 20 00	Branch  0x941, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0036f7	b4 95 00 00 20 00	Branch  0x95b, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0036f8	04 00 00 00 40 00	Branch  0x0, [RET]


ManualTuneWithIdx
0036f9	a3 00 00 00 20 00	Wait    10, Tc
0036fa	01 48 98 5c 00 00	Copy    [0:3090] = [1:002e]		# If_646
0036fb	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
0036fc	93 00 00 00 20 00	Wait    9, Tc
0036fd	02 00 00 01 00 00	Cond    0x00100000

0036fe	34 70 03 00 90 00	Branch  0x3703, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
0036ff	a4 87 00 00 20 00	Branch  0x87a, [CALL] < __If_1_[PllIdx == 0] >
003700	00 08 18 27 05 00	Write   [0:0x3010] = a4e
003701	43 00 00 00 20 00	Wait    4, Tc
003702	64 70 03 00 00 00	Branch  0x3706, [JMP]
003703	14 6f 03 00 20 00	Branch  0x36f1, [CALL] < __Else_646_[PllIdx == 0] >		# Else_646
003704	00 08 18 27 05 00	Write   [0:0x3010] = a4e
003705	43 00 00 00 20 00	Wait    4, Tc
003706	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_646

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams)
003707	10 17 00 00 00 00	Write   [1:0x002e] = 0
003708	90 17 00 00 00 00	Write   [1:0x002f] = 0
003709	00 08 98 26 05 00	Write   [0:0x3010] = a4d
00370a	94 6f 03 00 20 00	Branch  0x36f9, [CALL] < ManualTuneWithIdx >
00370b	06 00 00 00 00 00	Nop     		# waitNonBlocking_pllTuneStabilizationTime_1_start
00370c	00 8a 08 00 00 00	Write   [0:0x1114] = 0
00370d	80 8a 08 00 00 00	Write   [0:0x1115] = 0
00370e	00 89 08 a7 19 00	Write   [0:0x1112] = 334e
00370f	80 89 88 99 19 00	Write   [0:0x1113] = 3333
003710	00 88 08 00 00 00	Write   [0:0x1110] = 0
003711	80 88 08 00 00 00	Write   [0:0x1111] = 0
003712	00 08 18 fb 07 00	Write   [0:0x3010] = ff6
003713	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003714	80 12 10 00 00 00	Write   [0:0x2025] = 0
003715	00 12 10 00 00 00	Write   [0:0x2024] = 0
003716	00 10 10 00 00 00	Write   [0:0x2020] = 0
003717	80 10 10 00 00 00	Write   [0:0x2021] = 0
003718	00 08 98 fd 07 00	Write   [0:0x3010] = ffb
003719	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
00371a	80 15 10 00 00 00	Write   [0:0x202b] = 0
00371b	00 15 10 00 00 00	Write   [0:0x202a] = 0
00371c	00 13 10 00 00 00	Write   [0:0x2026] = 0
00371d	80 13 10 00 00 00	Write   [0:0x2027] = 0
00371e	06 00 00 00 00 00	Nop     
00371f	63 60 00 00 20 00	Wait    1542, Tc		# waitNonBlocking_pllTuneStabilizationTime_1_end
003720	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFirstFrequencyPatch(const struct Vayyar::FreqInfoPreM &,double,bool,unsigned __int64)
003721	00 08 18 1c 05 00	Write   [0:0x3010] = a38
003722	a4 7a 00 00 20 00	Branch  0x7aa, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
003723	00 08 18 1c 05 00	Write   [0:0x3010] = a38
003724	74 7b 00 00 20 00	Branch  0x7b7, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
003725	74 70 03 00 20 00	Branch  0x3707, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams) >
003726	00 08 98 f6 05 00	Write   [0:0x3010] = bed
003727	74 0e 01 00 20 00	Branch  0x10e7, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
003728	00 08 98 f6 05 00	Write   [0:0x3010] = bed
003729	44 0f 01 00 20 00	Branch  0x10f4, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
00372a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedePowerManagementCommand::OnSweepStop(void)
00372b	a4 59 00 00 20 00	Branch  0x59a, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::Initialize(double) >
00372c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00372d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00372e	43 00 00 00 20 00	Wait    4, Tc
00372f	c0 11 00 05 05 00	Write   [0:0x0023] = a0a, DestBase: A
003730	b3 00 00 00 20 00	Wait    11, Tc
003731	00 09 18 00 00 00	Write   [0:0x3012] = 0
003732	80 09 18 00 00 00	Write   [0:0x3013] = 0
003733	43 00 00 00 20 00	Wait    4, Tc
003734	90 10 00 00 00 00	Write   [1:0x0021] = 0
003735	00 01 08 00 00 00	Write   [0:0x1002] = 0
003736	80 00 10 00 00 00	Write   [0:0x2001] = 0
003737	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRecordingSweepBuilder::SetTimerForInitToStable(void)
003738	00 31 98 00 00 00	Write   [0:0x3062] = 1
003739	00 30 98 00 00 00	Write   [0:0x3060] = 1
00373a	80 3d 18 00 00 00	Write   [0:0x307b] = 0
00373b	00 3d 98 01 00 00	Write   [0:0x307a] = 3
00373c	80 3c 98 ff 73 00	Write   [0:0x3079] = e7ff
00373d	04 00 00 00 40 00	Branch  0x0, [RET]


InitCode0
00373e	90 10 80 00 00 00	Write   [1:0x0021] = 1
00373f	b4 5e 03 00 20 00	Branch  0x35eb, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::LogenPowerUpHelper(class std::array<enum Vayyar::Centipede::PLL_POWER,2>,bool) >
003740	c4 60 03 00 20 00	Branch  0x360c, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::Initialize(enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,double,double) >
003741	b4 63 03 00 20 00	Branch  0x363b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetMode(struct Vayyar::Centipede::LoMode []) >
003742	c4 6b 03 00 20 00	Branch  0x36bc, [CALL] < t >
003743	24 10 00 00 20 00	Branch  0x102, [CALL] < Vayyar::Centipede::CentipedePortStateCommand::Initialize(void) >
003744	24 33 00 00 20 00	Branch  0x332, [CALL] < Vayyar::Centipede::CentipedeSetPolarityCommand::SetPolarityDefaultValues(enum Vayyar::Centipede::BAND) >
003745	00 08 18 f6 07 00	Write   [0:0x3010] = fec
003746	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
003747	90 89 80 00 00 00	Write   [1:0x0113] = 1
003748	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
003749	74 6c 03 00 20 00	Branch  0x36c7, [CALL] < ReadModifyWrite_Direct >
00374a	00 08 98 f8 07 00	Write   [0:0x3010] = ff1
00374b	64 77 00 00 20 00	Branch  0x776, [CALL] < mtIoffset_1 >
00374c	90 89 00 01 00 00	Write   [1:0x0113] = 2
00374d	00 08 18 f0 04 00	Write   [0:0x3010] = 9e0
00374e	74 6c 03 00 20 00	Branch  0x36c7, [CALL] < ReadModifyWrite_Direct >
00374f	b4 6e 03 00 20 00	Branch  0x36eb, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::SetChirpOnRecord(void) >
003750	14 72 03 00 20 00	Branch  0x3721, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFirstFrequencyPatch(const struct Vayyar::FreqInfoPreM &,double,bool,unsigned __int64) >
003751	b4 72 03 00 20 00	Branch  0x372b, [CALL] < Vayyar::Centipede::CentipedePowerManagementCommand::OnSweepStop(void) >
003752	84 73 03 00 20 00	Branch  0x3738, [CALL] < Vayyar::Centipede::CentipedeRecordingSweepBuilder::SetTimerForInitToStable(void) >
003753	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTxTransmissionIndicationCommand::StartTransmissionIndication(void) const
003754	00 31 98 00 00 00	Write   [0:0x3062] = 1
003755	00 30 98 00 00 00	Write   [0:0x3060] = 1
003756	80 3d 18 00 00 00	Write   [0:0x307b] = 0
003757	00 3d 18 01 00 00	Write   [0:0x307a] = 2
003758	80 3c 18 80 38 00	Write   [0:0x3079] = 7100
003759	00 18 80 80 00 00	Write   [0:0x0030] = 101
00375a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedePowerManagementCommand::OnSweepStartFirstPhase(void)
00375b	90 10 80 00 00 00	Write   [1:0x0021] = 1
00375c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
00375d	80 09 18 00 00 00	Write   [0:0x3013] = 0
00375e	43 00 00 00 20 00	Wait    4, Tc
00375f	c0 11 80 05 05 00	Write   [0:0x0023] = a0b, DestBase: A
003760	b3 00 00 00 20 00	Wait    11, Tc
003761	00 09 18 00 00 00	Write   [0:0x3012] = 0
003762	80 09 18 00 00 00	Write   [0:0x3013] = 0
003763	53 14 00 00 20 00	Wait    325, Tc
003764	c4 60 03 00 20 00	Branch  0x360c, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::Initialize(enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,enum Vayyar::Centipede::BB_MODE,enum Vayyar::Centipede::PLL_MODE,enum Vayyar::Centipede::LO_SOURCE,double,double) >
003765	b4 63 03 00 20 00	Branch  0x363b, [CALL] < Vayyar::Centipede::CentipedeImplAnalogSynthModule::SetMode(struct Vayyar::Centipede::LoMode []) >
003766	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003767	43 00 00 00 20 00	Wait    4, Tc
003768	01 70 98 96 13 00	Copy    [0:30e0] = [1:09cb]
003769	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00376a	01 70 98 96 13 00	Copy    [0:30e0] = [1:09cb]
00376b	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00376c	33 00 00 00 20 00	Wait    3, Tc
00376d	01 71 98 c6 10 00	Copy    [0:30e2] = [1:0863]
00376e	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00376f	73 00 00 00 20 00	Wait    7, Tc
003770	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003771	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003772	33 00 00 00 20 00	Wait    3, Tc
003773	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003774	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003775	74 76 03 00 20 00	Branch  0x3767, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003776	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003777	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003778	83 00 00 00 20 00	Wait    8, Tc
003779	01 23 90 01 00 00	Copy    [0:2046] = [1:0000], SrcBase: A
00377a	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00377b	83 00 00 00 20 00	Wait    8, Tc
00377c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00377d	43 00 00 00 20 00	Wait    4, Tc
00377e	01 70 98 96 13 00	Copy    [0:30e0] = [1:09cb]
00377f	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003780	01 70 98 96 13 00	Copy    [0:30e0] = [1:09cb]
003781	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003782	33 00 00 00 20 00	Wait    3, Tc
003783	01 71 98 d0 10 00	Copy    [0:30e2] = [1:0868]
003784	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003785	73 00 00 00 20 00	Wait    7, Tc
003786	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003787	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003788	33 00 00 00 20 00	Wait    3, Tc
003789	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00378a	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00378b	d4 77 03 00 20 00	Branch  0x377d, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00378c	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00378d	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
00378e	83 00 00 00 20 00	Wait    8, Tc
00378f	81 23 90 01 00 00	Copy    [0:2047] = [1:0000], SrcBase: A
003790	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003791	83 00 00 00 20 00	Wait    8, Tc
003792	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003793	43 00 00 00 20 00	Wait    4, Tc
003794	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003795	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003796	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003797	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003798	33 00 00 00 20 00	Wait    3, Tc
003799	01 71 98 da 10 00	Copy    [0:30e2] = [1:086d]
00379a	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00379b	73 00 00 00 20 00	Wait    7, Tc
00379c	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00379d	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00379e	33 00 00 00 20 00	Wait    3, Tc
00379f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0037a0	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0037a1	34 79 03 00 20 00	Branch  0x3793, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0037a2	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0037a3	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0037a4	83 00 00 00 20 00	Wait    8, Tc
0037a5	81 20 90 01 00 00	Copy    [0:2041] = [1:0000], SrcBase: A
0037a6	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0037a7	83 00 00 00 20 00	Wait    8, Tc
0037a8	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0037a9	43 00 00 00 20 00	Wait    4, Tc
0037aa	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0037ab	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0037ac	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0037ad	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0037ae	33 00 00 00 20 00	Wait    3, Tc
0037af	01 71 98 e4 10 00	Copy    [0:30e2] = [1:0872]
0037b0	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0037b1	73 00 00 00 20 00	Wait    7, Tc
0037b2	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0037b3	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0037b4	33 00 00 00 20 00	Wait    3, Tc
0037b5	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0037b6	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0037b7	94 7a 03 00 20 00	Branch  0x37a9, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0037b8	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0037b9	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0037ba	83 00 00 00 20 00	Wait    8, Tc
0037bb	01 22 90 01 00 00	Copy    [0:2044] = [1:0000], SrcBase: A
0037bc	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0037bd	83 00 00 00 20 00	Wait    8, Tc
0037be	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0037bf	43 00 00 00 20 00	Wait    4, Tc
0037c0	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0037c1	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0037c2	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0037c3	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0037c4	33 00 00 00 20 00	Wait    3, Tc
0037c5	01 71 98 ee 10 00	Copy    [0:30e2] = [1:0877]
0037c6	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0037c7	73 00 00 00 20 00	Wait    7, Tc
0037c8	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0037c9	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0037ca	33 00 00 00 20 00	Wait    3, Tc
0037cb	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0037cc	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0037cd	f4 7b 03 00 20 00	Branch  0x37bf, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0037ce	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0037cf	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0037d0	83 00 00 00 20 00	Wait    8, Tc
0037d1	01 20 90 01 00 00	Copy    [0:2040] = [1:0000], SrcBase: A
0037d2	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0037d3	83 00 00 00 20 00	Wait    8, Tc
0037d4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0037d5	43 00 00 00 20 00	Wait    4, Tc
0037d6	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0037d7	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0037d8	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0037d9	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0037da	33 00 00 00 20 00	Wait    3, Tc
0037db	01 71 98 f8 10 00	Copy    [0:30e2] = [1:087c]
0037dc	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0037dd	73 00 00 00 20 00	Wait    7, Tc
0037de	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0037df	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0037e0	33 00 00 00 20 00	Wait    3, Tc
0037e1	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0037e2	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0037e3	54 7d 03 00 20 00	Branch  0x37d5, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0037e4	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0037e5	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0037e6	83 00 00 00 20 00	Wait    8, Tc
0037e7	01 38 90 01 00 00	Copy    [0:2070] = [1:0000], SrcBase: A
0037e8	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0037e9	83 00 00 00 20 00	Wait    8, Tc
0037ea	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0037eb	43 00 00 00 20 00	Wait    4, Tc
0037ec	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0037ed	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0037ee	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0037ef	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0037f0	33 00 00 00 20 00	Wait    3, Tc
0037f1	01 71 98 02 11 00	Copy    [0:30e2] = [1:0881]
0037f2	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0037f3	73 00 00 00 20 00	Wait    7, Tc
0037f4	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0037f5	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0037f6	33 00 00 00 20 00	Wait    3, Tc
0037f7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0037f8	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0037f9	b4 7e 03 00 20 00	Branch  0x37eb, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0037fa	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0037fb	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0037fc	83 00 00 00 20 00	Wait    8, Tc
0037fd	81 38 90 01 00 00	Copy    [0:2071] = [1:0000], SrcBase: A
0037fe	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0037ff	83 00 00 00 20 00	Wait    8, Tc
003800	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003801	43 00 00 00 20 00	Wait    4, Tc
003802	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003803	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003804	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003805	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003806	33 00 00 00 20 00	Wait    3, Tc
003807	01 71 98 0c 11 00	Copy    [0:30e2] = [1:0886]
003808	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003809	73 00 00 00 20 00	Wait    7, Tc
00380a	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00380b	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00380c	33 00 00 00 20 00	Wait    3, Tc
00380d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00380e	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00380f	14 80 03 00 20 00	Branch  0x3801, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003810	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003811	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003812	83 00 00 00 20 00	Wait    8, Tc
003813	01 21 90 01 00 00	Copy    [0:2042] = [1:0000], SrcBase: A
003814	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003815	83 00 00 00 20 00	Wait    8, Tc
003816	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003817	43 00 00 00 20 00	Wait    4, Tc
003818	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003819	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00381a	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00381b	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00381c	33 00 00 00 20 00	Wait    3, Tc
00381d	01 71 98 16 11 00	Copy    [0:30e2] = [1:088b]
00381e	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00381f	73 00 00 00 20 00	Wait    7, Tc
003820	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003821	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003822	33 00 00 00 20 00	Wait    3, Tc
003823	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003824	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003825	74 81 03 00 20 00	Branch  0x3817, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003826	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003827	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003828	83 00 00 00 20 00	Wait    8, Tc
003829	01 39 90 01 00 00	Copy    [0:2072] = [1:0000], SrcBase: A
00382a	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00382b	83 00 00 00 20 00	Wait    8, Tc
00382c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00382d	43 00 00 00 20 00	Wait    4, Tc
00382e	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00382f	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003830	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003831	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003832	33 00 00 00 20 00	Wait    3, Tc
003833	01 71 98 20 11 00	Copy    [0:30e2] = [1:0890]
003834	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003835	73 00 00 00 20 00	Wait    7, Tc
003836	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003837	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003838	33 00 00 00 20 00	Wait    3, Tc
003839	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00383a	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00383b	d4 82 03 00 20 00	Branch  0x382d, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00383c	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00383d	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
00383e	83 00 00 00 20 00	Wait    8, Tc
00383f	81 39 90 01 00 00	Copy    [0:2073] = [1:0000], SrcBase: A
003840	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003841	83 00 00 00 20 00	Wait    8, Tc
003842	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003843	43 00 00 00 20 00	Wait    4, Tc
003844	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003845	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003846	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003847	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003848	33 00 00 00 20 00	Wait    3, Tc
003849	01 71 98 2a 11 00	Copy    [0:30e2] = [1:0895]
00384a	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00384b	73 00 00 00 20 00	Wait    7, Tc
00384c	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00384d	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00384e	33 00 00 00 20 00	Wait    3, Tc
00384f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003850	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003851	34 84 03 00 20 00	Branch  0x3843, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003852	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003853	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003854	83 00 00 00 20 00	Wait    8, Tc
003855	81 21 90 01 00 00	Copy    [0:2043] = [1:0000], SrcBase: A
003856	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003857	83 00 00 00 20 00	Wait    8, Tc
003858	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003859	43 00 00 00 20 00	Wait    4, Tc
00385a	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00385b	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00385c	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00385d	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00385e	33 00 00 00 20 00	Wait    3, Tc
00385f	01 71 98 34 11 00	Copy    [0:30e2] = [1:089a]
003860	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003861	73 00 00 00 20 00	Wait    7, Tc
003862	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003863	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003864	33 00 00 00 20 00	Wait    3, Tc
003865	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003866	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003867	94 85 03 00 20 00	Branch  0x3859, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003868	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003869	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
00386a	83 00 00 00 20 00	Wait    8, Tc
00386b	81 24 90 01 00 00	Copy    [0:2049] = [1:0000], SrcBase: A
00386c	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00386d	83 00 00 00 20 00	Wait    8, Tc
00386e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00386f	43 00 00 00 20 00	Wait    4, Tc
003870	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003871	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003872	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003873	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003874	33 00 00 00 20 00	Wait    3, Tc
003875	01 71 98 3e 11 00	Copy    [0:30e2] = [1:089f]
003876	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003877	73 00 00 00 20 00	Wait    7, Tc
003878	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003879	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00387a	33 00 00 00 20 00	Wait    3, Tc
00387b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00387c	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00387d	f4 86 03 00 20 00	Branch  0x386f, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00387e	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00387f	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003880	83 00 00 00 20 00	Wait    8, Tc
003881	01 25 90 01 00 00	Copy    [0:204a] = [1:0000], SrcBase: A
003882	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003883	83 00 00 00 20 00	Wait    8, Tc
003884	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003885	43 00 00 00 20 00	Wait    4, Tc
003886	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003887	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003888	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003889	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00388a	33 00 00 00 20 00	Wait    3, Tc
00388b	01 71 98 48 11 00	Copy    [0:30e2] = [1:08a4]
00388c	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00388d	73 00 00 00 20 00	Wait    7, Tc
00388e	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00388f	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003890	33 00 00 00 20 00	Wait    3, Tc
003891	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003892	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003893	54 88 03 00 20 00	Branch  0x3885, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003894	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003895	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003896	83 00 00 00 20 00	Wait    8, Tc
003897	81 22 90 01 00 00	Copy    [0:2045] = [1:0000], SrcBase: A
003898	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003899	83 00 00 00 20 00	Wait    8, Tc
00389a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00389b	43 00 00 00 20 00	Wait    4, Tc
00389c	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00389d	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00389e	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00389f	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0038a0	33 00 00 00 20 00	Wait    3, Tc
0038a1	01 71 98 52 11 00	Copy    [0:30e2] = [1:08a9]
0038a2	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0038a3	73 00 00 00 20 00	Wait    7, Tc
0038a4	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0038a5	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0038a6	33 00 00 00 20 00	Wait    3, Tc
0038a7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0038a8	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0038a9	b4 89 03 00 20 00	Branch  0x389b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0038aa	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0038ab	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0038ac	83 00 00 00 20 00	Wait    8, Tc
0038ad	81 25 90 01 00 00	Copy    [0:204b] = [1:0000], SrcBase: A
0038ae	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0038af	83 00 00 00 20 00	Wait    8, Tc
0038b0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0038b1	43 00 00 00 20 00	Wait    4, Tc
0038b2	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0038b3	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0038b4	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0038b5	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0038b6	33 00 00 00 20 00	Wait    3, Tc
0038b7	01 71 98 5c 11 00	Copy    [0:30e2] = [1:08ae]
0038b8	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0038b9	73 00 00 00 20 00	Wait    7, Tc
0038ba	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0038bb	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0038bc	33 00 00 00 20 00	Wait    3, Tc
0038bd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0038be	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0038bf	14 8b 03 00 20 00	Branch  0x38b1, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0038c0	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0038c1	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0038c2	83 00 00 00 20 00	Wait    8, Tc
0038c3	01 26 90 01 00 00	Copy    [0:204c] = [1:0000], SrcBase: A
0038c4	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0038c5	83 00 00 00 20 00	Wait    8, Tc
0038c6	04 00 00 00 40 00	Branch  0x0, [RET]


__If_647_TX_LO
0038c7	44 77 03 00 20 00	Branch  0x3774, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >		# If_647_Func_Start
0038c8	a4 78 03 00 20 00	Branch  0x378a, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038c9	04 7a 03 00 20 00	Branch  0x37a0, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038ca	64 7b 03 00 20 00	Branch  0x37b6, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038cb	c4 7c 03 00 20 00	Branch  0x37cc, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038cc	24 7e 03 00 20 00	Branch  0x37e2, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038cd	84 7f 03 00 20 00	Branch  0x37f8, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038ce	e4 80 03 00 20 00	Branch  0x380e, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038cf	44 82 03 00 20 00	Branch  0x3824, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038d0	a4 83 03 00 20 00	Branch  0x383a, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038d1	04 85 03 00 20 00	Branch  0x3850, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038d2	64 86 03 00 20 00	Branch  0x3866, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038d3	c4 87 03 00 20 00	Branch  0x387c, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038d4	24 89 03 00 20 00	Branch  0x3892, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038d5	84 8a 03 00 20 00	Branch  0x38a8, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038d6	e4 8b 03 00 20 00	Branch  0x38be, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
0038d7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0038d8	43 00 00 00 20 00	Wait    4, Tc
0038d9	01 70 98 96 13 00	Copy    [0:30e0] = [1:09cb]
0038da	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0038db	01 70 98 96 13 00	Copy    [0:30e0] = [1:09cb]
0038dc	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0038dd	33 00 00 00 20 00	Wait    3, Tc
0038de	01 71 98 66 11 00	Copy    [0:30e2] = [1:08b3]
0038df	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0038e0	73 00 00 00 20 00	Wait    7, Tc
0038e1	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0038e2	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0038e3	33 00 00 00 20 00	Wait    3, Tc
0038e4	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0038e5	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0038e6	84 8d 03 00 20 00	Branch  0x38d8, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0038e7	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0038e8	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0038e9	83 00 00 00 20 00	Wait    8, Tc
0038ea	01 2b 90 01 00 00	Copy    [0:2056] = [1:0000], SrcBase: A
0038eb	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0038ec	83 00 00 00 20 00	Wait    8, Tc
0038ed	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0038ee	43 00 00 00 20 00	Wait    4, Tc
0038ef	01 70 98 96 13 00	Copy    [0:30e0] = [1:09cb]
0038f0	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0038f1	01 70 98 96 13 00	Copy    [0:30e0] = [1:09cb]
0038f2	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0038f3	33 00 00 00 20 00	Wait    3, Tc
0038f4	01 71 98 70 11 00	Copy    [0:30e2] = [1:08b8]
0038f5	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0038f6	73 00 00 00 20 00	Wait    7, Tc
0038f7	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0038f8	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0038f9	33 00 00 00 20 00	Wait    3, Tc
0038fa	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0038fb	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0038fc	e4 8e 03 00 20 00	Branch  0x38ee, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0038fd	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0038fe	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0038ff	83 00 00 00 20 00	Wait    8, Tc
003900	81 2b 90 01 00 00	Copy    [0:2057] = [1:0000], SrcBase: A
003901	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003902	83 00 00 00 20 00	Wait    8, Tc
003903	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003904	43 00 00 00 20 00	Wait    4, Tc
003905	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003906	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003907	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003908	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003909	33 00 00 00 20 00	Wait    3, Tc
00390a	01 71 98 7a 11 00	Copy    [0:30e2] = [1:08bd]
00390b	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00390c	73 00 00 00 20 00	Wait    7, Tc
00390d	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00390e	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00390f	33 00 00 00 20 00	Wait    3, Tc
003910	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003911	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003912	44 90 03 00 20 00	Branch  0x3904, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003913	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003914	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003915	83 00 00 00 20 00	Wait    8, Tc
003916	81 28 90 01 00 00	Copy    [0:2051] = [1:0000], SrcBase: A
003917	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003918	83 00 00 00 20 00	Wait    8, Tc
003919	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00391a	43 00 00 00 20 00	Wait    4, Tc
00391b	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00391c	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00391d	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00391e	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00391f	33 00 00 00 20 00	Wait    3, Tc
003920	01 71 98 84 11 00	Copy    [0:30e2] = [1:08c2]
003921	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003922	73 00 00 00 20 00	Wait    7, Tc
003923	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003924	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003925	33 00 00 00 20 00	Wait    3, Tc
003926	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003927	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003928	a4 91 03 00 20 00	Branch  0x391a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003929	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00392a	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
00392b	83 00 00 00 20 00	Wait    8, Tc
00392c	01 2a 90 01 00 00	Copy    [0:2054] = [1:0000], SrcBase: A
00392d	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00392e	83 00 00 00 20 00	Wait    8, Tc
00392f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003930	43 00 00 00 20 00	Wait    4, Tc
003931	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003932	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003933	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003934	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003935	33 00 00 00 20 00	Wait    3, Tc
003936	01 71 98 8e 11 00	Copy    [0:30e2] = [1:08c7]
003937	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003938	73 00 00 00 20 00	Wait    7, Tc
003939	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00393a	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00393b	33 00 00 00 20 00	Wait    3, Tc
00393c	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00393d	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00393e	04 93 03 00 20 00	Branch  0x3930, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00393f	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003940	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003941	83 00 00 00 20 00	Wait    8, Tc
003942	01 28 90 01 00 00	Copy    [0:2050] = [1:0000], SrcBase: A
003943	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003944	83 00 00 00 20 00	Wait    8, Tc
003945	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003946	43 00 00 00 20 00	Wait    4, Tc
003947	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003948	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003949	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00394a	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00394b	33 00 00 00 20 00	Wait    3, Tc
00394c	01 71 98 98 11 00	Copy    [0:30e2] = [1:08cc]
00394d	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00394e	73 00 00 00 20 00	Wait    7, Tc
00394f	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003950	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003951	33 00 00 00 20 00	Wait    3, Tc
003952	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003953	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003954	64 94 03 00 20 00	Branch  0x3946, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003955	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003956	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003957	83 00 00 00 20 00	Wait    8, Tc
003958	01 3a 90 01 00 00	Copy    [0:2074] = [1:0000], SrcBase: A
003959	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00395a	83 00 00 00 20 00	Wait    8, Tc
00395b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00395c	43 00 00 00 20 00	Wait    4, Tc
00395d	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00395e	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00395f	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003960	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003961	33 00 00 00 20 00	Wait    3, Tc
003962	01 71 98 a2 11 00	Copy    [0:30e2] = [1:08d1]
003963	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003964	73 00 00 00 20 00	Wait    7, Tc
003965	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003966	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003967	33 00 00 00 20 00	Wait    3, Tc
003968	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003969	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
00396a	c4 95 03 00 20 00	Branch  0x395c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
00396b	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
00396c	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
00396d	83 00 00 00 20 00	Wait    8, Tc
00396e	81 3a 90 01 00 00	Copy    [0:2075] = [1:0000], SrcBase: A
00396f	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003970	83 00 00 00 20 00	Wait    8, Tc
003971	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003972	43 00 00 00 20 00	Wait    4, Tc
003973	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003974	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003975	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003976	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003977	33 00 00 00 20 00	Wait    3, Tc
003978	01 71 98 ac 11 00	Copy    [0:30e2] = [1:08d6]
003979	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
00397a	73 00 00 00 20 00	Wait    7, Tc
00397b	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
00397c	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
00397d	33 00 00 00 20 00	Wait    3, Tc
00397e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
00397f	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003980	24 97 03 00 20 00	Branch  0x3972, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003981	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003982	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003983	83 00 00 00 20 00	Wait    8, Tc
003984	01 29 90 01 00 00	Copy    [0:2052] = [1:0000], SrcBase: A
003985	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003986	83 00 00 00 20 00	Wait    8, Tc
003987	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003988	43 00 00 00 20 00	Wait    4, Tc
003989	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00398a	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
00398b	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
00398c	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
00398d	33 00 00 00 20 00	Wait    3, Tc
00398e	01 71 98 b6 11 00	Copy    [0:30e2] = [1:08db]
00398f	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003990	73 00 00 00 20 00	Wait    7, Tc
003991	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003992	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003993	33 00 00 00 20 00	Wait    3, Tc
003994	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003995	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003996	84 98 03 00 20 00	Branch  0x3988, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003997	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003998	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003999	83 00 00 00 20 00	Wait    8, Tc
00399a	01 3b 90 01 00 00	Copy    [0:2076] = [1:0000], SrcBase: A
00399b	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
00399c	83 00 00 00 20 00	Wait    8, Tc
00399d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
00399e	43 00 00 00 20 00	Wait    4, Tc
00399f	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039a0	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0039a1	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039a2	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0039a3	33 00 00 00 20 00	Wait    3, Tc
0039a4	01 71 98 c0 11 00	Copy    [0:30e2] = [1:08e0]
0039a5	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0039a6	73 00 00 00 20 00	Wait    7, Tc
0039a7	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0039a8	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0039a9	33 00 00 00 20 00	Wait    3, Tc
0039aa	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0039ab	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0039ac	e4 99 03 00 20 00	Branch  0x399e, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0039ad	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0039ae	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0039af	83 00 00 00 20 00	Wait    8, Tc
0039b0	81 3b 90 01 00 00	Copy    [0:2077] = [1:0000], SrcBase: A
0039b1	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0039b2	83 00 00 00 20 00	Wait    8, Tc
0039b3	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0039b4	43 00 00 00 20 00	Wait    4, Tc
0039b5	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039b6	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0039b7	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039b8	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0039b9	33 00 00 00 20 00	Wait    3, Tc
0039ba	01 71 98 ca 11 00	Copy    [0:30e2] = [1:08e5]
0039bb	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0039bc	73 00 00 00 20 00	Wait    7, Tc
0039bd	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0039be	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0039bf	33 00 00 00 20 00	Wait    3, Tc
0039c0	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0039c1	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0039c2	44 9b 03 00 20 00	Branch  0x39b4, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0039c3	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0039c4	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0039c5	83 00 00 00 20 00	Wait    8, Tc
0039c6	81 29 90 01 00 00	Copy    [0:2053] = [1:0000], SrcBase: A
0039c7	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0039c8	83 00 00 00 20 00	Wait    8, Tc
0039c9	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0039ca	43 00 00 00 20 00	Wait    4, Tc
0039cb	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039cc	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0039cd	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039ce	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0039cf	33 00 00 00 20 00	Wait    3, Tc
0039d0	01 71 98 d4 11 00	Copy    [0:30e2] = [1:08ea]
0039d1	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0039d2	73 00 00 00 20 00	Wait    7, Tc
0039d3	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0039d4	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0039d5	33 00 00 00 20 00	Wait    3, Tc
0039d6	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0039d7	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0039d8	a4 9c 03 00 20 00	Branch  0x39ca, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0039d9	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0039da	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0039db	83 00 00 00 20 00	Wait    8, Tc
0039dc	81 2c 90 01 00 00	Copy    [0:2059] = [1:0000], SrcBase: A
0039dd	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0039de	83 00 00 00 20 00	Wait    8, Tc
0039df	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0039e0	43 00 00 00 20 00	Wait    4, Tc
0039e1	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039e2	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0039e3	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039e4	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0039e5	33 00 00 00 20 00	Wait    3, Tc
0039e6	01 71 98 de 11 00	Copy    [0:30e2] = [1:08ef]
0039e7	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0039e8	73 00 00 00 20 00	Wait    7, Tc
0039e9	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
0039ea	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
0039eb	33 00 00 00 20 00	Wait    3, Tc
0039ec	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
0039ed	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
0039ee	04 9e 03 00 20 00	Branch  0x39e0, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
0039ef	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
0039f0	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
0039f1	83 00 00 00 20 00	Wait    8, Tc
0039f2	01 2d 90 01 00 00	Copy    [0:205a] = [1:0000], SrcBase: A
0039f3	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
0039f4	83 00 00 00 20 00	Wait    8, Tc
0039f5	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
0039f6	43 00 00 00 20 00	Wait    4, Tc
0039f7	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039f8	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
0039f9	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
0039fa	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
0039fb	33 00 00 00 20 00	Wait    3, Tc
0039fc	01 71 98 e8 11 00	Copy    [0:30e2] = [1:08f4]
0039fd	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
0039fe	73 00 00 00 20 00	Wait    7, Tc
0039ff	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003a00	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003a01	33 00 00 00 20 00	Wait    3, Tc
003a02	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003a03	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003a04	64 9f 03 00 20 00	Branch  0x39f6, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003a05	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003a06	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003a07	83 00 00 00 20 00	Wait    8, Tc
003a08	81 2a 90 01 00 00	Copy    [0:2055] = [1:0000], SrcBase: A
003a09	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003a0a	83 00 00 00 20 00	Wait    8, Tc
003a0b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003a0c	43 00 00 00 20 00	Wait    4, Tc
003a0d	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003a0e	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003a0f	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003a10	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003a11	33 00 00 00 20 00	Wait    3, Tc
003a12	01 71 98 f2 11 00	Copy    [0:30e2] = [1:08f9]
003a13	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003a14	73 00 00 00 20 00	Wait    7, Tc
003a15	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003a16	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003a17	33 00 00 00 20 00	Wait    3, Tc
003a18	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003a19	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003a1a	c4 a0 03 00 20 00	Branch  0x3a0c, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003a1b	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003a1c	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003a1d	83 00 00 00 20 00	Wait    8, Tc
003a1e	81 2d 90 01 00 00	Copy    [0:205b] = [1:0000], SrcBase: A
003a1f	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003a20	83 00 00 00 20 00	Wait    8, Tc
003a21	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)
003a22	43 00 00 00 20 00	Wait    4, Tc
003a23	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003a24	a4 10 00 00 20 00	Branch  0x10a, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &)_sub_0 >
003a25	01 70 98 94 13 00	Copy    [0:30e0] = [1:09ca]
003a26	81 70 18 d0 61 00	Copy    [0:30e1] = [0:30e8]
003a27	33 00 00 00 20 00	Wait    3, Tc
003a28	01 71 98 fc 11 00	Copy    [0:30e2] = [1:08fe]
003a29	81 71 98 01 00 01	Copy    [0:30e3] = [SF+0], SrcBase: AI
003a2a	73 00 00 00 20 00	Wait    7, Tc
003a2b	91 1a 00 c8 61 00	Copy    [1:0035] = [0:30e4]
003a2c	81 70 98 01 00 01	Copy    [0:30e1] = [SF+1], SrcBase: AI
003a2d	33 00 00 00 20 00	Wait    3, Tc
003a2e	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &)
003a2f	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003a30	24 a2 03 00 20 00	Branch  0x3a22, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003a31	91 09 00 20 60 00	Copy    [1:0013] = [0:3010]
003a32	01 08 98 6a 00 00	Copy    [0:3010] = [1:0035]
003a33	83 00 00 00 20 00	Wait    8, Tc
003a34	01 2e 90 01 00 00	Copy    [0:205c] = [1:0000], SrcBase: A
003a35	01 08 98 26 00 00	Copy    [0:3010] = [1:0013]
003a36	83 00 00 00 20 00	Wait    8, Tc
003a37	04 00 00 00 40 00	Branch  0x0, [RET]


__Else_647_TX_LO
003a38	54 8e 03 00 20 00	Branch  0x38e5, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >		# Else_647_Func_Start
003a39	b4 8f 03 00 20 00	Branch  0x38fb, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a3a	14 91 03 00 20 00	Branch  0x3911, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a3b	74 92 03 00 20 00	Branch  0x3927, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a3c	d4 93 03 00 20 00	Branch  0x393d, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a3d	34 95 03 00 20 00	Branch  0x3953, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a3e	94 96 03 00 20 00	Branch  0x3969, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a3f	f4 97 03 00 20 00	Branch  0x397f, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a40	54 99 03 00 20 00	Branch  0x3995, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a41	b4 9a 03 00 20 00	Branch  0x39ab, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a42	14 9c 03 00 20 00	Branch  0x39c1, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a43	74 9d 03 00 20 00	Branch  0x39d7, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a44	d4 9e 03 00 20 00	Branch  0x39ed, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a45	34 a0 03 00 20 00	Branch  0x3a03, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a46	94 a1 03 00 20 00	Branch  0x3a19, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a47	f4 a2 03 00 20 00	Branch  0x3a2f, [CALL] < Vayyar::operator <<(const class RegisterBase &,const struct ILParamVector::ILParamVectorProxy_ParamIdx &) >
003a48	04 00 00 00 40 00	Branch  0x0, [RET]


SeqIqCoeffWithIdx
003a49	a3 00 00 00 20 00	Wait    10, Tc
003a4a	01 48 98 92 13 00	Copy    [0:3090] = [1:09c9]		# If_647
003a4b	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
003a4c	93 00 00 00 20 00	Wait    9, Tc
003a4d	02 00 00 01 00 00	Cond    0x00100000

003a4e	34 a5 03 00 90 00	Branch  0x3a53, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003a4f	74 8c 03 00 20 00	Branch  0x38c7, [CALL] < __If_647_TX_LO >
003a50	00 08 18 27 05 00	Write   [0:0x3010] = a4e
003a51	43 00 00 00 20 00	Wait    4, Tc
003a52	64 a5 03 00 00 00	Branch  0x3a56, [JMP]
003a53	84 a3 03 00 20 00	Branch  0x3a38, [CALL] < __Else_647_TX_LO >		# Else_647
003a54	00 08 18 27 05 00	Write   [0:0x3010] = a4e
003a55	43 00 00 00 20 00	Wait    4, Tc
003a56	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_647

SetIQCalCoeff_lo_0 freq = 17920.000000
003a57	43 00 00 00 20 00	Wait    4, Tc
003a58	91 e4 84 01 00 01	Copy    [1:09c9] = [SF+0], SrcBase: AI
003a59	11 e5 84 01 00 01	Copy    [1:09ca] = [SF+1], SrcBase: AI
003a5a	53 00 00 00 20 00	Wait    5, Tc
003a5b	91 e5 84 01 00 01	Copy    [1:09cb] = [SF+2], SrcBase: AI
003a5c	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003a5d	94 a4 03 00 20 00	Branch  0x3a49, [CALL] < SeqIqCoeffWithIdx >
003a5e	00 08 98 65 07 00	Write   [0:0x3010] = ecb
003a5f	43 00 00 00 20 00	Wait    4, Tc
003a60	04 00 00 00 40 00	Branch  0x0, [RET]


SetIQCalCoeff_lo_0 freq = 17920.000000
003a61	43 00 00 00 20 00	Wait    4, Tc
003a62	91 e4 84 01 00 01	Copy    [1:09c9] = [SF+0], SrcBase: AI
003a63	11 e5 84 01 00 01	Copy    [1:09ca] = [SF+1], SrcBase: AI
003a64	53 00 00 00 20 00	Wait    5, Tc
003a65	91 e5 84 01 00 01	Copy    [1:09cb] = [SF+2], SrcBase: AI
003a66	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003a67	94 a4 03 00 20 00	Branch  0x3a49, [CALL] < SeqIqCoeffWithIdx >
003a68	00 08 18 04 08 00	Write   [0:0x3010] = 1008
003a69	43 00 00 00 20 00	Wait    4, Tc
003a6a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams)
003a6b	10 17 00 00 00 00	Write   [1:0x002e] = 0
003a6c	90 17 00 00 00 00	Write   [1:0x002f] = 0
003a6d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003a6e	94 6f 03 00 20 00	Branch  0x36f9, [CALL] < ManualTuneWithIdx >
003a6f	06 00 00 00 00 00	Nop     		# waitNonBlocking_pllTuneStabilizationTime_2_start
003a70	00 8a 08 00 00 00	Write   [0:0x1114] = 0
003a71	80 8a 08 00 00 00	Write   [0:0x1115] = 0
003a72	00 89 08 59 66 00	Write   [0:0x1112] = ccb2
003a73	80 89 08 66 66 00	Write   [0:0x1113] = cccc
003a74	00 88 08 00 00 00	Write   [0:0x1110] = 0
003a75	80 88 08 00 00 00	Write   [0:0x1111] = 0
003a76	00 08 18 fb 07 00	Write   [0:0x3010] = ff6
003a77	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003a78	80 12 10 00 00 00	Write   [0:0x2025] = 0
003a79	00 12 10 00 00 00	Write   [0:0x2024] = 0
003a7a	00 10 10 00 00 00	Write   [0:0x2020] = 0
003a7b	80 10 10 00 00 00	Write   [0:0x2021] = 0
003a7c	00 08 18 64 07 00	Write   [0:0x3010] = ec8
003a7d	74 a5 03 00 20 00	Branch  0x3a57, [CALL] < SetIQCalCoeff_lo_0 freq = 17920.000000 >
003a7e	00 08 18 00 08 00	Write   [0:0x3010] = 1000
003a7f	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003a80	80 15 10 00 00 00	Write   [0:0x202b] = 0
003a81	00 15 10 00 00 00	Write   [0:0x202a] = 0
003a82	00 13 10 00 00 00	Write   [0:0x2026] = 0
003a83	80 13 10 00 00 00	Write   [0:0x2027] = 0
003a84	00 08 98 02 08 00	Write   [0:0x3010] = 1005
003a85	14 a6 03 00 20 00	Branch  0x3a61, [CALL] < SetIQCalCoeff_lo_0 freq = 17920.000000 >
003a86	06 00 00 00 00 00	Nop     
003a87	03 00 00 00 20 00	Wait    0, Tc		# waitNonBlocking_pllTuneStabilizationTime_2_end
003a88	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFirstFrequencyPatch(class ILFunction *,bool)
003a89	00 08 18 1c 05 00	Write   [0:0x3010] = a38
003a8a	a4 7a 00 00 20 00	Branch  0x7aa, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
003a8b	00 08 18 1c 05 00	Write   [0:0x3010] = a38
003a8c	74 7b 00 00 20 00	Branch  0x7b7, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
003a8d	b4 a6 03 00 20 00	Branch  0x3a6b, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams) >
003a8e	00 08 98 f6 05 00	Write   [0:0x3010] = bed
003a8f	74 0e 01 00 20 00	Branch  0x10e7, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
003a90	00 08 98 f6 05 00	Write   [0:0x3010] = bed
003a91	44 0f 01 00 20 00	Branch  0x10f4, [CALL] < Vayyar::ReadModifyWrite::RfWriteField(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned short,class RegisterBase,class RegisterField,unsigned int) >
003a92	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeDacAdcModule::TurnOnSequence(void)
003a93	00 01 08 04 00 00	Write   [0:0x1002] = 8
003a94	43 06 00 00 20 00	Wait    100, Tc
003a95	80 00 10 22 00 00	Write   [0:0x2001] = 44
003a96	03 20 4e 00 20 00	Wait    320000, Tc
003a97	00 01 88 07 00 00	Write   [0:0x1002] = f
003a98	43 06 00 00 20 00	Wait    100, Tc
003a99	80 00 90 7f 00 00	Write   [0:0x2001] = ff
003a9a	43 06 00 00 20 00	Wait    100, Tc
003a9b	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxLineupCommand::SetRecordingPorts(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,int)
003a9c	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003a9d	80 09 18 00 00 00	Write   [0:0x3013] = 0
003a9e	43 00 00 00 20 00	Wait    4, Tc
003a9f	40 18 80 07 7e 00	Write   [0:0x0030] = fc0f, DestBase: A
003aa0	b3 00 00 00 20 00	Wait    11, Tc
003aa1	00 09 18 00 00 00	Write   [0:0x3012] = 0
003aa2	80 09 18 00 00 00	Write   [0:0x3013] = 0
003aa3	43 00 00 00 20 00	Wait    4, Tc
003aa4	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003aa5	80 09 18 00 00 00	Write   [0:0x3013] = 0
003aa6	43 00 00 00 20 00	Wait    4, Tc
003aa7	c0 18 80 ff 7f 00	Write   [0:0x0031] = ffff, DestBase: A
003aa8	b3 00 00 00 20 00	Wait    11, Tc
003aa9	00 09 18 00 00 00	Write   [0:0x3012] = 0
003aaa	80 09 18 00 00 00	Write   [0:0x3013] = 0
003aab	43 00 00 00 20 00	Wait    4, Tc
003aac	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003aad	80 09 18 00 00 00	Write   [0:0x3013] = 0
003aae	43 00 00 00 20 00	Wait    4, Tc
003aaf	40 19 80 7f 60 00	Write   [0:0x0032] = c0ff, DestBase: A
003ab0	b3 00 00 00 20 00	Wait    11, Tc
003ab1	00 09 18 00 00 00	Write   [0:0x3012] = 0
003ab2	80 09 18 00 00 00	Write   [0:0x3013] = 0
003ab3	43 00 00 00 20 00	Wait    4, Tc
003ab4	80 00 88 17 00 00	Write   [0:0x1001] = 2f
003ab5	00 08 18 04 08 00	Write   [0:0x3010] = 1008
003ab6	34 3f 00 00 20 00	Branch  0x3f3, [CALL] < Vayyar::Centipede::CentipedeRxDecimatorModule::SetDecimation(unsigned int,bool) >
003ab7	00 08 98 09 08 00	Write   [0:0x3010] = 1013
003ab8	54 40 00 00 20 00	Branch  0x405, [CALL] < Vayyar::Centipede::CentipedeRxDecimatorModule::SetRxPorts(enum Vayyar::Centipede::CENTIPEDE_RECORDING_MODE,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >) >
003ab9	00 90 08 09 00 00	Write   [0:0x1120] = 12
003aba	80 90 08 03 00 00	Write   [0:0x1121] = 6
003abb	00 91 08 d6 00 00	Write   [0:0x1122] = 1ac
003abc	d4 40 00 00 20 00	Branch  0x40d, [CALL] < Vayyar::Centipede::CentipedeRxNcoModule::Enable(bool,class std::vector<bool,class std::allocator<bool> >,class std::vector<enum Vayyar::Centipede::NCO,class std::allocator<enum Vayyar::Centipede::NCO> >) >
003abd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeGainCommand::SetGainPerPort(enum Vayyar::Centipede::LINEUP,class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class Vayyar::Centipede::CentipedePortModule> > >,class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class Vayyar::Centipede::CentipedePortModule> > >)
003abe	00 59 38 2c 00 00	Write   [0:0x70b2] = 58
003abf	b3 00 00 00 20 00	Wait    11, Tc
003ac0	00 51 38 1c 00 00	Write   [0:0x70a2] = 38
003ac1	b3 00 00 00 20 00	Wait    11, Tc
003ac2	00 d9 38 2c 00 00	Write   [0:0x71b2] = 58
003ac3	b3 00 00 00 20 00	Wait    11, Tc
003ac4	00 d1 38 2c 00 00	Write   [0:0x71a2] = 58
003ac5	b3 00 00 00 20 00	Wait    11, Tc
003ac6	00 49 38 1c 00 00	Write   [0:0x7092] = 38
003ac7	b3 00 00 00 20 00	Wait    11, Tc
003ac8	00 41 38 1c 00 00	Write   [0:0x7082] = 38
003ac9	b3 00 00 00 20 00	Wait    11, Tc
003aca	00 c9 38 2c 00 00	Write   [0:0x7192] = 58
003acb	b3 00 00 00 20 00	Wait    11, Tc
003acc	00 c1 38 2c 00 00	Write   [0:0x7182] = 58
003acd	b3 00 00 00 20 00	Wait    11, Tc
003ace	00 39 38 1c 00 00	Write   [0:0x7072] = 38
003acf	b3 00 00 00 20 00	Wait    11, Tc
003ad0	00 31 38 1c 00 00	Write   [0:0x7062] = 38
003ad1	b3 00 00 00 20 00	Wait    11, Tc
003ad2	00 b9 38 2c 00 00	Write   [0:0x7172] = 58
003ad3	b3 00 00 00 20 00	Wait    11, Tc
003ad4	00 b1 38 2c 00 00	Write   [0:0x7162] = 58
003ad5	b3 00 00 00 20 00	Wait    11, Tc
003ad6	00 29 38 2c 00 00	Write   [0:0x7052] = 58
003ad7	b3 00 00 00 20 00	Wait    11, Tc
003ad8	00 21 38 2c 00 00	Write   [0:0x7042] = 58
003ad9	b3 00 00 00 20 00	Wait    11, Tc
003ada	00 a9 38 2c 00 00	Write   [0:0x7152] = 58
003adb	b3 00 00 00 20 00	Wait    11, Tc
003adc	00 01 38 2c 00 00	Write   [0:0x7002] = 58
003add	b3 00 00 00 20 00	Wait    11, Tc
003ade	00 89 38 2c 00 00	Write   [0:0x7112] = 58
003adf	b3 00 00 00 20 00	Wait    11, Tc
003ae0	00 81 38 2c 00 00	Write   [0:0x7102] = 58
003ae1	b3 00 00 00 20 00	Wait    11, Tc
003ae2	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeGainCommand::Set(int,enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::BAND,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >)
003ae3	80 f1 b8 e7 09 00	Write   [0:0x71e3] = 13cf
003ae4	b3 00 00 00 20 00	Wait    11, Tc
003ae5	80 f0 38 80 6e 00	Write   [0:0x71e1] = dd00
003ae6	b3 00 00 00 20 00	Wait    11, Tc
003ae7	80 f0 28 00 00 00	Write   [0:0x51e1] = 0
003ae8	b3 00 00 00 20 00	Wait    11, Tc
003ae9	e4 ab 03 00 20 00	Branch  0x3abe, [CALL] < Vayyar::Centipede::CentipedeGainCommand::SetGainPerPort(enum Vayyar::Centipede::LINEUP,class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class Vayyar::Centipede::CentipedePortModule> > >,class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class Vayyar::Centipede::CentipedePortModule> > >) >
003aea	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeGainCommand::SetGainPerPort(enum Vayyar::Centipede::LINEUP,class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class Vayyar::Centipede::CentipedePortModule> > >,class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class Vayyar::Centipede::CentipedePortModule> > >)
003aeb	00 01 28 00 08 00	Write   [0:0x5002] = 1000
003aec	b3 00 00 00 20 00	Wait    11, Tc
003aed	80 00 28 00 00 00	Write   [0:0x5001] = 0
003aee	b3 00 00 00 20 00	Wait    11, Tc
003aef	00 09 28 00 08 00	Write   [0:0x5012] = 1000
003af0	b3 00 00 00 20 00	Wait    11, Tc
003af1	80 08 28 00 00 00	Write   [0:0x5011] = 0
003af2	b3 00 00 00 20 00	Wait    11, Tc
003af3	00 19 28 00 08 00	Write   [0:0x5032] = 1000
003af4	b3 00 00 00 20 00	Wait    11, Tc
003af5	80 18 28 00 00 00	Write   [0:0x5031] = 0
003af6	b3 00 00 00 20 00	Wait    11, Tc
003af7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeGainCommand::Set(int,enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::BAND,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >)
003af8	80 f1 a8 e7 09 00	Write   [0:0x51e3] = 13cf
003af9	b3 00 00 00 20 00	Wait    11, Tc
003afa	80 f0 28 00 01 00	Write   [0:0x51e1] = 200
003afb	b3 00 00 00 20 00	Wait    11, Tc
003afc	80 f0 38 80 6e 00	Write   [0:0x71e1] = dd00
003afd	b3 00 00 00 20 00	Wait    11, Tc
003afe	b4 ae 03 00 20 00	Branch  0x3aeb, [CALL] < Vayyar::Centipede::CentipedeGainCommand::SetGainPerPort(enum Vayyar::Centipede::LINEUP,class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class Vayyar::Centipede::CentipedePortModule> > >,class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class Vayyar::Centipede::CentipedePortModule> > >) >
003aff	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedePortStateCommand::SetOutputEnable(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >)
003b00	80 01 a8 30 00 00	Write   [0:0x5003] = 61
003b01	b3 00 00 00 20 00	Wait    11, Tc
003b02	80 09 a8 30 00 00	Write   [0:0x5013] = 61
003b03	b3 00 00 00 20 00	Wait    11, Tc
003b04	80 19 a8 30 00 00	Write   [0:0x5033] = 61
003b05	b3 00 00 00 20 00	Wait    11, Tc
003b06	80 59 b8 11 00 00	Write   [0:0x70b3] = 23
003b07	b3 00 00 00 20 00	Wait    11, Tc
003b08	80 51 b8 11 00 00	Write   [0:0x70a3] = 23
003b09	b3 00 00 00 20 00	Wait    11, Tc
003b0a	80 d9 b8 11 00 00	Write   [0:0x71b3] = 23
003b0b	b3 00 00 00 20 00	Wait    11, Tc
003b0c	80 d1 b8 11 00 00	Write   [0:0x71a3] = 23
003b0d	b3 00 00 00 20 00	Wait    11, Tc
003b0e	80 49 b8 11 00 00	Write   [0:0x7093] = 23
003b0f	b3 00 00 00 20 00	Wait    11, Tc
003b10	80 41 b8 11 00 00	Write   [0:0x7083] = 23
003b11	b3 00 00 00 20 00	Wait    11, Tc
003b12	80 c9 b8 11 00 00	Write   [0:0x7193] = 23
003b13	b3 00 00 00 20 00	Wait    11, Tc
003b14	80 c1 b8 11 00 00	Write   [0:0x7183] = 23
003b15	b3 00 00 00 20 00	Wait    11, Tc
003b16	80 39 b8 11 00 00	Write   [0:0x7073] = 23
003b17	b3 00 00 00 20 00	Wait    11, Tc
003b18	80 31 b8 11 00 00	Write   [0:0x7063] = 23
003b19	b3 00 00 00 20 00	Wait    11, Tc
003b1a	80 b9 b8 11 00 00	Write   [0:0x7173] = 23
003b1b	b3 00 00 00 20 00	Wait    11, Tc
003b1c	80 b1 b8 11 00 00	Write   [0:0x7163] = 23
003b1d	b3 00 00 00 20 00	Wait    11, Tc
003b1e	80 29 b8 11 00 00	Write   [0:0x7053] = 23
003b1f	b3 00 00 00 20 00	Wait    11, Tc
003b20	80 21 b8 11 00 00	Write   [0:0x7043] = 23
003b21	b3 00 00 00 20 00	Wait    11, Tc
003b22	80 a9 b8 11 00 00	Write   [0:0x7153] = 23
003b23	b3 00 00 00 20 00	Wait    11, Tc
003b24	80 01 b8 11 00 00	Write   [0:0x7003] = 23
003b25	b3 00 00 00 20 00	Wait    11, Tc
003b26	80 89 b8 11 00 00	Write   [0:0x7113] = 23
003b27	b3 00 00 00 20 00	Wait    11, Tc
003b28	80 81 b8 11 00 00	Write   [0:0x7103] = 23
003b29	b3 00 00 00 20 00	Wait    11, Tc
003b2a	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void)
003b2b	80 e9 38 00 00 00	Write   [0:0x71d3] = 0
003b2c	b3 00 00 00 20 00	Wait    11, Tc
003b2d	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
003b2e	b3 00 00 00 20 00	Wait    11, Tc
003b2f	80 e1 b8 06 00 00	Write   [0:0x71c3] = d
003b30	b3 00 00 00 20 00	Wait    11, Tc
003b31	80 e1 b8 06 00 00	Write   [0:0x71c3] = d
003b32	b3 00 00 00 20 00	Wait    11, Tc
003b33	80 e1 b8 06 04 00	Write   [0:0x71c3] = 80d
003b34	b3 00 00 00 20 00	Wait    11, Tc
003b35	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
003b36	b3 00 00 00 20 00	Wait    11, Tc
003b37	80 e9 38 01 02 00	Write   [0:0x71d3] = 402
003b38	b3 00 00 00 20 00	Wait    11, Tc
003b39	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
003b3a	c3 3c 00 00 20 00	Wait    972, Tc
003b3b	00 e8 38 00 00 00	Write   [0:0x71d0] = 0
003b3c	b3 00 00 00 20 00	Wait    11, Tc
003b3d	00 e9 38 80 07 00	Write   [0:0x71d2] = f00
003b3e	b3 00 00 00 20 00	Wait    11, Tc
003b3f	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
003b40	b3 00 00 00 20 00	Wait    11, Tc
003b41	80 e1 b8 26 05 00	Write   [0:0x71c3] = a4d
003b42	c3 2c 01 00 20 00	Wait    4812, Tc
003b43	80 e1 b8 36 05 00	Write   [0:0x71c3] = a6d
003b44	b3 00 00 00 20 00	Wait    11, Tc
003b45	00 f0 b8 00 00 00	Write   [0:0x71e0] = 1
003b46	b3 00 00 00 20 00	Wait    11, Tc
003b47	00 f0 b8 01 00 00	Write   [0:0x71e0] = 3
003b48	b3 00 00 00 20 00	Wait    11, Tc
003b49	00 f0 b8 03 00 00	Write   [0:0x71e0] = 7
003b4a	b3 00 00 00 20 00	Wait    11, Tc
003b4b	00 f0 b8 07 00 00	Write   [0:0x71e0] = f
003b4c	b3 00 00 00 20 00	Wait    11, Tc
003b4d	00 f1 38 e0 00 00	Write   [0:0x71e2] = 1c0
003b4e	c3 1c 02 00 20 00	Wait    8652, Tc
003b4f	00 f0 b8 17 00 00	Write   [0:0x71e0] = 2f
003b50	c3 1c 02 00 20 00	Wait    8652, Tc
003b51	00 f1 38 e0 10 00	Write   [0:0x71e2] = 21c0
003b52	b3 00 00 00 20 00	Wait    11, Tc
003b53	00 f1 38 e0 18 00	Write   [0:0x71e2] = 31c0
003b54	b3 00 00 00 20 00	Wait    11, Tc
003b55	00 f0 b8 17 02 00	Write   [0:0x71e0] = 42f
003b56	c3 1c 02 00 20 00	Wait    8652, Tc
003b57	00 f0 b8 17 03 00	Write   [0:0x71e0] = 62f
003b58	c3 1c 02 00 20 00	Wait    8652, Tc
003b59	80 e0 28 00 00 00	Write   [0:0x51c1] = 0
003b5a	b3 00 00 00 20 00	Wait    11, Tc
003b5b	00 e1 28 00 00 00	Write   [0:0x51c2] = 0
003b5c	b3 00 00 00 20 00	Wait    11, Tc
003b5d	00 e1 b8 ff 47 00	Write   [0:0x71c2] = 8fff
003b5e	b3 00 00 00 20 00	Wait    11, Tc
003b5f	80 e0 38 80 71 00	Write   [0:0x71c1] = e300
003b60	b3 00 00 00 20 00	Wait    11, Tc
003b61	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplTrModule::SetPortState(const class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,enum Vayyar::Centipede::PORT_MODE)
003b62	43 00 00 00 20 00	Wait    4, Tc
003b63	81 00 a8 01 00 01	Copy    [0:5001] = [SF+0], SrcBase: AI
003b64	b3 00 00 00 20 00	Wait    11, Tc
003b65	01 00 a8 01 00 01	Copy    [0:5000] = [SF+1], SrcBase: AI
003b66	c3 58 02 00 20 00	Wait    9612, Tc
003b67	81 08 a8 01 00 01	Copy    [0:5011] = [SF+2], SrcBase: AI
003b68	b3 00 00 00 20 00	Wait    11, Tc
003b69	01 08 a8 01 00 01	Copy    [0:5010] = [SF+3], SrcBase: AI
003b6a	c3 58 02 00 20 00	Wait    9612, Tc
003b6b	81 18 a8 01 00 01	Copy    [0:5031] = [SF+4], SrcBase: AI
003b6c	b3 00 00 00 20 00	Wait    11, Tc
003b6d	01 18 a8 01 00 01	Copy    [0:5030] = [SF+5], SrcBase: AI
003b6e	c3 58 02 00 20 00	Wait    9612, Tc
003b6f	81 58 b8 01 00 01	Copy    [0:70b1] = [SF+6], SrcBase: AI
003b70	b3 00 00 00 20 00	Wait    11, Tc
003b71	01 58 b8 01 00 01	Copy    [0:70b0] = [SF+7], SrcBase: AI
003b72	c3 3c 00 00 20 00	Wait    972, Tc
003b73	81 50 b8 01 00 01	Copy    [0:70a1] = [SF+8], SrcBase: AI
003b74	b3 00 00 00 20 00	Wait    11, Tc
003b75	01 50 b8 01 00 01	Copy    [0:70a0] = [SF+9], SrcBase: AI
003b76	c3 3c 00 00 20 00	Wait    972, Tc
003b77	81 d8 b8 01 00 01	Copy    [0:71b1] = [SF+10], SrcBase: AI
003b78	b3 00 00 00 20 00	Wait    11, Tc
003b79	01 d8 b8 01 00 01	Copy    [0:71b0] = [SF+11], SrcBase: AI
003b7a	c3 3c 00 00 20 00	Wait    972, Tc
003b7b	81 d0 b8 01 00 01	Copy    [0:71a1] = [SF+12], SrcBase: AI
003b7c	b3 00 00 00 20 00	Wait    11, Tc
003b7d	01 d0 b8 01 00 01	Copy    [0:71a0] = [SF+13], SrcBase: AI
003b7e	c3 3c 00 00 20 00	Wait    972, Tc
003b7f	81 48 b8 01 00 01	Copy    [0:7091] = [SF+14], SrcBase: AI
003b80	b3 00 00 00 20 00	Wait    11, Tc
003b81	01 48 b8 01 00 01	Copy    [0:7090] = [SF+15], SrcBase: AI
003b82	c3 3c 00 00 20 00	Wait    972, Tc
003b83	81 40 b8 01 00 01	Copy    [0:7081] = [SF+16], SrcBase: AI
003b84	b3 00 00 00 20 00	Wait    11, Tc
003b85	01 40 b8 01 00 01	Copy    [0:7080] = [SF+17], SrcBase: AI
003b86	c3 3c 00 00 20 00	Wait    972, Tc
003b87	81 c8 b8 01 00 01	Copy    [0:7191] = [SF+18], SrcBase: AI
003b88	b3 00 00 00 20 00	Wait    11, Tc
003b89	01 c8 b8 01 00 01	Copy    [0:7190] = [SF+19], SrcBase: AI
003b8a	c3 3c 00 00 20 00	Wait    972, Tc
003b8b	81 c0 b8 01 00 01	Copy    [0:7181] = [SF+20], SrcBase: AI
003b8c	b3 00 00 00 20 00	Wait    11, Tc
003b8d	01 c0 b8 01 00 01	Copy    [0:7180] = [SF+21], SrcBase: AI
003b8e	c3 3c 00 00 20 00	Wait    972, Tc
003b8f	81 38 b8 01 00 01	Copy    [0:7071] = [SF+22], SrcBase: AI
003b90	b3 00 00 00 20 00	Wait    11, Tc
003b91	01 38 b8 01 00 01	Copy    [0:7070] = [SF+23], SrcBase: AI
003b92	c3 3c 00 00 20 00	Wait    972, Tc
003b93	81 30 b8 01 00 01	Copy    [0:7061] = [SF+24], SrcBase: AI
003b94	b3 00 00 00 20 00	Wait    11, Tc
003b95	01 30 b8 01 00 01	Copy    [0:7060] = [SF+25], SrcBase: AI
003b96	c3 3c 00 00 20 00	Wait    972, Tc
003b97	81 b8 b8 01 00 01	Copy    [0:7171] = [SF+26], SrcBase: AI
003b98	b3 00 00 00 20 00	Wait    11, Tc
003b99	01 b8 b8 01 00 01	Copy    [0:7170] = [SF+27], SrcBase: AI
003b9a	c3 3c 00 00 20 00	Wait    972, Tc
003b9b	81 b0 b8 01 00 01	Copy    [0:7161] = [SF+28], SrcBase: AI
003b9c	b3 00 00 00 20 00	Wait    11, Tc
003b9d	01 b0 b8 01 00 01	Copy    [0:7160] = [SF+29], SrcBase: AI
003b9e	c3 3c 00 00 20 00	Wait    972, Tc
003b9f	81 28 b8 01 00 01	Copy    [0:7051] = [SF+30], SrcBase: AI
003ba0	b3 00 00 00 20 00	Wait    11, Tc
003ba1	01 28 b8 01 00 01	Copy    [0:7050] = [SF+31], SrcBase: AI
003ba2	c3 3c 00 00 20 00	Wait    972, Tc
003ba3	81 20 b8 01 00 01	Copy    [0:7041] = [SF+32], SrcBase: AI
003ba4	b3 00 00 00 20 00	Wait    11, Tc
003ba5	01 20 b8 01 00 01	Copy    [0:7040] = [SF+33], SrcBase: AI
003ba6	c3 3c 00 00 20 00	Wait    972, Tc
003ba7	81 a8 b8 01 00 01	Copy    [0:7151] = [SF+34], SrcBase: AI
003ba8	b3 00 00 00 20 00	Wait    11, Tc
003ba9	01 a8 b8 01 00 01	Copy    [0:7150] = [SF+35], SrcBase: AI
003baa	c3 3c 00 00 20 00	Wait    972, Tc
003bab	81 00 b8 01 00 01	Copy    [0:7001] = [SF+36], SrcBase: AI
003bac	b3 00 00 00 20 00	Wait    11, Tc
003bad	01 00 b8 01 00 01	Copy    [0:7000] = [SF+37], SrcBase: AI
003bae	c3 3c 00 00 20 00	Wait    972, Tc
003baf	81 88 b8 01 00 01	Copy    [0:7111] = [SF+38], SrcBase: AI
003bb0	b3 00 00 00 20 00	Wait    11, Tc
003bb1	01 88 b8 01 00 01	Copy    [0:7110] = [SF+39], SrcBase: AI
003bb2	c3 3c 00 00 20 00	Wait    972, Tc
003bb3	81 80 b8 01 00 01	Copy    [0:7101] = [SF+40], SrcBase: AI
003bb4	b3 00 00 00 20 00	Wait    11, Tc
003bb5	01 80 b8 01 00 01	Copy    [0:7100] = [SF+41], SrcBase: AI
003bb6	c3 3c 00 00 20 00	Wait    972, Tc
003bb7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeDmaModule::StartDma(class ILVariable &,unsigned int,unsigned int,unsigned int,unsigned int,enum Vayyar::Centipede::DMA_MODE,bool)
003bb8	43 00 00 00 20 00	Wait    4, Tc
003bb9	94 d6 01 00 20 00	Branch  0x1d69, [CALL] < Vayyar::Centipede::CentipedeDmaModule::StartDma(class ILVariable &,unsigned int,unsigned int,unsigned int,unsigned int,enum Vayyar::Centipede::DMA_MODE,bool)_sub_1 >
003bba	53 00 00 00 20 00	Wait    5, Tc		# If_648
003bbb	01 48 98 a6 12 00	Copy    [0:3090] = [1:0953]
003bbc	01 49 98 01 00 01	Copy    [0:3092] = [SF+0], SrcBase: AI
003bbd	93 00 00 00 20 00	Wait    9, Tc
003bbe	02 00 00 01 00 00	Cond    0x00100000

003bbf	54 bc 03 00 90 00	Branch  0x3bc5, [JMP], !Cond  ******** Conditional Branch. Assuming jump is taken. Check if using MC.
003bc0	00 08 98 3b 05 00	Write   [0:0x3010] = a77
003bc1	a4 d7 01 00 20 00	Branch  0x1d7a, [CALL] < __If_50_WritingToRxMemFlag >
003bc2	00 08 18 5a 07 00	Write   [0:0x3010] = eb4
003bc3	43 00 00 00 20 00	Wait    4, Tc
003bc4	94 bc 03 00 00 00	Branch  0x3bc9, [JMP]
003bc5	00 08 98 26 05 00	Write   [0:0x3010] = a4d		# Else_648
003bc6	d4 d7 01 00 20 00	Branch  0x1d7d, [CALL] < __Else_50_WritingToRxMemFlag >
003bc7	00 08 18 5a 07 00	Write   [0:0x3010] = eb4
003bc8	43 00 00 00 20 00	Wait    4, Tc
003bc9	04 00 00 00 40 00	Branch  0x0, [RET]
		# EndIf_648

class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeDmaModule::WaitForDmaCompletion(void)
003bca	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bcb	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bcc	13 01 00 00 20 00	Wait    17, Tc
003bcd	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bce	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bcf	13 01 00 00 20 00	Wait    17, Tc
003bd0	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bd1	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bd2	13 01 00 00 20 00	Wait    17, Tc
003bd3	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bd4	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bd5	13 01 00 00 20 00	Wait    17, Tc
003bd6	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bd7	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bd8	13 01 00 00 20 00	Wait    17, Tc
003bd9	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bda	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bdb	13 01 00 00 20 00	Wait    17, Tc
003bdc	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bdd	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bde	13 01 00 00 20 00	Wait    17, Tc
003bdf	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003be0	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003be1	13 01 00 00 20 00	Wait    17, Tc
003be2	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003be3	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003be4	13 01 00 00 20 00	Wait    17, Tc
003be5	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003be6	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003be7	13 01 00 00 20 00	Wait    17, Tc
003be8	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003be9	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bea	13 01 00 00 20 00	Wait    17, Tc
003beb	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bec	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bed	13 01 00 00 20 00	Wait    17, Tc
003bee	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bef	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bf0	13 01 00 00 20 00	Wait    17, Tc
003bf1	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bf2	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bf3	13 01 00 00 20 00	Wait    17, Tc
003bf4	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bf5	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bf6	13 01 00 00 20 00	Wait    17, Tc
003bf7	80 c8 00 08 00 00	Write   [0:0x0191] = 10
003bf8	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bf9	13 01 00 00 20 00	Wait    17, Tc
003bfa	80 c8 00 07 00 00	Write   [0:0x0191] = e
003bfb	00 c8 80 00 00 00	Write   [0:0x0190] = 1
003bfc	33 01 00 00 20 00	Wait    19, Tc
003bfd	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >)
003bfe	00 08 18 55 07 00	Write   [0:0x3010] = eaa
003bff	84 bb 03 00 20 00	Branch  0x3bb8, [CALL] < Vayyar::Centipede::CentipedeDmaModule::StartDma(class ILVariable &,unsigned int,unsigned int,unsigned int,unsigned int,enum Vayyar::Centipede::DMA_MODE,bool) >
003c00	00 08 98 2d 08 00	Write   [0:0x3010] = 105b
003c01	24 d9 01 00 20 00	Branch  0x1d92, [CALL] < Rec_0_21744_12_0_1_0 >
003c02	13 00 00 00 20 00	Wait    1, Tc
003c03	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003c04	00 00 10 00 00 00	Write   [0:0x2000] = 0
003c05	00 8a 08 00 00 00	Write   [0:0x1114] = 0
003c06	80 8a 08 00 00 00	Write   [0:0x1115] = 0
003c07	00 95 08 00 00 00	Write   [0:0x112a] = 0
003c08	80 95 08 00 00 00	Write   [0:0x112b] = 0
003c09	80 12 10 00 00 00	Write   [0:0x2025] = 0
003c0a	00 12 10 00 00 00	Write   [0:0x2024] = 0
003c0b	80 15 10 00 00 00	Write   [0:0x202b] = 0
003c0c	00 15 10 00 00 00	Write   [0:0x202a] = 0
003c0d	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003c0e	00 00 90 0f 00 00	Write   [0:0x2000] = 1f
003c0f	00 09 88 00 00 00	Write   [0:0x1012] = 1
003c10	b3 31 03 00 20 00	Wait    13083, Tc
003c11	00 09 08 00 00 00	Write   [0:0x1012] = 0
003c12	00 00 10 00 00 00	Write   [0:0x2000] = 0
003c13	00 01 90 ff 7f 00	Write   [0:0x2002] = ffff
003c14	00 01 10 00 00 00	Write   [0:0x2002] = 0
003c15	a4 bc 03 00 20 00	Branch  0x3bca, [CALL] < Vayyar::Centipede::CentipedeDmaModule::WaitForDmaCompletion(void) >
003c16	91 a8 04 d4 02 00	Copy    [1:0951] = [0:016a]
003c17	11 a9 04 d6 02 00	Copy    [1:0952] = [0:016b]
003c18	33 00 00 00 20 00	Wait    3, Tc
003c19	04 00 00 00 40 00	Branch  0x0, [RET]


SetIQCalCoeff_lo_0 freq = 17920.000000
003c1a	43 00 00 00 20 00	Wait    4, Tc
003c1b	91 e4 84 01 00 01	Copy    [1:09c9] = [SF+0], SrcBase: AI
003c1c	11 e5 84 01 00 01	Copy    [1:09ca] = [SF+1], SrcBase: AI
003c1d	53 00 00 00 20 00	Wait    5, Tc
003c1e	91 e5 84 01 00 01	Copy    [1:09cb] = [SF+2], SrcBase: AI
003c1f	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c20	94 a4 03 00 20 00	Branch  0x3a49, [CALL] < SeqIqCoeffWithIdx >
003c21	00 08 98 35 08 00	Write   [0:0x3010] = 106b
003c22	43 00 00 00 20 00	Wait    4, Tc
003c23	04 00 00 00 40 00	Branch  0x0, [RET]


SetIQCalCoeff_lo_0 freq = 17920.000000
003c24	43 00 00 00 20 00	Wait    4, Tc
003c25	91 e4 84 01 00 01	Copy    [1:09c9] = [SF+0], SrcBase: AI
003c26	11 e5 84 01 00 01	Copy    [1:09ca] = [SF+1], SrcBase: AI
003c27	53 00 00 00 20 00	Wait    5, Tc
003c28	91 e5 84 01 00 01	Copy    [1:09cb] = [SF+2], SrcBase: AI
003c29	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c2a	94 a4 03 00 20 00	Branch  0x3a49, [CALL] < SeqIqCoeffWithIdx >
003c2b	00 08 98 39 08 00	Write   [0:0x3010] = 1073
003c2c	43 00 00 00 20 00	Wait    4, Tc
003c2d	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams)
003c2e	10 17 00 00 00 00	Write   [1:0x002e] = 0
003c2f	90 17 80 00 00 00	Write   [1:0x002f] = 1
003c30	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c31	94 6f 03 00 20 00	Branch  0x36f9, [CALL] < ManualTuneWithIdx >
003c32	06 00 00 00 00 00	Nop     		# waitNonBlocking_pllTuneStabilizationTime_3_start
003c33	00 8a 08 00 00 00	Write   [0:0x1114] = 0
003c34	80 8a 08 00 00 00	Write   [0:0x1115] = 0
003c35	00 89 08 59 66 00	Write   [0:0x1112] = ccb2
003c36	80 89 08 66 66 00	Write   [0:0x1113] = cccc
003c37	00 88 08 00 00 00	Write   [0:0x1110] = 0
003c38	80 88 08 00 00 00	Write   [0:0x1111] = 0
003c39	00 08 98 31 08 00	Write   [0:0x3010] = 1063
003c3a	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003c3b	80 12 10 00 00 00	Write   [0:0x2025] = 0
003c3c	00 12 10 00 00 00	Write   [0:0x2024] = 0
003c3d	00 10 10 00 00 00	Write   [0:0x2020] = 0
003c3e	80 10 10 00 00 00	Write   [0:0x2021] = 0
003c3f	00 08 18 34 08 00	Write   [0:0x3010] = 1068
003c40	a4 c1 03 00 20 00	Branch  0x3c1a, [CALL] < SetIQCalCoeff_lo_0 freq = 17920.000000 >
003c41	00 08 98 35 08 00	Write   [0:0x3010] = 106b
003c42	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003c43	80 15 10 00 00 00	Write   [0:0x202b] = 0
003c44	00 15 10 00 00 00	Write   [0:0x202a] = 0
003c45	00 13 10 00 00 00	Write   [0:0x2026] = 0
003c46	80 13 10 00 00 00	Write   [0:0x2027] = 0
003c47	00 08 18 38 08 00	Write   [0:0x3010] = 1070
003c48	44 c2 03 00 20 00	Branch  0x3c24, [CALL] < SetIQCalCoeff_lo_0 freq = 17920.000000 >
003c49	06 00 00 00 00 00	Nop     
003c4a	03 00 00 00 20 00	Wait    0, Tc		# waitNonBlocking_pllTuneStabilizationTime_3_end
003c4b	04 00 00 00 40 00	Branch  0x0, [RET]


SetIQCalCoeff_lo_0 freq = 17920.000000
003c4c	43 00 00 00 20 00	Wait    4, Tc
003c4d	91 e4 84 01 00 01	Copy    [1:09c9] = [SF+0], SrcBase: AI
003c4e	11 e5 84 01 00 01	Copy    [1:09ca] = [SF+1], SrcBase: AI
003c4f	53 00 00 00 20 00	Wait    5, Tc
003c50	91 e5 84 01 00 01	Copy    [1:09cb] = [SF+2], SrcBase: AI
003c51	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c52	94 a4 03 00 20 00	Branch  0x3a49, [CALL] < SeqIqCoeffWithIdx >
003c53	00 08 98 3d 08 00	Write   [0:0x3010] = 107b
003c54	43 00 00 00 20 00	Wait    4, Tc
003c55	04 00 00 00 40 00	Branch  0x0, [RET]


SetIQCalCoeff_lo_0 freq = 17920.000000
003c56	43 00 00 00 20 00	Wait    4, Tc
003c57	91 e4 84 01 00 01	Copy    [1:09c9] = [SF+0], SrcBase: AI
003c58	11 e5 84 01 00 01	Copy    [1:09ca] = [SF+1], SrcBase: AI
003c59	53 00 00 00 20 00	Wait    5, Tc
003c5a	91 e5 84 01 00 01	Copy    [1:09cb] = [SF+2], SrcBase: AI
003c5b	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c5c	94 a4 03 00 20 00	Branch  0x3a49, [CALL] < SeqIqCoeffWithIdx >
003c5d	00 08 98 41 08 00	Write   [0:0x3010] = 1083
003c5e	43 00 00 00 20 00	Wait    4, Tc
003c5f	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams)
003c60	10 17 00 00 00 00	Write   [1:0x002e] = 0
003c61	90 17 00 01 00 00	Write   [1:0x002f] = 2
003c62	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c63	94 6f 03 00 20 00	Branch  0x36f9, [CALL] < ManualTuneWithIdx >
003c64	06 00 00 00 00 00	Nop     		# waitNonBlocking_pllTuneStabilizationTime_4_start
003c65	00 8a 08 00 00 00	Write   [0:0x1114] = 0
003c66	80 8a 08 00 00 00	Write   [0:0x1115] = 0
003c67	00 89 08 59 66 00	Write   [0:0x1112] = ccb2
003c68	80 89 08 66 66 00	Write   [0:0x1113] = cccc
003c69	00 88 08 00 00 00	Write   [0:0x1110] = 0
003c6a	80 88 08 00 00 00	Write   [0:0x1111] = 0
003c6b	00 08 98 39 08 00	Write   [0:0x3010] = 1073
003c6c	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003c6d	80 12 10 00 00 00	Write   [0:0x2025] = 0
003c6e	00 12 10 00 00 00	Write   [0:0x2024] = 0
003c6f	00 10 10 00 00 00	Write   [0:0x2020] = 0
003c70	80 10 10 00 00 00	Write   [0:0x2021] = 0
003c71	00 08 18 3c 08 00	Write   [0:0x3010] = 1078
003c72	c4 c4 03 00 20 00	Branch  0x3c4c, [CALL] < SetIQCalCoeff_lo_0 freq = 17920.000000 >
003c73	00 08 98 3d 08 00	Write   [0:0x3010] = 107b
003c74	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003c75	80 15 10 00 00 00	Write   [0:0x202b] = 0
003c76	00 15 10 00 00 00	Write   [0:0x202a] = 0
003c77	00 13 10 00 00 00	Write   [0:0x2026] = 0
003c78	80 13 10 00 00 00	Write   [0:0x2027] = 0
003c79	00 08 18 40 08 00	Write   [0:0x3010] = 1080
003c7a	64 c5 03 00 20 00	Branch  0x3c56, [CALL] < SetIQCalCoeff_lo_0 freq = 17920.000000 >
003c7b	06 00 00 00 00 00	Nop     
003c7c	03 00 00 00 20 00	Wait    0, Tc		# waitNonBlocking_pllTuneStabilizationTime_4_end
003c7d	04 00 00 00 40 00	Branch  0x0, [RET]


SetIQCalCoeff_lo_0 freq = 17920.000000
003c7e	43 00 00 00 20 00	Wait    4, Tc
003c7f	91 e4 84 01 00 01	Copy    [1:09c9] = [SF+0], SrcBase: AI
003c80	11 e5 84 01 00 01	Copy    [1:09ca] = [SF+1], SrcBase: AI
003c81	53 00 00 00 20 00	Wait    5, Tc
003c82	91 e5 84 01 00 01	Copy    [1:09cb] = [SF+2], SrcBase: AI
003c83	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c84	94 a4 03 00 20 00	Branch  0x3a49, [CALL] < SeqIqCoeffWithIdx >
003c85	00 08 98 45 08 00	Write   [0:0x3010] = 108b
003c86	43 00 00 00 20 00	Wait    4, Tc
003c87	04 00 00 00 40 00	Branch  0x0, [RET]


SetIQCalCoeff_lo_0 freq = 17920.000000
003c88	43 00 00 00 20 00	Wait    4, Tc
003c89	91 e4 84 01 00 01	Copy    [1:09c9] = [SF+0], SrcBase: AI
003c8a	11 e5 84 01 00 01	Copy    [1:09ca] = [SF+1], SrcBase: AI
003c8b	53 00 00 00 20 00	Wait    5, Tc
003c8c	91 e5 84 01 00 01	Copy    [1:09cb] = [SF+2], SrcBase: AI
003c8d	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c8e	94 a4 03 00 20 00	Branch  0x3a49, [CALL] < SeqIqCoeffWithIdx >
003c8f	00 08 98 49 08 00	Write   [0:0x3010] = 1093
003c90	43 00 00 00 20 00	Wait    4, Tc
003c91	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams)
003c92	10 17 00 00 00 00	Write   [1:0x002e] = 0
003c93	90 17 80 01 00 00	Write   [1:0x002f] = 3
003c94	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003c95	94 6f 03 00 20 00	Branch  0x36f9, [CALL] < ManualTuneWithIdx >
003c96	06 00 00 00 00 00	Nop     		# waitNonBlocking_pllTuneStabilizationTime_5_start
003c97	00 8a 08 00 00 00	Write   [0:0x1114] = 0
003c98	80 8a 08 00 00 00	Write   [0:0x1115] = 0
003c99	00 89 08 59 66 00	Write   [0:0x1112] = ccb2
003c9a	80 89 08 66 66 00	Write   [0:0x1113] = cccc
003c9b	00 88 08 00 00 00	Write   [0:0x1110] = 0
003c9c	80 88 08 00 00 00	Write   [0:0x1111] = 0
003c9d	00 08 98 41 08 00	Write   [0:0x3010] = 1083
003c9e	84 5e 00 00 20 00	Branch  0x5e8, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003c9f	80 12 10 00 00 00	Write   [0:0x2025] = 0
003ca0	00 12 10 00 00 00	Write   [0:0x2024] = 0
003ca1	00 10 10 00 00 00	Write   [0:0x2020] = 0
003ca2	80 10 10 00 00 00	Write   [0:0x2021] = 0
003ca3	00 08 18 44 08 00	Write   [0:0x3010] = 1088
003ca4	e4 c7 03 00 20 00	Branch  0x3c7e, [CALL] < SetIQCalCoeff_lo_0 freq = 17920.000000 >
003ca5	00 08 98 45 08 00	Write   [0:0x3010] = 108b
003ca6	54 60 00 00 20 00	Branch  0x605, [CALL] < Vayyar::Centipede::CentipedeTxLineupModule::SetNcoFreq(enum Vayyar::Centipede::LINEUP,double,bool) >
003ca7	80 15 10 00 00 00	Write   [0:0x202b] = 0
003ca8	00 15 10 00 00 00	Write   [0:0x202a] = 0
003ca9	00 13 10 00 00 00	Write   [0:0x2026] = 0
003caa	80 13 10 00 00 00	Write   [0:0x2027] = 0
003cab	00 08 18 48 08 00	Write   [0:0x3010] = 1090
003cac	84 c8 03 00 20 00	Branch  0x3c88, [CALL] < SetIQCalCoeff_lo_0 freq = 17920.000000 >
003cad	06 00 00 00 00 00	Nop     
003cae	03 00 00 00 20 00	Wait    0, Tc		# waitNonBlocking_pllTuneStabilizationTime_5_end
003caf	04 00 00 00 40 00	Branch  0x0, [RET]


_FreqsLoop_
003cb0	b4 a6 03 00 20 00	Branch  0x3a6b, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams) >
003cb1	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003cb2	e4 bf 03 00 20 00	Branch  0x3bfe, [CALL] < Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >) >
003cb3	e4 c2 03 00 20 00	Branch  0x3c2e, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams) >
003cb4	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003cb5	e4 bf 03 00 20 00	Branch  0x3bfe, [CALL] < Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >) >
003cb6	04 c6 03 00 20 00	Branch  0x3c60, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams) >
003cb7	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003cb8	e4 bf 03 00 20 00	Branch  0x3bfe, [CALL] < Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >) >
003cb9	24 c9 03 00 20 00	Branch  0x3c92, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFrequency(const struct Vayyar::FreqInfoPreM &,double,double,double,double,struct Vayyar::Centipede::ParametricImplParams) >
003cba	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003cbb	e4 bf 03 00 20 00	Branch  0x3bfe, [CALL] < Vayyar::Centipede::CentipedeRxLineupCommand::DoRecordRaw(class std::shared_ptr<class RecordObject>,int,int,int,int,bool,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,struct Vayyar::Recording::CentipedeSamplingParams &,int,bool,bool,int,class boost::optional<class std::vector<double,class std::allocator<double> > >,class boost::optional<class std::vector<double,class std::allocator<double> > >) >
003cbc	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOffSequence(void)
003cbd	00 f0 b8 17 02 00	Write   [0:0x71e0] = 42f
003cbe	c3 1c 02 00 20 00	Wait    8652, Tc
003cbf	00 f0 b8 17 00 00	Write   [0:0x71e0] = 2f
003cc0	c3 1c 02 00 20 00	Wait    8652, Tc
003cc1	00 f1 38 e0 10 00	Write   [0:0x71e2] = 21c0
003cc2	b3 00 00 00 20 00	Wait    11, Tc
003cc3	00 f1 38 e0 00 00	Write   [0:0x71e2] = 1c0
003cc4	b3 00 00 00 20 00	Wait    11, Tc
003cc5	00 f0 b8 07 00 00	Write   [0:0x71e0] = f
003cc6	c3 1c 02 00 20 00	Wait    8652, Tc
003cc7	00 f1 38 60 00 00	Write   [0:0x71e2] = c0
003cc8	c3 1c 02 00 20 00	Wait    8652, Tc
003cc9	00 f0 b8 03 00 00	Write   [0:0x71e0] = 7
003cca	b3 00 00 00 20 00	Wait    11, Tc
003ccb	00 f0 b8 01 00 00	Write   [0:0x71e0] = 3
003ccc	b3 00 00 00 20 00	Wait    11, Tc
003ccd	00 f0 b8 00 00 00	Write   [0:0x71e0] = 1
003cce	b3 00 00 00 20 00	Wait    11, Tc
003ccf	00 f0 38 00 00 00	Write   [0:0x71e0] = 0
003cd0	b3 00 00 00 20 00	Wait    11, Tc
003cd1	80 e1 b8 26 05 00	Write   [0:0x71c3] = a4d
003cd2	b3 00 00 00 20 00	Wait    11, Tc
003cd3	80 e1 b8 06 05 00	Write   [0:0x71c3] = a0d
003cd4	c3 2c 01 00 20 00	Wait    4812, Tc
003cd5	80 e9 38 00 02 00	Write   [0:0x71d3] = 400
003cd6	b3 00 00 00 20 00	Wait    11, Tc
003cd7	04 00 00 00 40 00	Branch  0x0, [RET]


class passable_ptr<class ILFunction> __cdecl Vayyar::Centipede::CentipedePortStateCommand::Set(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,bool,bool,bool,enum Vayyar::Centipede::BAND)
003cd8	00 08 98 49 08 00	Write   [0:0x3010] = 1093
003cd9	24 b6 03 00 20 00	Branch  0x3b62, [CALL] < Vayyar::Centipede::CentipedeImplTrModule::SetPortState(const class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,enum Vayyar::Centipede::PORT_MODE) >
003cda	00 08 98 5e 08 00	Write   [0:0x3010] = 10bd
003cdb	94 47 03 00 20 00	Branch  0x3479, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOffSequence(void) >
003cdc	00 08 98 64 08 00	Write   [0:0x3010] = 10c9
003cdd	34 49 03 00 20 00	Branch  0x3493, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void) >
003cde	d4 cb 03 00 20 00	Branch  0x3cbd, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOffSequence(void) >
003cdf	84 4c 03 00 20 00	Branch  0x34c8, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void) >
003ce0	04 00 00 00 40 00	Branch  0x0, [RET]


CentipedeAdcDriverCommand_RecordAfterSweep
003ce1	43 00 00 00 20 00	Wait    4, Tc
003ce2	01 48 98 98 13 00	Copy    [0:3090] = [1:09cc]
003ce3	81 48 98 01 00 01	Copy    [0:3091] = [SF+0], SrcBase: AI
003ce4	93 00 00 00 20 00	Wait    9, Tc
003ce5	11 e6 04 20 61 00	Copy    [1:09cc] = [0:3090]
003ce6	53 00 00 00 20 00	Wait    5, Tc
003ce7	04 00 00 00 40 00	Branch  0x0, [RET]


MainSweep0
003ce8	02 00 00 10 00 00	Cond    0x01000000

003ce9	03 00 00 00 10 00	Wait    0, tC  ******** Conditional Wait. Check code if running MC
003cea	44 75 03 00 20 00	Branch  0x3754, [CALL] < Vayyar::Centipede::CentipedeTxTransmissionIndicationCommand::StartTransmissionIndication(void) const >
003ceb	b4 75 03 00 20 00	Branch  0x375b, [CALL] < Vayyar::Centipede::CentipedePowerManagementCommand::OnSweepStartFirstPhase(void) >		# SweepStart
003cec	94 a8 03 00 20 00	Branch  0x3a89, [CALL] < Vayyar::Centipede::CentipedeTuneFrequencyCommand::TuneFirstFrequencyPatch(class ILFunction *,bool) >
003ced	34 a9 03 00 20 00	Branch  0x3a93, [CALL] < Vayyar::Centipede::CentipedeDacAdcModule::TurnOnSequence(void) >
003cee	10 11 00 6c 04 00	Write   [1:0x0022] = 8d8
003cef	00 08 18 f1 04 00	Write   [0:0x3010] = 9e2
003cf0	b4 57 00 00 20 00	Branch  0x57b, [CALL] < Vayyar::SequencerMath::AddShort(const class IILParam &,const class IILParam &,const class IILParam &) >
003cf1	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003cf2	80 09 18 00 00 00	Write   [0:0x3013] = 0
003cf3	43 00 00 00 20 00	Wait    4, Tc
003cf4	c1 08 80 44 00 00	Copy    [0:0011] = [1:0022], DestBase: A
003cf5	b3 00 00 00 20 00	Wait    11, Tc
003cf6	00 00 10 00 00 00	Write   [0:0x2000] = 0
003cf7	00 01 90 ff 7f 00	Write   [0:0x2002] = ffff
003cf8	00 01 10 00 00 00	Write   [0:0x2002] = 0
003cf9	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003cfa	90 a8 04 00 40 00	Write   [1:0x0951] = 8000
003cfb	10 a9 84 00 00 00	Write   [1:0x0952] = 1
003cfc	02 00 00 10 00 00	Cond    0x01000000
		# Mark RecordingStart
003cfd	03 00 00 00 10 00	Wait    0, tC  ******** Conditional Wait. Check code if running MC
003cfe	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003cff	00 09 18 00 40 00	Write   [0:0x3012] = 8000
003d00	80 09 18 00 00 00	Write   [0:0x3013] = 0
003d01	43 00 00 00 20 00	Wait    4, Tc
003d02	40 08 00 78 00 00	Write   [0:0x0010] = f0, DestBase: A
003d03	b3 00 00 00 20 00	Wait    11, Tc
003d04	00 09 18 00 00 00	Write   [0:0x3012] = 0
003d05	80 09 18 00 00 00	Write   [0:0x3013] = 0
003d06	43 00 00 00 20 00	Wait    4, Tc
003d07	c4 a9 03 00 20 00	Branch  0x3a9c, [CALL] < Vayyar::Centipede::CentipedeRxLineupCommand::SetRecordingPorts(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,int) >
003d08	34 ae 03 00 20 00	Branch  0x3ae3, [CALL] < Vayyar::Centipede::CentipedeGainCommand::Set(int,enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::BAND,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >) >
003d09	84 af 03 00 20 00	Branch  0x3af8, [CALL] < Vayyar::Centipede::CentipedeGainCommand::Set(int,enum Vayyar::Centipede::LINEUP,enum Vayyar::Centipede::BAND,class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >) >
003d0a	04 b0 03 00 20 00	Branch  0x3b00, [CALL] < Vayyar::Centipede::CentipedePortStateCommand::SetOutputEnable(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >) >
003d0b	00 08 98 0b 08 00	Write   [0:0x3010] = 1017
003d0c	24 43 00 00 20 00	Branch  0x432, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void) >
003d0d	b4 b2 03 00 20 00	Branch  0x3b2b, [CALL] < Vayyar::Centipede::CentipedeImplMbHbDistnetModule::TurnOnSequence(void) >
003d0e	00 08 98 18 08 00	Write   [0:0x3010] = 1031
003d0f	24 b6 03 00 20 00	Branch  0x3b62, [CALL] < Vayyar::Centipede::CentipedeImplTrModule::SetPortState(const class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> > &,enum Vayyar::Centipede::PORT_MODE) >
003d10	03 00 00 00 20 00	Wait    0, Tc  [Balance Barrier]
003d11	04 cb 03 00 20 00	Branch  0x3cb0, [CALL] < _FreqsLoop_ >
003d12	84 cd 03 00 20 00	Branch  0x3cd8, [CALL] < Vayyar::Centipede::CentipedePortStateCommand::Set(class std::vector<class Vayyar::Centipede::CentipedePortModule,class std::allocator<class Vayyar::Centipede::CentipedePortModule> >,bool,bool,bool,enum Vayyar::Centipede::BAND) >		# Mark RecordingEnd
003d13	03 58 02 00 20 00	Wait    9600, Tc
003d14	00 18 00 80 00 00	Write   [0:0x0030] = 100
003d15	00 08 98 3b 05 00	Write   [0:0x3010] = a77
003d16	14 ce 03 00 20 00	Branch  0x3ce1, [CALL] < CentipedeAdcDriverCommand_RecordAfterSweep >
003d17	b4 72 03 00 20 00	Branch  0x372b, [CALL] < Vayyar::Centipede::CentipedePowerManagementCommand::OnSweepStop(void) >
003d18	04 00 00 00 40 00	Branch  0x0, [RET]


OnPageStop0
003d19	43 00 00 00 20 00	Wait    4, Tc
003d1a	01 60 88 01 00 01	Copy    [0:10c0] = [SF+0], SrcBase: AI
003d1b	81 01 00 00 80 00	Copy    [0:0003] = [0:4000]
003d1c	33 00 00 00 20 00	Wait    3, Tc
003d1d	81 01 00 00 a0 00	Copy    [0:0003] = [0:5000]
003d1e	23 00 00 00 20 00	Wait    2, Tc
003d1f	81 01 00 00 e0 00	Copy    [0:0003] = [0:7000]
003d20	00 08 18 00 40 00	Write   [0:0x3010] = 8000
003d21	80 08 18 00 00 00	Write   [0:0x3011] = 0
003d22	73 00 00 00 20 00	Wait    7, Tc
003d23	81 01 00 01 00 00	Copy    [0:0003] = [0:0000], SrcBase: A
003d24	00 08 18 3c 05 00	Write   [0:0x3010] = a78
003d25	80 08 18 00 00 00	Write   [0:0x3011] = 0
003d26	43 00 00 00 20 00	Wait    4, Tc
003d27	04 00 00 00 40 00	Branch  0x0, [RET]


__MainSweep0
003d28	43 00 00 00 20 00	Wait    4, Tc
003d29	01 60 88 01 00 01	Copy    [0:10c0] = [SF+0], SrcBase: AI
003d2a	84 ce 03 00 20 00	Branch  0x3ce8, [CALL] < MainSweep0 >
003d2b	00 08 98 3b 05 00	Write   [0:0x3010] = a77
003d2c	94 d1 03 00 20 00	Branch  0x3d19, [CALL] < OnPageStop0 >
003d2d	00 08 18 27 05 00	Write   [0:0x3010] = a4e
003d2e	43 00 00 00 20 00	Wait    4, Tc
003d2f	04 00 00 00 40 00	Branch  0x0, [RET]
		# __Balancer_Stop__

OneShot_Main
003d30	43 00 00 00 20 00	Wait    4, Tc
003d31	74 4b 00 00 20 00	Branch  0x4b7, [CALL] < InitCode_Chip_0 >
003d32	00 08 18 ed 04 00	Write   [0:0x3010] = 9da
003d33	43 00 00 00 20 00	Wait    4, Tc
003d34	11 e7 84 01 00 01	Copy    [1:09ce] = [SF+0], SrcBase: AI
003d35	43 06 00 00 20 00	Wait    100, Tc
003d36	34 52 03 00 20 00	Branch  0x3523, [CALL] < ta_Output __cdecl Vayyar::Centipede::CentipedeCalibrationBlockLib::BuildSweepCalibration(bool) >
003d37	00 08 98 ed 04 00	Write   [0:0x3010] = 9db
003d38	43 00 00 00 20 00	Wait    4, Tc
003d39	11 e7 84 01 00 01	Copy    [1:09ce] = [SF+1], SrcBase: AI
003d3a	43 06 00 00 20 00	Wait    100, Tc
003d3b	74 5d 03 00 20 00	Branch  0x35d7, [CALL] < SetIqBal_OneTapParams >
003d3c	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
003d3d	93 06 00 00 20 00	Wait    105, Tc
003d3e	e4 73 03 00 20 00	Branch  0x373e, [CALL] < InitCode0 >
003d3f	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
003d40	93 06 00 00 20 00	Wait    105, Tc
003d41	00 08 98 26 05 00	Write   [0:0x3010] = a4d
003d42	84 d2 03 00 20 00	Branch  0x3d28, [CALL] < __MainSweep0 >
003d43	00 08 18 ee 04 00	Write   [0:0x3010] = 9dc
003d44	93 06 00 00 20 00	Wait    105, Tc
003d45	04 00 00 00 40 00	Branch  0x0, [RET]

